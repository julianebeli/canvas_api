{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Swagger API",
    "contact": {}
  },
  "host": "canvas.instructure.com",
  "basePath": "/doc/api/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/accounts/{account_id}/scopes": {
      "get": {
        "description": "List scopes",
        "summary": "list_scopes",
        "tags": [
          "api_token_scopes"
        ],
        "operationId": "V1AccountsScopesByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "enum": [
              "resource_name"
            ],
            "type": "string",
            "description": "The attribute to group the scopes by. By default no grouping is done."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/search": {
      "get": {
        "description": "Search account domains",
        "summary": "search_account_domains",
        "tags": [
          "account_domain_lookups"
        ],
        "operationId": "V1AccountsSearchGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "campus name"
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "latitude",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "no description"
          },
          {
            "name": "longitude",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/account_notifications": {
      "get": {
        "description": "Index of active global notification for the user",
        "summary": "index_of_active_global_notification_for_user",
        "tags": [
          "account_notifications"
        ],
        "operationId": "V1AccountsAccountNotificationsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a global notification",
        "summary": "create_global_notification",
        "tags": [
          "account_notifications"
        ],
        "operationId": "V1AccountsAccountNotificationsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "account_notification[subject]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The subject of the notification."
          },
          {
            "name": "account_notification[message]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The message body of the notification."
          },
          {
            "name": "account_notification[start_at]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z"
          },
          {
            "name": "account_notification[end_at]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z"
          },
          {
            "name": "account_notification[icon]",
            "in": "formData",
            "required": false,
            "enum": [
              "warning",
              "information",
              "question",
              "error",
              "calendar"
            ],
            "type": "string",
            "description": "The icon to display with the notification.\nNote: Defaults to warning."
          },
          {
            "name": "account_notification_roles",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/account_notifications/{id}": {
      "get": {
        "description": "Show a global notification",
        "summary": "show_global_notification",
        "tags": [
          "account_notifications"
        ],
        "operationId": "V1AccountsAccountNotificationsByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Close notification for user",
        "summary": "close_notification_for_user",
        "tags": [
          "account_notifications"
        ],
        "operationId": "V1AccountsAccountNotificationsByAccountIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a global notification",
        "summary": "update_global_notification",
        "tags": [
          "account_notifications"
        ],
        "operationId": "V1AccountsAccountNotificationsByAccountIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "account_notification[subject]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The subject of the notification."
          },
          {
            "name": "account_notification[message]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The message body of the notification."
          },
          {
            "name": "account_notification[start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z"
          },
          {
            "name": "account_notification[end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z"
          },
          {
            "name": "account_notification[icon]",
            "in": "formData",
            "required": false,
            "enum": [
              "warning",
              "information",
              "question",
              "error",
              "calendar"
            ],
            "type": "string",
            "description": "The icon to display with the notification."
          },
          {
            "name": "account_notification_roles",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/reports": {
      "get": {
        "description": "List Available Reports",
        "summary": "list_available_reports",
        "tags": [
          "account_reports"
        ],
        "operationId": "V1AccountsReportsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/reports/{report}": {
      "post": {
        "description": "Start a Report",
        "summary": "start_report",
        "tags": [
          "account_reports"
        ],
        "operationId": "V1AccountsReportsByAccountIdAndReportPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "report",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "parameters",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The parameters will vary for each report. To fetch a list\nof available parameters for each report, see {api:AccountReportsController#available_reports List Available Reports}.\nA few example parameters have been provided below. Note that the example\nparameters provided below may not be valid for every report."
          },
          {
            "name": "parameters[course_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the course to report on.\nNote: this parameter has been listed to serve as an example and may not be\nvalid for every report."
          },
          {
            "name": "parameters[users]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, user data will be included. If\nfalse, user data will be omitted. Note: this parameter has been listed to\nserve as an example and may not be valid for every report."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Index of Reports",
        "summary": "index_of_reports",
        "tags": [
          "account_reports"
        ],
        "operationId": "V1AccountsReportsByAccountIdAndReportGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "report",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/reports/{report}/{id}": {
      "get": {
        "description": "Status of a Report",
        "summary": "status_of_report",
        "tags": [
          "account_reports"
        ],
        "operationId": "V1AccountsReportsIdByAccountIdAndReportGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "report",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a Report",
        "summary": "delete_report",
        "tags": [
          "account_reports"
        ],
        "operationId": "V1AccountsReportsIdByAccountIdAndReportDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "report",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts": {
      "get": {
        "description": "List accounts",
        "summary": "list_accounts",
        "tags": [
          "accounts"
        ],
        "operationId": "V1AccountsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "lti_guid",
              "registration_settings",
              "services"
            ],
            "type": "string",
            "description": "Array of additional information to include.\n\n\"lti_guid\":: the 'tool_consumer_instance_guid' that will be sent for this account on LTI launches\n\"registration_settings\":: returns info about the privacy policy and terms of use\n\"services\":: returns services and whether they are enabled (requires account management permissions)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/course_accounts": {
      "get": {
        "description": "List accounts for course admins",
        "summary": "list_accounts_for_course_admins",
        "tags": [
          "accounts"
        ],
        "operationId": "V1CourseAccountsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{id}": {
      "get": {
        "description": "Get a single account",
        "summary": "get_single_account",
        "tags": [
          "accounts"
        ],
        "operationId": "V1AccountsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update an account",
        "summary": "update_account",
        "tags": [
          "accounts"
        ],
        "operationId": "V1AccountsByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "account[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Updates the account name"
          },
          {
            "name": "account[sis_account_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Updates the account sis_account_id\nMust have manage_sis permission and must not be a root_account."
          },
          {
            "name": "account[default_time_zone]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The default time zone of the account. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
          },
          {
            "name": "account[default_storage_quota_mb]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The default course storage quota to be used, if not otherwise specified."
          },
          {
            "name": "account[default_user_storage_quota_mb]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The default user storage quota to be used, if not otherwise specified."
          },
          {
            "name": "account[default_group_storage_quota_mb]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The default group storage quota to be used, if not otherwise specified."
          },
          {
            "name": "account[settings][restrict_student_past_view][value]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Restrict students from viewing courses after end date"
          },
          {
            "name": "account[settings][restrict_student_past_view][locked]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Lock this setting for sub-accounts and courses"
          },
          {
            "name": "account[settings][restrict_student_future_view][value]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Restrict students from viewing courses before start date"
          },
          {
            "name": "account[settings][restrict_student_future_view][locked]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Lock this setting for sub-accounts and courses"
          },
          {
            "name": "account[settings][lock_all_announcements][value]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Disable comments on announcements"
          },
          {
            "name": "account[settings][lock_all_announcements][locked]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Lock this setting for sub-accounts and courses"
          },
          {
            "name": "account[settings][restrict_student_future_listing][value]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Restrict students from viewing future enrollments in course list"
          },
          {
            "name": "account[settings][restrict_student_future_listing][locked]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Lock this setting for sub-accounts and courses"
          },
          {
            "name": "account[services]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Give this a set of keys and boolean values to enable or disable services matching the keys"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/permissions": {
      "get": {
        "description": "Permissions",
        "summary": "permissions",
        "tags": [
          "accounts"
        ],
        "operationId": "V1AccountsPermissionsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "permissions",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/sub_accounts": {
      "get": {
        "description": "Get the sub-accounts of an account",
        "summary": "get_sub_accounts_of_account",
        "tags": [
          "accounts"
        ],
        "operationId": "V1AccountsSubAccountsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "recursive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, the entire account tree underneath\nthis account will be returned (though still paginated). If false, only\ndirect sub-accounts of this account will be returned. Defaults to false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a new sub-account",
        "summary": "create_new_sub_account",
        "tags": [
          "accounts"
        ],
        "operationId": "V1AccountsSubAccountsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "account[name]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The name of the new sub-account."
          },
          {
            "name": "account[sis_account_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The account's identifier in the Student Information System."
          },
          {
            "name": "account[default_storage_quota_mb]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The default course storage quota to be used, if not otherwise specified."
          },
          {
            "name": "account[default_user_storage_quota_mb]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The default user storage quota to be used, if not otherwise specified."
          },
          {
            "name": "account[default_group_storage_quota_mb]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The default group storage quota to be used, if not otherwise specified."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/terms_of_service": {
      "get": {
        "description": "Get the Terms of Service",
        "summary": "get_terms_of_service",
        "tags": [
          "accounts"
        ],
        "operationId": "V1AccountsTermsOfServiceByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/help_links": {
      "get": {
        "description": "Get help links",
        "summary": "get_help_links",
        "tags": [
          "accounts"
        ],
        "operationId": "V1AccountsHelpLinksByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/courses": {
      "get": {
        "description": "List active courses in an account",
        "summary": "list_active_courses_in_account",
        "tags": [
          "accounts"
        ],
        "operationId": "V1AccountsCoursesByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "with_enrollments",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, include only courses with at least one enrollment.  If false,\ninclude only courses with no enrollments.  If not present, do not filter\non course enrollment status."
          },
          {
            "name": "enrollment_type",
            "in": "query",
            "required": false,
            "enum": [
              "teacher",
              "student",
              "ta",
              "observer",
              "designer"
            ],
            "type": "string",
            "description": "If set, only return courses that have at least one user enrolled in\nin the course with one of the specified enrollment types."
          },
          {
            "name": "published",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, include only published courses.  If false, exclude published\ncourses.  If not present, do not filter on published status."
          },
          {
            "name": "completed",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, include only completed courses (these may be in state\n'completed', or their enrollment term may have ended).  If false, exclude\ncompleted courses.  If not present, do not filter on completed status."
          },
          {
            "name": "blueprint",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, include only blueprint courses. If false, exclude them.\nIf not present, do not filter on this basis."
          },
          {
            "name": "blueprint_associated",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, include only courses that inherit content from a blueprint course.\nIf false, exclude them. If not present, do not filter on this basis."
          },
          {
            "name": "by_teachers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of User IDs of teachers; if supplied, include only courses taught by\none of the referenced users."
          },
          {
            "name": "by_subaccounts",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of Account IDs; if supplied, include only courses associated with one\nof the referenced subaccounts."
          },
          {
            "name": "hide_enrollmentless_courses",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If present, only return courses that have at least one enrollment.\nEquivalent to 'with_enrollments=true'; retained for compatibility."
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "enum": [
              "created",
              "claimed",
              "available",
              "completed",
              "deleted",
              "all"
            ],
            "type": "string",
            "description": "If set, only return courses that are in the given state(s). By default,\nall states but \"deleted\" are returned."
          },
          {
            "name": "enrollment_term_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If set, only includes courses from the specified term."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial course name, code, or full ID to match and return in the results list. Must be at least 3 characters."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "syllabus_body",
              "term",
              "course_progress",
              "storage_quota_used_mb",
              "total_students",
              "teachers",
              "account_name",
              "concluded"
            ],
            "type": "string",
            "description": "- All explanations can be seen in the {api:CoursesController#index Course API index documentation}\n- \"sections\", \"needs_grading_count\" and \"total_scores\" are not valid options at the account level"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "course_name",
              "sis_course_id",
              "teacher",
              "account_name"
            ],
            "type": "string",
            "description": "The column to sort results by."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "The order to sort the given column by."
          },
          {
            "name": "search_by",
            "in": "query",
            "required": false,
            "enum": [
              "course",
              "teacher"
            ],
            "type": "string",
            "description": "The filter to search by. \"course\" searches for course names, course codes,\nand SIS IDs. \"teacher\" searches for teacher names"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a new course",
        "summary": "create_new_course",
        "tags": [
          "courses"
        ],
        "operationId": "V1AccountsCoursesByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "course[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the course. If omitted, the course will be named \"Unnamed\nCourse.\""
          },
          {
            "name": "course[course_code]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The course code for the course."
          },
          {
            "name": "course[start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z"
          },
          {
            "name": "course[end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z"
          },
          {
            "name": "course[license]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the licensing. Should be one of the following abbreviations\n(a descriptive name is included in parenthesis for reference):\n- 'private' (Private Copyrighted)\n- 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives)\n- 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike)\n- 'cc_by_nc' (CC Attribution Non-Commercial)\n- 'cc_by_nd' (CC Attribution No Derivatives)\n- 'cc_by_sa' (CC Attribution Share Alike)\n- 'cc_by' (CC Attribution)\n- 'public_domain' (Public Domain)."
          },
          {
            "name": "course[is_public]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true if course is public to both authenticated and unauthenticated users."
          },
          {
            "name": "course[is_public_to_auth_users]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true if course is public only to authenticated users."
          },
          {
            "name": "course[public_syllabus]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true to make the course syllabus public."
          },
          {
            "name": "course[public_syllabus_to_auth]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true to make the course syllabus public for authenticated users."
          },
          {
            "name": "course[public_description]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A publicly visible description of the course."
          },
          {
            "name": "course[allow_student_wiki_edits]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, students will be able to modify the course wiki."
          },
          {
            "name": "course[allow_wiki_comments]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, course members will be able to comment on wiki pages."
          },
          {
            "name": "course[allow_student_forum_attachments]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, students can attach files to forum posts."
          },
          {
            "name": "course[open_enrollment]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true if the course is open enrollment."
          },
          {
            "name": "course[self_enrollment]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true if the course is self enrollment."
          },
          {
            "name": "course[restrict_enrollments_to_course_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true to restrict user enrollments to the start and end dates of the\ncourse."
          },
          {
            "name": "course[term_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The unique ID of the term to create to course in."
          },
          {
            "name": "course[sis_course_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The unique SIS identifier."
          },
          {
            "name": "course[integration_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The unique Integration identifier."
          },
          {
            "name": "course[hide_final_grades]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If this option is set to true, the totals in student grades summary will\nbe hidden."
          },
          {
            "name": "course[apply_assignment_group_weights]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true to weight final grade based on assignment groups percentages."
          },
          {
            "name": "course[time_zone]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
          },
          {
            "name": "offer",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If this option is set to true, the course will be available to students\nimmediately."
          },
          {
            "name": "enroll_me",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true to enroll the current user as the teacher."
          },
          {
            "name": "course[default_view]",
            "in": "formData",
            "required": false,
            "enum": [
              "feed",
              "wiki",
              "modules",
              "syllabus",
              "assignments"
            ],
            "type": "string",
            "description": "The type of page that users will see when they first visit the course\n* 'feed' Recent Activity Dashboard\n* 'modules' Course Modules/Sections Page\n* 'assignments' Course Assignments List\n* 'syllabus' Course Syllabus Page\nother types may be added in the future"
          },
          {
            "name": "course[syllabus_body]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The syllabus body for the course"
          },
          {
            "name": "course[grading_standard_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course."
          },
          {
            "name": "course[course_format]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Optional. Specifies the format of the course. (Should be 'on_campus', 'online', or 'blended')"
          },
          {
            "name": "enable_sis_reactivation",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "When true, will first try to re-activate a deleted course with matching sis_course_id if possible."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update courses",
        "summary": "update_courses",
        "tags": [
          "courses"
        ],
        "operationId": "V1AccountsCoursesByAccountIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "course_ids",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of courses to update. At most 500 courses may be updated in one call."
          },
          {
            "name": "event",
            "in": "formData",
            "required": true,
            "enum": [
              "offer",
              "conclude",
              "delete",
              "undelete"
            ],
            "type": "string",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/users/{user_id}": {
      "delete": {
        "description": "Delete a user from the root account",
        "summary": "delete_user_from_root_account",
        "tags": [
          "accounts"
        ],
        "operationId": "V1AccountsUsersByAccountIdAndUserIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/sub_accounts/{id}": {
      "delete": {
        "description": "Delete a sub-account",
        "summary": "delete_sub_account",
        "tags": [
          "accounts"
        ],
        "operationId": "V1AccountsSubAccountsByAccountIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/admins": {
      "post": {
        "description": "Make an account admin",
        "summary": "make_account_admin",
        "tags": [
          "admins"
        ],
        "operationId": "V1AccountsAdminsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the user to promote."
          },
          {
            "name": "role",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "[DEPRECATED] The user's admin relationship with the account will be\ncreated with the given role. Defaults to 'AccountAdmin'."
          },
          {
            "name": "role_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The user's admin relationship with the account will be created with the\ngiven role. Defaults to the built-in role for 'AccountAdmin'."
          },
          {
            "name": "send_confirmation",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Send a notification email to\nthe new admin if true. Default is true."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List account admins",
        "summary": "list_account_admins",
        "tags": [
          "admins"
        ],
        "operationId": "V1AccountsAdminsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Scope the results to those with user IDs equal to any of the IDs specified here."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/admins/{user_id}": {
      "delete": {
        "description": "Remove account admin",
        "summary": "remove_account_admin",
        "tags": [
          "admins"
        ],
        "operationId": "V1AccountsAdminsByAccountIdAndUserIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "[DEPRECATED] Account role to remove from the user. Defaults to\n'AccountAdmin'. Any other account role must be specified explicitly."
          },
          {
            "name": "role_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The user's admin relationship with the account will be created with the\ngiven role. Defaults to the built-in role for 'AccountAdmin'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/analytics/terms/{term_id}/activity": {
      "get": {
        "description": "Get department-level participation data",
        "summary": "get_department_level_participation_data_terms",
        "tags": [
          "analytics"
        ],
        "operationId": "V1AccountsAnalyticsTermsActivityByAccountIdAndTermIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "term_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/analytics/current/activity": {
      "get": {
        "description": "Get department-level participation data",
        "summary": "get_department_level_participation_data_current",
        "tags": [
          "analytics"
        ],
        "operationId": "V1AccountsAnalyticsCurrentActivityByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/analytics/completed/activity": {
      "get": {
        "description": "Get department-level participation data",
        "summary": "get_department_level_participation_data_completed",
        "tags": [
          "analytics"
        ],
        "operationId": "V1AccountsAnalyticsCompletedActivityByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/analytics/terms/{term_id}/grades": {
      "get": {
        "description": "Get department-level grade data",
        "summary": "get_department_level_grade_data_terms",
        "tags": [
          "analytics"
        ],
        "operationId": "V1AccountsAnalyticsTermsGradesByAccountIdAndTermIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "term_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/analytics/current/grades": {
      "get": {
        "description": "Get department-level grade data",
        "summary": "get_department_level_grade_data_current",
        "tags": [
          "analytics"
        ],
        "operationId": "V1AccountsAnalyticsCurrentGradesByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/analytics/completed/grades": {
      "get": {
        "description": "Get department-level grade data",
        "summary": "get_department_level_grade_data_completed",
        "tags": [
          "analytics"
        ],
        "operationId": "V1AccountsAnalyticsCompletedGradesByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics": {
      "get": {
        "description": "Get department-level statistics",
        "summary": "get_department_level_statistics_terms",
        "tags": [
          "analytics"
        ],
        "operationId": "V1AccountsAnalyticsTermsStatisticsByAccountIdAndTermIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "term_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/analytics/current/statistics": {
      "get": {
        "description": "Get department-level statistics",
        "summary": "get_department_level_statistics_current",
        "tags": [
          "analytics"
        ],
        "operationId": "V1AccountsAnalyticsCurrentStatisticsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/analytics/completed/statistics": {
      "get": {
        "description": "Get department-level statistics",
        "summary": "get_department_level_statistics_completed",
        "tags": [
          "analytics"
        ],
        "operationId": "V1AccountsAnalyticsCompletedStatisticsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/analytics/activity": {
      "get": {
        "description": "Get course-level participation data",
        "summary": "get_course_level_participation_data",
        "tags": [
          "analytics"
        ],
        "operationId": "V1CoursesAnalyticsActivityByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/analytics/assignments": {
      "get": {
        "description": "Get course-level assignment data",
        "summary": "get_course_level_assignment_data",
        "tags": [
          "analytics"
        ],
        "operationId": "V1CoursesAnalyticsAssignmentsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "async",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If async is true, then the course_assignments call can happen asynch-\nronously and MAY return a response containing a progress_url key instead\nof an assignments array. If it does, then it is the caller's\nresponsibility to poll the API again to see if the progress is complete.\nIf the data is ready (possibly even on the first async call) then it\nwill be passed back normally, as documented in the example response."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/analytics/student_summaries": {
      "get": {
        "description": "Get course-level student summary data",
        "summary": "get_course_level_student_summary_data",
        "tags": [
          "analytics"
        ],
        "operationId": "V1CoursesAnalyticsStudentSummariesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "sort_column",
            "in": "query",
            "required": false,
            "enum": [
              "name",
              "name_descending",
              "score",
              "score_descending",
              "participations",
              "participations_descending",
              "page_views",
              "page_views_descending"
            ],
            "type": "string",
            "description": "The order results in which results are returned.  Defaults to \"name\"."
          },
          {
            "name": "student_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If set, returns only the specified student."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/analytics/users/{student_id}/activity": {
      "get": {
        "description": "Get user-in-a-course-level participation data",
        "summary": "get_user_in_a_course_level_participation_data",
        "tags": [
          "analytics"
        ],
        "operationId": "V1CoursesAnalyticsUsersActivityByCourseIdAndStudentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "student_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/analytics/users/{student_id}/assignments": {
      "get": {
        "description": "Get user-in-a-course-level assignment data",
        "summary": "get_user_in_a_course_level_assignment_data",
        "tags": [
          "analytics"
        ],
        "operationId": "V1CoursesAnalyticsUsersAssignmentsByCourseIdAndStudentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "student_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/analytics/users/{student_id}/communication": {
      "get": {
        "description": "Get user-in-a-course-level messaging data",
        "summary": "get_user_in_a_course_level_messaging_data",
        "tags": [
          "analytics"
        ],
        "operationId": "V1CoursesAnalyticsUsersCommunicationByCourseIdAndStudentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "student_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/external_feeds": {
      "get": {
        "description": "List external feeds",
        "summary": "list_external_feeds_courses",
        "tags": [
          "announcement_external_feeds"
        ],
        "operationId": "V1CoursesExternalFeedsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create an external feed",
        "summary": "create_external_feed_courses",
        "tags": [
          "announcement_external_feeds"
        ],
        "operationId": "V1CoursesExternalFeedsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The url to the external rss or atom feed"
          },
          {
            "name": "header_match",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If given, only feed entries that contain this string in their title will be imported"
          },
          {
            "name": "verbosity",
            "in": "formData",
            "required": false,
            "enum": [
              "full",
              "truncate",
              "link_only"
            ],
            "type": "string",
            "description": "Defaults to \"full\""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/external_feeds": {
      "get": {
        "description": "List external feeds",
        "summary": "list_external_feeds_groups",
        "tags": [
          "announcement_external_feeds"
        ],
        "operationId": "V1GroupsExternalFeedsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create an external feed",
        "summary": "create_external_feed_groups",
        "tags": [
          "announcement_external_feeds"
        ],
        "operationId": "V1GroupsExternalFeedsByGroupIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The url to the external rss or atom feed"
          },
          {
            "name": "header_match",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If given, only feed entries that contain this string in their title will be imported"
          },
          {
            "name": "verbosity",
            "in": "formData",
            "required": false,
            "enum": [
              "full",
              "truncate",
              "link_only"
            ],
            "type": "string",
            "description": "Defaults to \"full\""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/external_feeds/{external_feed_id}": {
      "delete": {
        "description": "Delete an external feed",
        "summary": "delete_external_feed_courses",
        "tags": [
          "announcement_external_feeds"
        ],
        "operationId": "V1CoursesExternalFeedsByCourseIdAndExternalFeedIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "external_feed_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/external_feeds/{external_feed_id}": {
      "delete": {
        "description": "Delete an external feed",
        "summary": "delete_external_feed_groups",
        "tags": [
          "announcement_external_feeds"
        ],
        "operationId": "V1GroupsExternalFeedsByGroupIdAndExternalFeedIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "external_feed_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/announcements": {
      "get": {
        "description": "List announcements",
        "summary": "list_announcements",
        "tags": [
          "announcements"
        ],
        "operationId": "V1AnnouncementsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context_codes",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of context_codes to retrieve announcements for (for example, +course_123+). Only courses\nare presently supported. The call will fail unless the caller has View Announcements permission\nin all listed courses."
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only return announcements posted since the start_date (inclusive).\nDefaults to 14 days ago. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ."
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only return announcements posted before the end_date (inclusive).\nDefaults to 28 days from start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nAnnouncements scheduled for future posting will only be returned to course administrators."
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Only return active announcements that have been published.\nApplies only to requesting users that have permission to view\nunpublished items.\nDefaults to false for users with access to view unpublished items,\notherwise true and unmodifiable."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Optional list of resources to include with the response. May include\na string of the name of the resource. Possible values are:\n\"sections\", \"sections_user_count\"\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to sertain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/appointment_groups": {
      "get": {
        "description": "List appointment groups",
        "summary": "list_appointment_groups",
        "tags": [
          "appointment_groups"
        ],
        "operationId": "V1AppointmentGroupsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "enum": [
              "reservable",
              "manageable"
            ],
            "type": "string",
            "description": "Defaults to \"reservable\""
          },
          {
            "name": "context_codes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of context codes used to limit returned results."
          },
          {
            "name": "include_past_appointments",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Defaults to false. If true, includes past appointment groups"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "appointments",
              "child_events",
              "participant_count",
              "reserved_times",
              "all_context_codes"
            ],
            "type": "string",
            "description": "Array of additional information to include.\n\n\"appointments\":: calendar event time slots for this appointment group\n\"child_events\":: reservations of those time slots\n\"participant_count\":: number of reservations\n\"reserved_times\":: the event id, start time and end time of reservations\n                   the current user has made)\n\"all_context_codes\":: all context codes associated with this appointment group"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create an appointment group",
        "summary": "create_appointment_group",
        "tags": [
          "appointment_groups"
        ],
        "operationId": "V1AppointmentGroupsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "appointment_group[context_codes]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group."
          },
          {
            "name": "appointment_group[title]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "Short title for the appointment group."
          },
          {
            "name": "appointment_group[sub_context_codes]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\"."
          },
          {
            "name": "appointment_group[description]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Longer text description of the appointment group."
          },
          {
            "name": "appointment_group[location_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Location name of the appointment group."
          },
          {
            "name": "appointment_group[location_address]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Location address."
          },
          {
            "name": "appointment_group[publish]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false."
          },
          {
            "name": "appointment_group[participants_per_appointment]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit)."
          },
          {
            "name": "appointment_group[min_appointments_per_participant]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots."
          },
          {
            "name": "appointment_group[max_appointments_per_participant]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Maximum number of time slots a user may register for."
          },
          {
            "name": "appointment_group[new_appointments][X]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request."
          },
          {
            "name": "appointment_group[participant_visibility]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up.  Defaults to\n              \"private\"."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/appointment_groups/{id}": {
      "get": {
        "description": "Get a single appointment group",
        "summary": "get_single_appointment_group",
        "tags": [
          "appointment_groups"
        ],
        "operationId": "V1AppointmentGroupsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "child_events",
              "appointments",
              "all_context_codes"
            ],
            "type": "string",
            "description": "Array of additional information to include. See include[] argument of\n\"List appointment groups\" action.\n\n\"child_events\":: reservations of time slots time slots\n\"appointments\":: will always be returned\n\"all_context_codes\":: all context codes associated with this appointment group"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update an appointment group",
        "summary": "update_appointment_group",
        "tags": [
          "appointment_groups"
        ],
        "operationId": "V1AppointmentGroupsByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "appointment_group[context_codes]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group."
          },
          {
            "name": "appointment_group[sub_context_codes]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\"."
          },
          {
            "name": "appointment_group[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Short title for the appointment group."
          },
          {
            "name": "appointment_group[description]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Longer text description of the appointment group."
          },
          {
            "name": "appointment_group[location_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Location name of the appointment group."
          },
          {
            "name": "appointment_group[location_address]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Location address."
          },
          {
            "name": "appointment_group[publish]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false."
          },
          {
            "name": "appointment_group[participants_per_appointment]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit)."
          },
          {
            "name": "appointment_group[min_appointments_per_participant]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots."
          },
          {
            "name": "appointment_group[max_appointments_per_participant]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Maximum number of time slots a user may register for."
          },
          {
            "name": "appointment_group[new_appointments][X]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request."
          },
          {
            "name": "appointment_group[participant_visibility]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up. Defaults to \"private\"."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete an appointment group",
        "summary": "delete_appointment_group",
        "tags": [
          "appointment_groups"
        ],
        "operationId": "V1AppointmentGroupsByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "cancel_reason",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Reason for deleting/canceling the appointment group."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/appointment_groups/{id}/users": {
      "get": {
        "description": "List user participants",
        "summary": "list_user_participants",
        "tags": [
          "appointment_groups"
        ],
        "operationId": "V1AppointmentGroupsUsersByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "registration_status",
            "in": "query",
            "required": false,
            "enum": [
              "all",
              "registered"
            ],
            "type": "string",
            "description": "Limits results to the a given participation status, defaults to \"all\""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/appointment_groups/{id}/groups": {
      "get": {
        "description": "List student group participants",
        "summary": "list_student_group_participants",
        "tags": [
          "appointment_groups"
        ],
        "operationId": "V1AppointmentGroupsGroupsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "registration_status",
            "in": "query",
            "required": false,
            "enum": [
              "all",
              "registered"
            ],
            "type": "string",
            "description": "Limits results to the a given participation status, defaults to \"all\""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/appointment_groups/next_appointment": {
      "get": {
        "description": "Get next appointment",
        "summary": "get_next_appointment",
        "tags": [
          "appointment_groups"
        ],
        "operationId": "V1AppointmentGroupsNextAppointmentGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appointment_group_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of appointment groups to search."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/extensions": {
      "post": {
        "description": "Set extensions for student assignment submissions",
        "summary": "set_extensions_for_student_assignment_submissions",
        "tags": [
          "assignment_extensions"
        ],
        "operationId": "V1CoursesAssignmentsExtensionsByCourseIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_extensions[user_id]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ID of the user we want to add assignment extensions for."
          },
          {
            "name": "assignment_extensions[extra_attempts]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Number of times the student is allowed to re-take the assignment over the\nlimit."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignment_groups": {
      "get": {
        "description": "List assignment groups",
        "summary": "list_assignment_groups",
        "tags": [
          "assignment_groups"
        ],
        "operationId": "V1CoursesAssignmentGroupsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "assignments",
              "discussion_topic",
              "all_dates",
              "assignment_visibility",
              "overrides",
              "submission"
            ],
            "type": "string",
            "description": "Associations to include with the group. \"discussion_topic\", \"all_dates\"\n\"assignment_visibility\" & \"submission\" are only valid if \"assignments\" is also included.\nThe \"assignment_visibility\" option additionally requires that the Differentiated Assignments course feature be turned on."
          },
          {
            "name": "exclude_assignment_submission_types",
            "in": "query",
            "required": false,
            "enum": [
              "online_quiz",
              "discussion_topic",
              "wiki_page",
              "external_tool"
            ],
            "type": "string",
            "description": "If \"assignments\" are included, those with the specified submission types\nwill be excluded from the assignment groups."
          },
          {
            "name": "override_assignment_dates",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Apply assignment overrides for each assignment, defaults to true."
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist.)"
          },
          {
            "name": "scope_assignments_to_student",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, all assignments returned will apply to the current user in the\nspecified grading period. If assignments apply to other students in the\nspecified grading period, but not the current user, they will not be\nreturned. (Requires the grading_period_id argument and grading periods to\nexist. In addition, the current user must be a student.)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create an Assignment Group",
        "summary": "create_assignment_group",
        "tags": [
          "assignment_groups"
        ],
        "operationId": "V1CoursesAssignmentGroupsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The assignment group's name"
          },
          {
            "name": "position",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The position of this assignment group in relation to the other assignment groups"
          },
          {
            "name": "group_weight",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The percent of the total grade that this assignment group represents"
          },
          {
            "name": "sis_source_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The sis source id of the Assignment Group"
          },
          {
            "name": "integration_data",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The integration data of the Assignment Group"
          },
          {
            "name": "rules",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The grading rules that are applied within this assignment group\nSee the Assignment Group object definition for format"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}": {
      "get": {
        "description": "Get an Assignment Group",
        "summary": "get_assignment_group",
        "tags": [
          "assignment_groups"
        ],
        "operationId": "V1CoursesAssignmentGroupsByCourseIdAndAssignmentGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "assignments",
              "discussion_topic",
              "assignment_visibility",
              "submission"
            ],
            "type": "string",
            "description": "Associations to include with the group. \"discussion_topic\" and \"assignment_visibility\" and \"submission\"\nare only valid if \"assignments\" is also included. The \"assignment_visibility\" option additionally\nrequires that the Differentiated Assignments course feature be turned on."
          },
          {
            "name": "override_assignment_dates",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Apply assignment overrides for each assignment, defaults to true."
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist on the account)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Edit an Assignment Group",
        "summary": "edit_assignment_group",
        "tags": [
          "assignment_groups"
        ],
        "operationId": "V1CoursesAssignmentGroupsByCourseIdAndAssignmentGroupIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Destroy an Assignment Group",
        "summary": "destroy_assignment_group",
        "tags": [
          "assignment_groups"
        ],
        "operationId": "V1CoursesAssignmentGroupsByCourseIdAndAssignmentGroupIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "move_assignments_to",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of an active Assignment Group to which the assignments that are\ncurrently assigned to the destroyed Assignment Group will be assigned.\nNOTE: If this argument is not provided, any assignments in this Assignment\nGroup will be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{id}": {
      "delete": {
        "description": "Delete an assignment",
        "summary": "delete_assignment",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsByCourseIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Get a single assignment",
        "summary": "get_single_assignment",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission",
              "assignment_visibility",
              "overrides",
              "observed_users"
            ],
            "type": "string",
            "description": "Associations to include with the assignment. The \"assignment_visibility\" option\nrequires that the Differentiated Assignments course feature be turned on. If\n\"observed_users\" is passed, submissions for observed users will also be included."
          },
          {
            "name": "override_assignment_dates",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Apply assignment overrides to the assignment, defaults to true."
          },
          {
            "name": "needs_grading_count_by_section",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false"
          },
          {
            "name": "all_dates",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "All dates associated with the assignment, if applicable"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Edit an assignment",
        "summary": "edit_assignment",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The assignment name."
          },
          {
            "name": "assignment[position]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The position of this assignment in the group when displaying\nassignment lists."
          },
          {
            "name": "assignment[submission_types]",
            "in": "formData",
            "required": false,
            "enum": [
              "online_quiz",
              "none",
              "on_paper",
              "discussion_topic",
              "external_tool",
              "online_upload",
              "online_text_entry",
              "online_url",
              "media_recording"
            ],
            "type": "string",
            "description": "List of supported submission types for the assignment.\nUnless the assignment is allowing online submissions, the array should\nonly have one element.\n\nIf not allowing online submissions, your options are:\n  \"online_quiz\"\n  \"none\"\n  \"on_paper\"\n  \"discussion_topic\"\n  \"external_tool\"\n\nIf you are allowing online submissions, you can have one or many\nallowed submission types:\n\n  \"online_upload\"\n  \"online_text_entry\"\n  \"online_url\"\n  \"media_recording\" (Only valid when the Kaltura plugin is enabled)"
          },
          {
            "name": "assignment[allowed_extensions]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n  allowed_extensions: [\"docx\",\"ppt\"]"
          },
          {
            "name": "assignment[turnitin_enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course."
          },
          {
            "name": "assignment[vericite_enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course."
          },
          {
            "name": "assignment[turnitin_settings]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Settings to send along to turnitin. See Assignment object definition for\nformat."
          },
          {
            "name": "assignment[integration_data]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required."
          },
          {
            "name": "assignment[integration_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Unique ID from third party integrations"
          },
          {
            "name": "assignment[peer_reviews]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment."
          },
          {
            "name": "assignment[automatic_peer_reviews]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled."
          },
          {
            "name": "assignment[notify_of_update]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed."
          },
          {
            "name": "assignment[group_category_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If present, the assignment will become a group assignment assigned\nto the group."
          },
          {
            "name": "assignment[grade_group_students_individually]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group."
          },
          {
            "name": "assignment[external_tool_tag_attributes]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format."
          },
          {
            "name": "assignment[points_possible]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum points possible on the assignment."
          },
          {
            "name": "assignment[grading_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "pass_fail",
              "percent",
              "letter_grade",
              "gpa_scale",
              "points"
            ],
            "type": "string",
            "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted."
          },
          {
            "name": "assignment[due_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the assignment is due.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
          },
          {
            "name": "assignment[lock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
          },
          {
            "name": "assignment[unlock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
          },
          {
            "name": "assignment[description]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The assignment's description, supports HTML."
          },
          {
            "name": "assignment[assignment_group_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course."
          },
          {
            "name": "assignment[muted]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this assignment is muted.\nA muted assignment does not send change notifications\nand hides grades from students.\nDefaults to false."
          },
          {
            "name": "assignment[assignment_overrides]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of overrides for the assignment."
          },
          {
            "name": "assignment[only_visible_to_overrides]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)"
          },
          {
            "name": "assignment[published]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students."
          },
          {
            "name": "assignment[grading_standard_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'."
          },
          {
            "name": "assignment[omit_from_final_grade]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this assignment is counted towards a student's final grade."
          },
          {
            "name": "assignment[moderated_grading]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this assignment is moderated."
          },
          {
            "name": "assignment[allowed_attempts]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The number of submission attempts allowed for this assignment. Set to -1 or null for\nunlimited attempts."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments": {
      "get": {
        "description": "List assignments",
        "summary": "list_assignments_assignments",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission",
              "assignment_visibility",
              "all_dates",
              "overrides",
              "observed_users"
            ],
            "type": "string",
            "description": "Associations to include with the assignment. The \"assignment_visibility\" option\nrequires that the Differentiated Assignments course feature be turned on. If\n\"observed_users\" is passed, submissions for observed users will also be included as an array."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial title of the assignments to match and return."
          },
          {
            "name": "override_assignment_dates",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Apply assignment overrides for each assignment, defaults to true."
          },
          {
            "name": "needs_grading_count_by_section",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false"
          },
          {
            "name": "bucket",
            "in": "query",
            "required": false,
            "enum": [
              "past",
              "overdue",
              "undated",
              "ungraded",
              "unsubmitted",
              "upcoming",
              "future"
            ],
            "type": "string",
            "description": "If included, only return certain assignments depending on due date and submission status."
          },
          {
            "name": "assignment_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "if set, return only assignments specified"
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "enum": [
              "position",
              "name"
            ],
            "type": "string",
            "description": "Determines the order of the assignments. Defaults to \"position\"."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create an assignment",
        "summary": "create_assignment",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment[name]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The assignment name."
          },
          {
            "name": "assignment[position]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The position of this assignment in the group when displaying\nassignment lists."
          },
          {
            "name": "assignment[submission_types]",
            "in": "formData",
            "required": false,
            "enum": [
              "online_quiz",
              "none",
              "on_paper",
              "discussion_topic",
              "external_tool",
              "online_upload",
              "online_text_entry",
              "online_url",
              "media_recording"
            ],
            "type": "string",
            "description": "List of supported submission types for the assignment.\nUnless the assignment is allowing online submissions, the array should\nonly have one element.\n\nIf not allowing online submissions, your options are:\n  \"online_quiz\"\n  \"none\"\n  \"on_paper\"\n  \"discussion_topic\"\n  \"external_tool\"\n\nIf you are allowing online submissions, you can have one or many\nallowed submission types:\n\n  \"online_upload\"\n  \"online_text_entry\"\n  \"online_url\"\n  \"media_recording\" (Only valid when the Kaltura plugin is enabled)"
          },
          {
            "name": "assignment[allowed_extensions]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n  allowed_extensions: [\"docx\",\"ppt\"]"
          },
          {
            "name": "assignment[turnitin_enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course."
          },
          {
            "name": "assignment[vericite_enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course."
          },
          {
            "name": "assignment[turnitin_settings]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Settings to send along to turnitin. See Assignment object definition for\nformat."
          },
          {
            "name": "assignment[integration_data]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required."
          },
          {
            "name": "assignment[integration_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Unique ID from third party integrations"
          },
          {
            "name": "assignment[peer_reviews]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment."
          },
          {
            "name": "assignment[automatic_peer_reviews]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled."
          },
          {
            "name": "assignment[notify_of_update]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed."
          },
          {
            "name": "assignment[group_category_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If present, the assignment will become a group assignment assigned\nto the group."
          },
          {
            "name": "assignment[grade_group_students_individually]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group."
          },
          {
            "name": "assignment[external_tool_tag_attributes]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format."
          },
          {
            "name": "assignment[points_possible]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum points possible on the assignment."
          },
          {
            "name": "assignment[grading_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "pass_fail",
              "percent",
              "letter_grade",
              "gpa_scale",
              "points"
            ],
            "type": "string",
            "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted."
          },
          {
            "name": "assignment[due_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the assignment is due. Must be between the lock dates if there are lock dates.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
          },
          {
            "name": "assignment[lock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
          },
          {
            "name": "assignment[unlock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z."
          },
          {
            "name": "assignment[description]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The assignment's description, supports HTML."
          },
          {
            "name": "assignment[assignment_group_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course."
          },
          {
            "name": "assignment[muted]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this assignment is muted.\nA muted assignment does not send change notifications\nand hides grades from students.\nDefaults to false."
          },
          {
            "name": "assignment[assignment_overrides]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of overrides for the assignment."
          },
          {
            "name": "assignment[only_visible_to_overrides]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)"
          },
          {
            "name": "assignment[published]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students."
          },
          {
            "name": "assignment[grading_standard_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'."
          },
          {
            "name": "assignment[omit_from_final_grade]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this assignment is counted towards a student's final grade."
          },
          {
            "name": "assignment[quiz_lti]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this assignment should use the Quizzes 2 LTI tool. Sets the\nsubmission type to 'external_tool' and configures the external tool\nattributes to use the Quizzes 2 LTI tool configured for this course.\nHas no effect if no Quizzes 2 LTI tool is configured."
          },
          {
            "name": "assignment[moderated_grading]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this assignment is moderated."
          },
          {
            "name": "assignment[allowed_attempts]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The number of submission attempts allowed for this assignment. Set to -1 for unlimited attempts."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}/assignments": {
      "get": {
        "description": "List assignments",
        "summary": "list_assignments_assignment_groups",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentGroupsAssignmentsByCourseIdAndAssignmentGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission",
              "assignment_visibility",
              "all_dates",
              "overrides",
              "observed_users"
            ],
            "type": "string",
            "description": "Associations to include with the assignment. The \"assignment_visibility\" option\nrequires that the Differentiated Assignments course feature be turned on. If\n\"observed_users\" is passed, submissions for observed users will also be included as an array."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial title of the assignments to match and return."
          },
          {
            "name": "override_assignment_dates",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Apply assignment overrides for each assignment, defaults to true."
          },
          {
            "name": "needs_grading_count_by_section",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false"
          },
          {
            "name": "bucket",
            "in": "query",
            "required": false,
            "enum": [
              "past",
              "overdue",
              "undated",
              "ungraded",
              "unsubmitted",
              "upcoming",
              "future"
            ],
            "type": "string",
            "description": "If included, only return certain assignments depending on due date and submission status."
          },
          {
            "name": "assignment_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "if set, return only assignments specified"
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "enum": [
              "position",
              "name"
            ],
            "type": "string",
            "description": "Determines the order of the assignments. Defaults to \"position\"."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/courses/{course_id}/assignments": {
      "get": {
        "description": "List assignments for user",
        "summary": "list_assignments_for_user",
        "tags": [
          "assignments"
        ],
        "operationId": "V1UsersCoursesAssignmentsByUserIdAndCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/overrides": {
      "get": {
        "description": "List assignment overrides",
        "summary": "list_assignment_overrides",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsOverridesByCourseIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create an assignment override",
        "summary": "create_assignment_override",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsOverridesByCourseIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_override[student_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The IDs of\nthe override's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override."
          },
          {
            "name": "assignment_override[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title of the adhoc\nassignment override. Required if student_ids is present, ignored\notherwise (the title is set to the name of the targetted group or section\ninstead)."
          },
          {
            "name": "assignment_override[group_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the\noverride's target group. If present, the following conditions must be met\nfor the override to be successful:\n\n1. the assignment MUST be a group assignment (a group_category_id is assigned to it)\n2. the ID must identify an active group in the group set the assignment is in\n3. the ID must not be targetted by a different override\n\nSee {Appendix: Group assignments} for more info."
          },
          {
            "name": "assignment_override[course_section_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID\nof the override's target section. If present, must identify an active\nsection of the assignment's course not already targetted by a different\noverride."
          },
          {
            "name": "assignment_override[due_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate."
          },
          {
            "name": "assignment_override[unlock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date."
          },
          {
            "name": "assignment_override[lock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}": {
      "get": {
        "description": "Get a single assignment override",
        "summary": "get_single_assignment_override",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsOverridesIdByCourseIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update an assignment override",
        "summary": "update_assignment_override",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsOverridesIdByCourseIdAndAssignmentIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_override[student_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The IDs of the\noverride's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override. Ignored unless the override\nbeing updated is adhoc."
          },
          {
            "name": "assignment_override[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title of an adhoc\nassignment override. Ignored unless the override being updated is adhoc."
          },
          {
            "name": "assignment_override[due_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate."
          },
          {
            "name": "assignment_override[unlock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date."
          },
          {
            "name": "assignment_override[lock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete an assignment override",
        "summary": "delete_assignment_override",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsOverridesIdByCourseIdAndAssignmentIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/assignments/{assignment_id}/override": {
      "get": {
        "description": "Redirect to the assignment override for a group",
        "summary": "redirect_to_assignment_override_for_group",
        "tags": [
          "assignments"
        ],
        "operationId": "V1GroupsAssignmentsOverrideByGroupIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{course_section_id}/assignments/{assignment_id}/override": {
      "get": {
        "description": "Redirect to the assignment override for a section",
        "summary": "redirect_to_assignment_override_for_section",
        "tags": [
          "assignments"
        ],
        "operationId": "V1SectionsAssignmentsOverrideByCourseSectionIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/overrides": {
      "get": {
        "description": "Batch retrieve overrides in a course",
        "summary": "batch_retrieve_overrides_in_course",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsOverridesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_overrides[id]",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of overrides to retrieve"
          },
          {
            "name": "assignment_overrides[assignment_id]",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of assignments for each override"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Batch create overrides in a course",
        "summary": "batch_create_overrides_in_course",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsOverridesByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_overrides",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Attributes for the new assignment overrides.\nSee {api:AssignmentOverridesController#create Create an assignment override} for available\nattributes"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Batch update overrides in a course",
        "summary": "batch_update_overrides_in_course",
        "tags": [
          "assignments"
        ],
        "operationId": "V1CoursesAssignmentsOverridesByCourseIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_overrides",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Attributes for the updated overrides."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/authentication_providers": {
      "get": {
        "description": "List authentication providers",
        "summary": "list_authentication_providers",
        "tags": [
          "authentication_providers"
        ],
        "operationId": "V1AccountsAuthenticationProvidersByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Add authentication provider",
        "summary": "add_authentication_provider",
        "tags": [
          "authentication_providers"
        ],
        "operationId": "V1AccountsAuthenticationProvidersByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/authentication_providers/{id}": {
      "put": {
        "description": "Update authentication provider",
        "summary": "update_authentication_provider",
        "tags": [
          "authentication_providers"
        ],
        "operationId": "V1AccountsAuthenticationProvidersByAccountIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Get authentication provider",
        "summary": "get_authentication_provider",
        "tags": [
          "authentication_providers"
        ],
        "operationId": "V1AccountsAuthenticationProvidersByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete authentication provider",
        "summary": "delete_authentication_provider",
        "tags": [
          "authentication_providers"
        ],
        "operationId": "V1AccountsAuthenticationProvidersByAccountIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/sso_settings": {
      "get": {
        "description": "show account auth settings",
        "summary": "show_account_auth_settings",
        "tags": [
          "authentication_providers"
        ],
        "operationId": "V1AccountsSsoSettingsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "update account auth settings",
        "summary": "update_account_auth_settings",
        "tags": [
          "authentication_providers"
        ],
        "operationId": "V1AccountsSsoSettingsByAccountIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/audit/authentication/logins/{login_id}": {
      "get": {
        "description": "Query by login.",
        "summary": "query_by_login",
        "tags": [
          "authentications_log"
        ],
        "operationId": "V1AuditAuthenticationLoginsByLoginIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "login_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year."
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The end of the time range from which you want events."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/audit/authentication/accounts/{account_id}": {
      "get": {
        "description": "Query by account.",
        "summary": "query_by_account",
        "tags": [
          "authentications_log"
        ],
        "operationId": "V1AuditAuthenticationAccountsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year."
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The end of the time range from which you want events."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/audit/authentication/users/{user_id}": {
      "get": {
        "description": "Query by user.",
        "summary": "query_by_user",
        "tags": [
          "authentications_log"
        ],
        "operationId": "V1AuditAuthenticationUsersByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The beginning of the time range from which you want events.\nEvents are stored for one year."
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The end of the time range from which you want events."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}": {
      "get": {
        "description": "Get blueprint information",
        "summary": "get_blueprint_information",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintTemplatesByCourseIdAndTemplateIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/associated_courses": {
      "get": {
        "description": "Get associated course information",
        "summary": "get_associated_course_information",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintTemplatesAssociatedCoursesByCourseIdAndTemplateIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/update_associations": {
      "put": {
        "description": "Update associated courses",
        "summary": "update_associated_courses",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintTemplatesUpdateAssociationsByCourseIdAndTemplateIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "course_ids_to_add",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Courses to add as associated courses"
          },
          {
            "name": "course_ids_to_remove",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Courses to remove as associated courses"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations": {
      "post": {
        "description": "Begin a migration to push to associated courses",
        "summary": "begin_migration_to_push_to_associated_courses",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintTemplatesMigrationsByCourseIdAndTemplateIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "comment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "An optional comment to be included in the sync history."
          },
          {
            "name": "send_notification",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Send a notification to the calling user when the sync completes."
          },
          {
            "name": "copy_settings",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether course settings should be copied over to associated courses.\nDefaults to true for newly associated courses."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List blueprint migrations",
        "summary": "list_blueprint_migrations",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintTemplatesMigrationsByCourseIdAndTemplateIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/restrict_item": {
      "put": {
        "description": "Set or remove restrictions on a blueprint course object",
        "summary": "set_or_remove_restrictions_on_blueprint_course_object",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintTemplatesRestrictItemByCourseIdAndTemplateIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_type",
            "in": "formData",
            "required": false,
            "enum": [
              "assignment",
              "attachment",
              "discussion_topic",
              "external_tool",
              "quiz",
              "wiki_page"
            ],
            "type": "string",
            "description": "The type of the object."
          },
          {
            "name": "content_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the object."
          },
          {
            "name": "restricted",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to apply restrictions."
          },
          {
            "name": "restrictions",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "(Optional) If the object is restricted, this specifies a set of restrictions. If not specified,\nthe course-level restrictions will be used. See {api:CoursesController#update Course API update documentation}"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/unsynced_changes": {
      "get": {
        "description": "Get unsynced changes",
        "summary": "get_unsynced_changes",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintTemplatesUnsyncedChangesByCourseIdAndTemplateIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}": {
      "get": {
        "description": "Show a blueprint migration",
        "summary": "show_blueprint_migration",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintTemplatesMigrationsIdByCourseIdAndTemplateIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}/details": {
      "get": {
        "description": "Get migration details",
        "summary": "get_migration_details",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintTemplatesMigrationsIdDetailsByCourseIdAndTemplateIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_subscriptions": {
      "get": {
        "description": "List blueprint subscriptions",
        "summary": "list_blueprint_subscriptions",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintSubscriptionsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations": {
      "get": {
        "description": "List blueprint imports",
        "summary": "list_blueprint_imports",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintSubscriptionsMigrationsByCourseIdAndSubscriptionIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "subscription_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}": {
      "get": {
        "description": "Show a blueprint import",
        "summary": "show_blueprint_import",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintSubscriptionsMigrationsIdByCourseIdAndSubscriptionIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "subscription_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}/details": {
      "get": {
        "description": "Get import details",
        "summary": "get_import_details",
        "tags": [
          "blueprint_courses"
        ],
        "operationId": "V1CoursesBlueprintSubscriptionsMigrationsIdDetailsByCourseIdAndSubscriptionIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "subscription_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/bookmarks": {
      "get": {
        "description": "List bookmarks",
        "summary": "list_bookmarks",
        "tags": [
          "bookmarks"
        ],
        "operationId": "V1UsersSelfBookmarksGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create bookmark",
        "summary": "create_bookmark",
        "tags": [
          "bookmarks"
        ],
        "operationId": "V1UsersSelfBookmarksPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the bookmark"
          },
          {
            "name": "url",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the bookmark"
          },
          {
            "name": "position",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The position of the bookmark. Defaults to the bottom."
          },
          {
            "name": "data",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The data associated with the bookmark"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/bookmarks/{id}": {
      "get": {
        "description": "Get bookmark",
        "summary": "get_bookmark",
        "tags": [
          "bookmarks"
        ],
        "operationId": "V1UsersSelfBookmarksByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update bookmark",
        "summary": "update_bookmark",
        "tags": [
          "bookmarks"
        ],
        "operationId": "V1UsersSelfBookmarksByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the bookmark"
          },
          {
            "name": "url",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the bookmark"
          },
          {
            "name": "position",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The position of the bookmark. Defaults to the bottom."
          },
          {
            "name": "data",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The data associated with the bookmark"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete bookmark",
        "summary": "delete_bookmark",
        "tags": [
          "bookmarks"
        ],
        "operationId": "V1UsersSelfBookmarksByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/brand_variables": {
      "get": {
        "description": "Get the brand config variables that should be used for this domain",
        "summary": "get_brand_config_variables_that_should_be_used_for_this_domain",
        "tags": [
          "brand_configs"
        ],
        "operationId": "V1BrandVariablesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/calendar_events": {
      "get": {
        "description": "List calendar events",
        "summary": "list_calendar_events",
        "tags": [
          "calendar_events"
        ],
        "operationId": "V1CalendarEventsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Defaults to \"event\""
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only return events since the start_date (inclusive).\nDefaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ."
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only return events before the end_date (inclusive).\nDefaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date is the same as start_date, then only events on that day are\nreturned."
          },
          {
            "name": "undated",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Defaults to false (dated events only).\nIf true, only return undated events and ignore start_date and end_date."
          },
          {
            "name": "all_events",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Defaults to false (uses start_date, end_date, and undated criteria).\nIf true, all events are returned, ignoring start_date, end_date, and undated criteria."
          },
          {
            "name": "context_codes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of context codes of courses/groups/users whose events you want to see.\nIf not specified, defaults to the current user (i.e personal calendar,\nno course/group events). Limited to 10 context codes, additional ones are\nignored. The format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42"
          },
          {
            "name": "excludes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of attributes to exclude. Possible values are \"description\", \"child_events\" and \"assignment\""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a calendar event",
        "summary": "create_calendar_event",
        "tags": [
          "calendar_events"
        ],
        "operationId": "V1CalendarEventsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "calendar_event[context_code]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "Context code of the course/group/user whose calendar this event should be\nadded to."
          },
          {
            "name": "calendar_event[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Short title for the calendar event."
          },
          {
            "name": "calendar_event[description]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Longer HTML description of the event."
          },
          {
            "name": "calendar_event[start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Start date/time of the event."
          },
          {
            "name": "calendar_event[end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "End date/time of the event."
          },
          {
            "name": "calendar_event[location_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Location name of the event."
          },
          {
            "name": "calendar_event[location_address]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Location address"
          },
          {
            "name": "calendar_event[time_zone_edited]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Time zone of the user editing the event. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
          },
          {
            "name": "calendar_event[all_day]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "When true event is considered to span the whole day and times are ignored."
          },
          {
            "name": "calendar_event[child_event_data][X][start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at\nand context_code"
          },
          {
            "name": "calendar_event[child_event_data][X][end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Section-level end time(s) if this is a course event."
          },
          {
            "name": "calendar_event[child_event_data][X][context_code]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Context code(s) corresponding to the section-level start and end time(s)."
          },
          {
            "name": "calendar_event[duplicate][count]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Number of times to copy/duplicate the event.  Count cannot exceed 200."
          },
          {
            "name": "calendar_event[duplicate][interval]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Defaults to 1 if duplicate `count` is set.  The interval between the duplicated events."
          },
          {
            "name": "calendar_event[duplicate][frequency]",
            "in": "formData",
            "required": false,
            "enum": [
              "daily",
              "weekly",
              "monthly"
            ],
            "type": "string",
            "description": "Defaults to \"weekly\".  The frequency at which to duplicate the event"
          },
          {
            "name": "calendar_event[duplicate][append_iterator]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Defaults to false.  If set to `true`, an increasing counter number will be appended to the event title\nwhen the event is duplicated.  (e.g. Event 1, Event 2, Event 3, etc)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/calendar_events": {
      "get": {
        "description": "List calendar events for a user",
        "summary": "list_calendar_events_for_user",
        "tags": [
          "calendar_events"
        ],
        "operationId": "V1UsersCalendarEventsByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Defaults to \"event\""
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only return events since the start_date (inclusive).\nDefaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ."
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only return events before the end_date (inclusive).\nDefaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date is the same as start_date, then only events on that day are\nreturned."
          },
          {
            "name": "undated",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Defaults to false (dated events only).\nIf true, only return undated events and ignore start_date and end_date."
          },
          {
            "name": "all_events",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Defaults to false (uses start_date, end_date, and undated criteria).\nIf true, all events are returned, ignoring start_date, end_date, and undated criteria."
          },
          {
            "name": "context_codes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of context codes of courses/groups/users whose events you want to see.\nIf not specified, defaults to the current user (i.e personal calendar,\nno course/group events). Limited to 10 context codes, additional ones are\nignored. The format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42"
          },
          {
            "name": "excludes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of attributes to exclude. Possible values are \"description\", \"child_events\" and \"assignment\""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/calendar_events/{id}": {
      "get": {
        "description": "Get a single calendar event or assignment",
        "summary": "get_single_calendar_event_or_assignment",
        "tags": [
          "calendar_events"
        ],
        "operationId": "V1CalendarEventsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a calendar event",
        "summary": "update_calendar_event",
        "tags": [
          "calendar_events"
        ],
        "operationId": "V1CalendarEventsByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "calendar_event[context_code]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Context code of the course/group/user to move this event to.\nScheduler appointments and events with section-specific times cannot be moved between calendars."
          },
          {
            "name": "calendar_event[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Short title for the calendar event."
          },
          {
            "name": "calendar_event[description]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Longer HTML description of the event."
          },
          {
            "name": "calendar_event[start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Start date/time of the event."
          },
          {
            "name": "calendar_event[end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "End date/time of the event."
          },
          {
            "name": "calendar_event[location_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Location name of the event."
          },
          {
            "name": "calendar_event[location_address]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Location address"
          },
          {
            "name": "calendar_event[time_zone_edited]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Time zone of the user editing the event. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
          },
          {
            "name": "calendar_event[all_day]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "When true event is considered to span the whole day and times are ignored."
          },
          {
            "name": "calendar_event[child_event_data][X][start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at\nand context_code"
          },
          {
            "name": "calendar_event[child_event_data][X][end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Section-level end time(s) if this is a course event."
          },
          {
            "name": "calendar_event[child_event_data][X][context_code]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Context code(s) corresponding to the section-level start and end time(s)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a calendar event",
        "summary": "delete_calendar_event",
        "tags": [
          "calendar_events"
        ],
        "operationId": "V1CalendarEventsByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "cancel_reason",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Reason for deleting/canceling the event."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/calendar_events/{id}/reservations": {
      "post": {
        "description": "Reserve a time slot",
        "summary": "reserve_time_slot",
        "tags": [
          "calendar_events"
        ],
        "operationId": "V1CalendarEventsReservationsByIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "participant_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User or group id for whom you are making the reservation (depends on the\nparticipant type). Defaults to the current user (or user's candidate group)."
          },
          {
            "name": "comments",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Comments to associate with this reservation"
          },
          {
            "name": "cancel_existing",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Defaults to false. If true, cancel any previous reservation(s) for this\nparticipant and appointment group."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/calendar_events/{id}/reservations/{participant_id}": {
      "post": {
        "description": "Reserve a time slot",
        "summary": "reserve_time_slot_participant_id",
        "tags": [
          "calendar_events"
        ],
        "operationId": "V1CalendarEventsReservationsByIdAndParticipantIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "participant_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User or group id for whom you are making the reservation (depends on the\nparticipant type). Defaults to the current user (or user's candidate group)."
          },
          {
            "name": "comments",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Comments to associate with this reservation"
          },
          {
            "name": "cancel_existing",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Defaults to false. If true, cancel any previous reservation(s) for this\nparticipant and appointment group."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/calendar_events/timetable": {
      "post": {
        "description": "Set a course timetable",
        "summary": "set_course_timetable",
        "tags": [
          "calendar_events"
        ],
        "operationId": "V1CoursesCalendarEventsTimetableByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "timetables[course_section_id]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of timetable objects for the course section specified by course_section_id.\nIf course_section_id is set to \"all\", events will be created for the entire course."
          },
          {
            "name": "timetables[course_section_id][weekdays]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A comma-separated list of abbreviated weekdays\n(Mon-Monday, Tue-Tuesday, Wed-Wednesday, Thu-Thursday, Fri-Friday, Sat-Saturday, Sun-Sunday)"
          },
          {
            "name": "timetables[course_section_id][start_time]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Time to start each event at (e.g. \"9:00 am\")"
          },
          {
            "name": "timetables[course_section_id][end_time]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Time to end each event at (e.g. \"9:00 am\")"
          },
          {
            "name": "timetables[course_section_id][location_name]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A location name to set for each event"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Get course timetable",
        "summary": "get_course_timetable",
        "tags": [
          "calendar_events"
        ],
        "operationId": "V1CoursesCalendarEventsTimetableByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/calendar_events/timetable_events": {
      "post": {
        "description": "Create or update events directly for a course timetable",
        "summary": "create_or_update_events_directly_for_course_timetable",
        "tags": [
          "calendar_events"
        ],
        "operationId": "V1CoursesCalendarEventsTimetableEventsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "course_section_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Events will be created for the course section specified by course_section_id.\nIf not present, events will be created for the entire course."
          },
          {
            "name": "events",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of event objects to use."
          },
          {
            "name": "events[start_at]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Start time for the event"
          },
          {
            "name": "events[end_at]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "End time for the event"
          },
          {
            "name": "events[location_name]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Location name for the event"
          },
          {
            "name": "events[code]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A unique identifier that can be used to update the event at a later time\nIf one is not specified, an identifier will be generated based on the start and end times"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/collaborations": {
      "get": {
        "description": "List collaborations",
        "summary": "list_collaborations_courses",
        "tags": [
          "collaborations"
        ],
        "operationId": "V1CoursesCollaborationsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/collaborations": {
      "get": {
        "description": "List collaborations",
        "summary": "list_collaborations_groups",
        "tags": [
          "collaborations"
        ],
        "operationId": "V1GroupsCollaborationsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/collaborations/{id}/members": {
      "get": {
        "description": "List members of a collaboration.",
        "summary": "list_members_of_collaboration",
        "tags": [
          "collaborations"
        ],
        "operationId": "V1CollaborationsMembersByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "collaborator_lti_id",
              "avatar_image_url"
            ],
            "type": "string",
            "description": "- \"collaborator_lti_id\": Optional information to include with each member.\n  Represents an identifier to be used for the member in an LTI context.\n- \"avatar_image_url\": Optional information to include with each member.\n  The url for the avatar of a collaborator with type 'user'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/potential_collaborators": {
      "get": {
        "description": "List potential members",
        "summary": "list_potential_members_courses",
        "tags": [
          "collaborations"
        ],
        "operationId": "V1CoursesPotentialCollaboratorsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/potential_collaborators": {
      "get": {
        "description": "List potential members",
        "summary": "list_potential_members_groups",
        "tags": [
          "collaborations"
        ],
        "operationId": "V1GroupsPotentialCollaboratorsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/comm_messages": {
      "get": {
        "description": "List of CommMessages for a user",
        "summary": "list_of_commmessages_for_user",
        "tags": [
          "comm_messages"
        ],
        "operationId": "V1CommMessagesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The user id for whom you want to retrieve CommMessages"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The beginning of the time range you want to retrieve message from."
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The end of the time range you want to retrieve messages for."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/communication_channels": {
      "get": {
        "description": "List user communication channels",
        "summary": "list_user_communication_channels",
        "tags": [
          "communication_channels"
        ],
        "operationId": "V1UsersCommunicationChannelsByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a communication channel",
        "summary": "create_communication_channel",
        "tags": [
          "communication_channels"
        ],
        "operationId": "V1UsersCommunicationChannelsByUserIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "communication_channel[address]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "An email address or SMS number. Not required for \"push\" type channels."
          },
          {
            "name": "communication_channel[type]",
            "in": "formData",
            "required": true,
            "enum": [
              "email",
              "sms",
              "push"
            ],
            "type": "string",
            "description": "The type of communication channel.\n\nIn order to enable push notification support, the server must be\nproperly configured (via sns.yml) to communicate with Amazon\nSimple Notification Services, and the developer key used to create\nthe access token from this request must have an SNS ARN configured on\nit."
          },
          {
            "name": "communication_channel[token]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A registration id, device token, or equivalent token given to an app when\nregistering with a push notification provider. Only valid for \"push\" type channels."
          },
          {
            "name": "skip_confirmation",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Only valid for site admins and account admins making requests; If true, the channel is\nautomatically validated and no confirmation email or SMS is sent.\nOtherwise, the user must respond to a confirmation message to confirm the\nchannel."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/communication_channels/{id}": {
      "delete": {
        "description": "Delete a communication channel",
        "summary": "delete_communication_channel_id",
        "tags": [
          "communication_channels"
        ],
        "operationId": "V1UsersCommunicationChannelsByUserIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/communication_channels/{type}/{address}": {
      "delete": {
        "description": "Delete a communication channel",
        "summary": "delete_communication_channel_type",
        "tags": [
          "communication_channels"
        ],
        "operationId": "V1UsersCommunicationChannelsAddressByUserIdAndTypeDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/communication_channels/push": {
      "delete": {
        "description": "Delete a push notification endpoint",
        "summary": "delete_push_notification_endpoint",
        "tags": [
          "communication_channels"
        ],
        "operationId": "V1UsersSelfCommunicationChannelsPushDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/conferences": {
      "get": {
        "description": "List conferences",
        "summary": "list_conferences_courses",
        "tags": [
          "conferences"
        ],
        "operationId": "V1CoursesConferencesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/conferences": {
      "get": {
        "description": "List conferences",
        "summary": "list_conferences_groups",
        "tags": [
          "conferences"
        ],
        "operationId": "V1GroupsConferencesByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/content_exports": {
      "get": {
        "description": "List content exports",
        "summary": "list_content_exports_courses",
        "tags": [
          "content_exports"
        ],
        "operationId": "V1CoursesContentExportsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Export content",
        "summary": "export_content_courses",
        "tags": [
          "content_exports"
        ],
        "operationId": "V1CoursesContentExportsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "export_type",
            "in": "formData",
            "required": true,
            "enum": [
              "common_cartridge",
              "qti",
              "zip"
            ],
            "type": "string",
            "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file"
          },
          {
            "name": "skip_notifications",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Don't send the notifications about the export to the user. Default: false"
          },
          {
            "name": "select",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/content_exports": {
      "get": {
        "description": "List content exports",
        "summary": "list_content_exports_groups",
        "tags": [
          "content_exports"
        ],
        "operationId": "V1GroupsContentExportsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Export content",
        "summary": "export_content_groups",
        "tags": [
          "content_exports"
        ],
        "operationId": "V1GroupsContentExportsByGroupIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "export_type",
            "in": "formData",
            "required": true,
            "enum": [
              "common_cartridge",
              "qti",
              "zip"
            ],
            "type": "string",
            "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file"
          },
          {
            "name": "skip_notifications",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Don't send the notifications about the export to the user. Default: false"
          },
          {
            "name": "select",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/content_exports": {
      "get": {
        "description": "List content exports",
        "summary": "list_content_exports_users",
        "tags": [
          "content_exports"
        ],
        "operationId": "V1UsersContentExportsByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Export content",
        "summary": "export_content_users",
        "tags": [
          "content_exports"
        ],
        "operationId": "V1UsersContentExportsByUserIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "export_type",
            "in": "formData",
            "required": true,
            "enum": [
              "common_cartridge",
              "qti",
              "zip"
            ],
            "type": "string",
            "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file"
          },
          {
            "name": "skip_notifications",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Don't send the notifications about the export to the user. Default: false"
          },
          {
            "name": "select",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/content_exports/{id}": {
      "get": {
        "description": "Show content export",
        "summary": "show_content_export_courses",
        "tags": [
          "content_exports"
        ],
        "operationId": "V1CoursesContentExportsByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/content_exports/{id}": {
      "get": {
        "description": "Show content export",
        "summary": "show_content_export_groups",
        "tags": [
          "content_exports"
        ],
        "operationId": "V1GroupsContentExportsByGroupIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/content_exports/{id}": {
      "get": {
        "description": "Show content export",
        "summary": "show_content_export_users",
        "tags": [
          "content_exports"
        ],
        "operationId": "V1UsersContentExportsByUserIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues": {
      "get": {
        "description": "List migration issues",
        "summary": "list_migration_issues_accounts",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1AccountsContentMigrationsMigrationIssuesByAccountIdAndContentMigrationIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues": {
      "get": {
        "description": "List migration issues",
        "summary": "list_migration_issues_courses",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1CoursesContentMigrationsMigrationIssuesByCourseIdAndContentMigrationIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues": {
      "get": {
        "description": "List migration issues",
        "summary": "list_migration_issues_groups",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1GroupsContentMigrationsMigrationIssuesByGroupIdAndContentMigrationIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues": {
      "get": {
        "description": "List migration issues",
        "summary": "list_migration_issues_users",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1UsersContentMigrationsMigrationIssuesByUserIdAndContentMigrationIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
      "get": {
        "description": "Get a migration issue",
        "summary": "get_migration_issue_accounts",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1AccountsContentMigrationsMigrationIssuesIdByAccountIdAndContentMigrationIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a migration issue",
        "summary": "update_migration_issue_accounts",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1AccountsContentMigrationsMigrationIssuesIdByAccountIdAndContentMigrationIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "workflow_state",
            "in": "formData",
            "required": true,
            "enum": [
              "active",
              "resolved"
            ],
            "type": "string",
            "description": "Set the workflow_state of the issue."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
      "get": {
        "description": "Get a migration issue",
        "summary": "get_migration_issue_courses",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1CoursesContentMigrationsMigrationIssuesIdByCourseIdAndContentMigrationIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a migration issue",
        "summary": "update_migration_issue_courses",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1CoursesContentMigrationsMigrationIssuesIdByCourseIdAndContentMigrationIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "workflow_state",
            "in": "formData",
            "required": true,
            "enum": [
              "active",
              "resolved"
            ],
            "type": "string",
            "description": "Set the workflow_state of the issue."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
      "get": {
        "description": "Get a migration issue",
        "summary": "get_migration_issue_groups",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1GroupsContentMigrationsMigrationIssuesIdByGroupIdAndContentMigrationIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a migration issue",
        "summary": "update_migration_issue_groups",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1GroupsContentMigrationsMigrationIssuesIdByGroupIdAndContentMigrationIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "workflow_state",
            "in": "formData",
            "required": true,
            "enum": [
              "active",
              "resolved"
            ],
            "type": "string",
            "description": "Set the workflow_state of the issue."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
      "get": {
        "description": "Get a migration issue",
        "summary": "get_migration_issue_users",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1UsersContentMigrationsMigrationIssuesIdByUserIdAndContentMigrationIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a migration issue",
        "summary": "update_migration_issue_users",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1UsersContentMigrationsMigrationIssuesIdByUserIdAndContentMigrationIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_migration_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "workflow_state",
            "in": "formData",
            "required": true,
            "enum": [
              "active",
              "resolved"
            ],
            "type": "string",
            "description": "Set the workflow_state of the issue."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/content_migrations": {
      "get": {
        "description": "List content migrations",
        "summary": "list_content_migrations_accounts",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1AccountsContentMigrationsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a content migration",
        "summary": "create_content_migration_accounts",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1AccountsContentMigrationsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "migration_type",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter"
          },
          {
            "name": "pre_attachment[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow."
          },
          {
            "name": "pre_attachment[*]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}"
          },
          {
            "name": "settings[file_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A URL to download the file from. Must not require authentication."
          },
          {
            "name": "settings[source_course_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)"
          },
          {
            "name": "settings[folder_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The folder to unzip the .zip file into for a zip_file_import."
          },
          {
            "name": "settings[overwrite_quizzes]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to overwrite quizzes with the same identifiers between content\npackages."
          },
          {
            "name": "settings[question_bank_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The existing question bank ID to import questions into if not specified in\nthe content package."
          },
          {
            "name": "settings[question_bank_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence."
          },
          {
            "name": "date_shift_options[shift_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to shift dates in the copied course"
          },
          {
            "name": "date_shift_options[old_start_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The original start date of the source content/course"
          },
          {
            "name": "date_shift_options[old_end_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The original end date of the source content/course"
          },
          {
            "name": "date_shift_options[new_start_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new start date for the content/course"
          },
          {
            "name": "date_shift_options[new_end_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new end date for the source content/course"
          },
          {
            "name": "date_shift_options[day_substitutions][X]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)"
          },
          {
            "name": "date_shift_options[remove_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*."
          },
          {
            "name": "selective_import",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If set, perform a selective import instead of importing all content.\nThe migration will identify the contents of the package and then stop\nin the +waiting_for_select+ workflow state. At this point, use the\n{api:ContentMigrationsController#content_list List items endpoint}\nto enumerate the contents of the package, identifying the copy\nparameters for the desired content. Then call the\n{api:ContentMigrationsController#update Update endpoint} and provide these\ncopy parameters to start the import."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/content_migrations": {
      "get": {
        "description": "List content migrations",
        "summary": "list_content_migrations_courses",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1CoursesContentMigrationsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a content migration",
        "summary": "create_content_migration_courses",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1CoursesContentMigrationsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "migration_type",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter"
          },
          {
            "name": "pre_attachment[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow."
          },
          {
            "name": "pre_attachment[*]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}"
          },
          {
            "name": "settings[file_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A URL to download the file from. Must not require authentication."
          },
          {
            "name": "settings[source_course_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)"
          },
          {
            "name": "settings[folder_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The folder to unzip the .zip file into for a zip_file_import."
          },
          {
            "name": "settings[overwrite_quizzes]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to overwrite quizzes with the same identifiers between content\npackages."
          },
          {
            "name": "settings[question_bank_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The existing question bank ID to import questions into if not specified in\nthe content package."
          },
          {
            "name": "settings[question_bank_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence."
          },
          {
            "name": "date_shift_options[shift_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to shift dates in the copied course"
          },
          {
            "name": "date_shift_options[old_start_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The original start date of the source content/course"
          },
          {
            "name": "date_shift_options[old_end_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The original end date of the source content/course"
          },
          {
            "name": "date_shift_options[new_start_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new start date for the content/course"
          },
          {
            "name": "date_shift_options[new_end_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new end date for the source content/course"
          },
          {
            "name": "date_shift_options[day_substitutions][X]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)"
          },
          {
            "name": "date_shift_options[remove_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*."
          },
          {
            "name": "selective_import",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If set, perform a selective import instead of importing all content.\nThe migration will identify the contents of the package and then stop\nin the +waiting_for_select+ workflow state. At this point, use the\n{api:ContentMigrationsController#content_list List items endpoint}\nto enumerate the contents of the package, identifying the copy\nparameters for the desired content. Then call the\n{api:ContentMigrationsController#update Update endpoint} and provide these\ncopy parameters to start the import."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/content_migrations": {
      "get": {
        "description": "List content migrations",
        "summary": "list_content_migrations_groups",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1GroupsContentMigrationsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a content migration",
        "summary": "create_content_migration_groups",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1GroupsContentMigrationsByGroupIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "migration_type",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter"
          },
          {
            "name": "pre_attachment[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow."
          },
          {
            "name": "pre_attachment[*]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}"
          },
          {
            "name": "settings[file_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A URL to download the file from. Must not require authentication."
          },
          {
            "name": "settings[source_course_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)"
          },
          {
            "name": "settings[folder_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The folder to unzip the .zip file into for a zip_file_import."
          },
          {
            "name": "settings[overwrite_quizzes]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to overwrite quizzes with the same identifiers between content\npackages."
          },
          {
            "name": "settings[question_bank_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The existing question bank ID to import questions into if not specified in\nthe content package."
          },
          {
            "name": "settings[question_bank_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence."
          },
          {
            "name": "date_shift_options[shift_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to shift dates in the copied course"
          },
          {
            "name": "date_shift_options[old_start_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The original start date of the source content/course"
          },
          {
            "name": "date_shift_options[old_end_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The original end date of the source content/course"
          },
          {
            "name": "date_shift_options[new_start_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new start date for the content/course"
          },
          {
            "name": "date_shift_options[new_end_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new end date for the source content/course"
          },
          {
            "name": "date_shift_options[day_substitutions][X]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)"
          },
          {
            "name": "date_shift_options[remove_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*."
          },
          {
            "name": "selective_import",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If set, perform a selective import instead of importing all content.\nThe migration will identify the contents of the package and then stop\nin the +waiting_for_select+ workflow state. At this point, use the\n{api:ContentMigrationsController#content_list List items endpoint}\nto enumerate the contents of the package, identifying the copy\nparameters for the desired content. Then call the\n{api:ContentMigrationsController#update Update endpoint} and provide these\ncopy parameters to start the import."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/content_migrations": {
      "get": {
        "description": "List content migrations",
        "summary": "list_content_migrations_users",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1UsersContentMigrationsByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a content migration",
        "summary": "create_content_migration_users",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1UsersContentMigrationsByUserIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "migration_type",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter"
          },
          {
            "name": "pre_attachment[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow."
          },
          {
            "name": "pre_attachment[*]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}"
          },
          {
            "name": "settings[file_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A URL to download the file from. Must not require authentication."
          },
          {
            "name": "settings[source_course_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)"
          },
          {
            "name": "settings[folder_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The folder to unzip the .zip file into for a zip_file_import."
          },
          {
            "name": "settings[overwrite_quizzes]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to overwrite quizzes with the same identifiers between content\npackages."
          },
          {
            "name": "settings[question_bank_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The existing question bank ID to import questions into if not specified in\nthe content package."
          },
          {
            "name": "settings[question_bank_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence."
          },
          {
            "name": "date_shift_options[shift_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to shift dates in the copied course"
          },
          {
            "name": "date_shift_options[old_start_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The original start date of the source content/course"
          },
          {
            "name": "date_shift_options[old_end_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The original end date of the source content/course"
          },
          {
            "name": "date_shift_options[new_start_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new start date for the content/course"
          },
          {
            "name": "date_shift_options[new_end_date]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new end date for the source content/course"
          },
          {
            "name": "date_shift_options[day_substitutions][X]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)"
          },
          {
            "name": "date_shift_options[remove_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*."
          },
          {
            "name": "selective_import",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If set, perform a selective import instead of importing all content.\nThe migration will identify the contents of the package and then stop\nin the +waiting_for_select+ workflow state. At this point, use the\n{api:ContentMigrationsController#content_list List items endpoint}\nto enumerate the contents of the package, identifying the copy\nparameters for the desired content. Then call the\n{api:ContentMigrationsController#update Update endpoint} and provide these\ncopy parameters to start the import."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/content_migrations/{id}": {
      "get": {
        "description": "Get a content migration",
        "summary": "get_content_migration_accounts",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1AccountsContentMigrationsByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a content migration",
        "summary": "update_content_migration_accounts",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1AccountsContentMigrationsByAccountIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/content_migrations/{id}": {
      "get": {
        "description": "Get a content migration",
        "summary": "get_content_migration_courses",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1CoursesContentMigrationsByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a content migration",
        "summary": "update_content_migration_courses",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1CoursesContentMigrationsByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/content_migrations/{id}": {
      "get": {
        "description": "Get a content migration",
        "summary": "get_content_migration_groups",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1GroupsContentMigrationsByGroupIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a content migration",
        "summary": "update_content_migration_groups",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1GroupsContentMigrationsByGroupIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/content_migrations/{id}": {
      "get": {
        "description": "Get a content migration",
        "summary": "get_content_migration_users",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1UsersContentMigrationsByUserIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a content migration",
        "summary": "update_content_migration_users",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1UsersContentMigrationsByUserIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/content_migrations/migrators": {
      "get": {
        "description": "List Migration Systems",
        "summary": "list_migration_systems_accounts",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1AccountsContentMigrationsMigratorsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/content_migrations/migrators": {
      "get": {
        "description": "List Migration Systems",
        "summary": "list_migration_systems_courses",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1CoursesContentMigrationsMigratorsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/content_migrations/migrators": {
      "get": {
        "description": "List Migration Systems",
        "summary": "list_migration_systems_groups",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1GroupsContentMigrationsMigratorsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/content_migrations/migrators": {
      "get": {
        "description": "List Migration Systems",
        "summary": "list_migration_systems_users",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1UsersContentMigrationsMigratorsByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/content_migrations/{id}/selective_data": {
      "get": {
        "description": "List items for selective import",
        "summary": "list_items_for_selective_import_accounts",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1AccountsContentMigrationsSelectiveDataByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "enum": [
              "context_modules",
              "assignments",
              "quizzes",
              "assessment_question_banks",
              "discussion_topics",
              "wiki_pages",
              "context_external_tools",
              "tool_profiles",
              "announcements",
              "calendar_events",
              "rubrics",
              "groups",
              "learning_outcomes",
              "attachments"
            ],
            "type": "string",
            "description": "The type of content to enumerate."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/content_migrations/{id}/selective_data": {
      "get": {
        "description": "List items for selective import",
        "summary": "list_items_for_selective_import_courses",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1CoursesContentMigrationsSelectiveDataByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "enum": [
              "context_modules",
              "assignments",
              "quizzes",
              "assessment_question_banks",
              "discussion_topics",
              "wiki_pages",
              "context_external_tools",
              "tool_profiles",
              "announcements",
              "calendar_events",
              "rubrics",
              "groups",
              "learning_outcomes",
              "attachments"
            ],
            "type": "string",
            "description": "The type of content to enumerate."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/content_migrations/{id}/selective_data": {
      "get": {
        "description": "List items for selective import",
        "summary": "list_items_for_selective_import_groups",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1GroupsContentMigrationsSelectiveDataByGroupIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "enum": [
              "context_modules",
              "assignments",
              "quizzes",
              "assessment_question_banks",
              "discussion_topics",
              "wiki_pages",
              "context_external_tools",
              "tool_profiles",
              "announcements",
              "calendar_events",
              "rubrics",
              "groups",
              "learning_outcomes",
              "attachments"
            ],
            "type": "string",
            "description": "The type of content to enumerate."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/content_migrations/{id}/selective_data": {
      "get": {
        "description": "List items for selective import",
        "summary": "list_items_for_selective_import_users",
        "tags": [
          "content_migrations"
        ],
        "operationId": "V1UsersContentMigrationsSelectiveDataByUserIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "enum": [
              "context_modules",
              "assignments",
              "quizzes",
              "assessment_question_banks",
              "discussion_topics",
              "wiki_pages",
              "context_external_tools",
              "tool_profiles",
              "announcements",
              "calendar_events",
              "rubrics",
              "groups",
              "learning_outcomes",
              "attachments"
            ],
            "type": "string",
            "description": "The type of content to enumerate."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/csp_settings": {
      "get": {
        "description": "Get current settings for account or course",
        "summary": "get_current_settings_for_account_or_course_courses",
        "tags": [
          "content_security_policy_settings"
        ],
        "operationId": "V1CoursesCspSettingsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Enable, disable, or clear explicit CSP setting",
        "summary": "enable_disable_or_clear_explicit_csp_setting_courses",
        "tags": [
          "content_security_policy_settings"
        ],
        "operationId": "V1CoursesCspSettingsByCourseIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "status",
            "in": "formData",
            "required": true,
            "enum": [
              "enabled",
              "disabled",
              "inherited"
            ],
            "type": "string",
            "description": "If set to \"enabled\" for an account, CSP will be enabled for all its courses and sub-accounts (that\nhave not explicitly enabled or disabled it), using the domain whitelist set on this account.\nIf set to \"disabled\", CSP will be disabled for this account or course and for all sub-accounts\nthat have not explicitly re-enabled it.\nIf set to \"inherited\", this account or course will reset to the default state where CSP settings\nare inherited from the first parent account to have them explicitly set."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/csp_settings": {
      "get": {
        "description": "Get current settings for account or course",
        "summary": "get_current_settings_for_account_or_course_accounts",
        "tags": [
          "content_security_policy_settings"
        ],
        "operationId": "V1AccountsCspSettingsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Enable, disable, or clear explicit CSP setting",
        "summary": "enable_disable_or_clear_explicit_csp_setting_accounts",
        "tags": [
          "content_security_policy_settings"
        ],
        "operationId": "V1AccountsCspSettingsByAccountIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "status",
            "in": "formData",
            "required": true,
            "enum": [
              "enabled",
              "disabled",
              "inherited"
            ],
            "type": "string",
            "description": "If set to \"enabled\" for an account, CSP will be enabled for all its courses and sub-accounts (that\nhave not explicitly enabled or disabled it), using the domain whitelist set on this account.\nIf set to \"disabled\", CSP will be disabled for this account or course and for all sub-accounts\nthat have not explicitly re-enabled it.\nIf set to \"inherited\", this account or course will reset to the default state where CSP settings\nare inherited from the first parent account to have them explicitly set."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/csp_settings/lock": {
      "put": {
        "description": "Lock or unlock current CSP settings for sub-accounts and courses",
        "summary": "lock_or_unlock_current_csp_settings_for_sub_accounts_and_courses",
        "tags": [
          "content_security_policy_settings"
        ],
        "operationId": "V1AccountsCspSettingsLockByAccountIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "settings_locked",
            "in": "formData",
            "required": true,
            "type": "boolean",
            "description": "Whether sub-accounts and courses will be prevented from overriding settings inherited from this account."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/csp_settings/domains": {
      "post": {
        "description": "Add a domain to account whitelist",
        "summary": "add_domain_to_account_whitelist",
        "tags": [
          "content_security_policy_settings"
        ],
        "operationId": "V1AccountsCspSettingsDomainsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "domain",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove a domain from account whitelist",
        "summary": "remove_domain_from_account_whitelist",
        "tags": [
          "content_security_policy_settings"
        ],
        "operationId": "V1AccountsCspSettingsDomainsByAccountIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/csp_settings/domains/batch_create": {
      "post": {
        "description": "Add multiple domains to account whitelist",
        "summary": "add_multiple_domains_to_account_whitelist",
        "tags": [
          "content_security_policy_settings"
        ],
        "operationId": "V1AccountsCspSettingsDomainsBatchCreateByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "domains",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/conversations": {
      "get": {
        "description": "List conversations",
        "summary": "list_conversations",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "enum": [
              "unread",
              "starred",
              "archived"
            ],
            "type": "string",
            "description": "When set, only return conversations of the specified type. For example,\nset to \"unread\" to return only conversations that haven't been read.\nThe default behavior is to return all non-archived conversations (i.e.\nread and unread)."
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "When set, only return conversations for the specified courses, groups\nor users. The id should be prefixed with its type, e.g. \"user_123\" or\n\"course_456\". Can be an array (by setting \"filter[]\") or single value\n(by setting \"filter\")"
          },
          {
            "name": "filter_mode",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When filter[] contains multiple filters, combine them with this mode,\nfiltering conversations that at have at least all of the contexts (\"and\")\nor at least one of the contexts (\"or\")"
          },
          {
            "name": "interleave_submissions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "(Obsolete) Submissions are no\nlonger linked to conversations. This parameter is ignored."
          },
          {
            "name": "include_all_conversation_ids",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Default is false. If true,\nthe top-level element of the response will be an object rather than\nan array, and will have the keys \"conversations\" which will contain the\npaged conversation data, and \"conversation_ids\" which will contain the\nids of all conversations under this scope/filter in the same order."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "participant_avatars"
            ],
            "type": "string",
            "description": "\"participant_avatars\":: Optionally include an \"avatar_url\" key for each user participanting in the conversation"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a conversation",
        "summary": "create_conversation",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "recipients",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of recipient ids. These may be user ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g.\nrecipients[]=1&recipients[]=2&recipients[]=course_3. If the course/group\nhas over 100 enrollments, 'bulk_message' and 'group_conversation' must be\nset to true."
          },
          {
            "name": "body",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The message to be sent"
          },
          {
            "name": "subject",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The subject of the conversation. This is ignored when reusing a\nconversation. Maximum length is 255 characters."
          },
          {
            "name": "force_new",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Forces a new message to be created, even if there is an existing private conversation."
          },
          {
            "name": "group_conversation",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Defaults to false. If true, this will be a group conversation (i.e. all\nrecipients may see all messages and replies). If false, individual private\nconversations will be started with each recipient. Must be set false if the\nnumber of recipients is over the set maximum (default is 100)."
          },
          {
            "name": "attachment_ids",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder."
          },
          {
            "name": "media_comment_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Media comment id of an audio of video file to be associated with this\nmessage."
          },
          {
            "name": "media_comment_type",
            "in": "formData",
            "required": false,
            "enum": [
              "audio",
              "video"
            ],
            "type": "string",
            "description": "Type of the associated media file"
          },
          {
            "name": "user_note",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Will add a faculty journal entry for each recipient as long as the user\nmaking the api call has permission, the recipient is a student and\nfaculty journals are enabled in the account."
          },
          {
            "name": "mode",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Determines whether the messages will be created/sent synchronously or\nasynchronously. Defaults to sync, and this option is ignored if this is a\ngroup conversation or there is just one recipient (i.e. it must be a bulk\nprivate message). When sent async, the response will be an empty array\n(batch status can be queried via the {api:ConversationsController#batches batches API})"
          },
          {
            "name": "scope",
            "in": "formData",
            "required": false,
            "enum": [
              "unread",
              "starred",
              "archived"
            ],
            "type": "string",
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}"
          },
          {
            "name": "filter",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}"
          },
          {
            "name": "filter_mode",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}"
          },
          {
            "name": "context_code",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The course or group that is the context for this conversation. Same format\nas courses or groups in the recipients argument."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Batch update conversations",
        "summary": "batch_update_conversations",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "conversation_ids",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of conversations to update. Limited to 500 conversations."
          },
          {
            "name": "event",
            "in": "formData",
            "required": true,
            "enum": [
              "mark_as_read",
              "mark_as_unread",
              "star",
              "unstar",
              "archive",
              "destroy"
            ],
            "type": "string",
            "description": "The action to take on each conversation."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/conversations/batches": {
      "get": {
        "description": "Get running batches",
        "summary": "get_running_batches",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsBatchesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/conversations/{id}": {
      "get": {
        "description": "Get a single conversation",
        "summary": "get_single_conversation",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "interleave_submissions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "(Obsolete) Submissions are no\nlonger linked to conversations. This parameter is ignored."
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "enum": [
              "unread",
              "starred",
              "archived"
            ],
            "type": "string",
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}"
          },
          {
            "name": "filter_mode",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}"
          },
          {
            "name": "auto_mark_as_read",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Default true. If true, unread\nconversations will be automatically marked as read. This will default\nto false in a future API release, so clients should explicitly send\ntrue if that is the desired behavior."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Edit a conversation",
        "summary": "edit_conversation",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "conversation[workflow_state]",
            "in": "formData",
            "required": false,
            "enum": [
              "read",
              "unread",
              "archived"
            ],
            "type": "string",
            "description": "Change the state of this conversation"
          },
          {
            "name": "conversation[subscribed]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Toggle the current user's subscription to the conversation (only valid for\ngroup conversations). If unsubscribed, the user will still have access to\nthe latest messages, but the conversation won't be automatically flagged\nas unread, nor will it jump to the top of the inbox."
          },
          {
            "name": "conversation[starred]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Toggle the starred state of the current user's view of the conversation."
          },
          {
            "name": "scope",
            "in": "formData",
            "required": false,
            "enum": [
              "unread",
              "starred",
              "archived"
            ],
            "type": "string",
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}"
          },
          {
            "name": "filter",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}"
          },
          {
            "name": "filter_mode",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a conversation",
        "summary": "delete_conversation",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/conversations/mark_all_as_read": {
      "post": {
        "description": "Mark all as read",
        "summary": "mark_all_as_read",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsMarkAllAsReadPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/conversations/{id}/add_recipients": {
      "post": {
        "description": "Add recipients",
        "summary": "add_recipients",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsAddRecipientsByIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "recipients",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of recipient ids. These may be user ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g.\nrecipients[]=1&recipients[]=2&recipients[]=course_3"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/conversations/{id}/add_message": {
      "post": {
        "description": "Add a message",
        "summary": "add_message",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsAddMessageByIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "body",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The message to be sent."
          },
          {
            "name": "attachment_ids",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder."
          },
          {
            "name": "media_comment_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Media comment id of an audio of video file to be associated with this\nmessage."
          },
          {
            "name": "media_comment_type",
            "in": "formData",
            "required": false,
            "enum": [
              "audio",
              "video"
            ],
            "type": "string",
            "description": "Type of the associated media file."
          },
          {
            "name": "recipients",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "no description"
          },
          {
            "name": "included_messages",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "no description"
          },
          {
            "name": "user_note",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Will add a faculty journal entry for each recipient as long as the user\nmaking the api call has permission, the recipient is a student and\nfaculty journals are enabled in the account."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/conversations/{id}/remove_messages": {
      "post": {
        "description": "Delete a message",
        "summary": "delete_message",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsRemoveMessagesByIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "remove",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of message ids to be deleted"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/conversations/find_recipients": {
      "get": {
        "description": "Find recipients",
        "summary": "find_recipients",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsFindRecipientsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/conversations/unread_count": {
      "get": {
        "description": "Unread count",
        "summary": "unread_count",
        "tags": [
          "conversations"
        ],
        "operationId": "V1ConversationsUnreadCountGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/audit/course/courses/{course_id}": {
      "get": {
        "description": "Query by course.",
        "summary": "query_by_course",
        "tags": [
          "course_audit_log"
        ],
        "operationId": "V1AuditCourseCoursesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The beginning of the time range from which you want events."
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The end of the time range from which you want events."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quiz_extensions": {
      "post": {
        "description": "Set extensions for student quiz submissions",
        "summary": "set_extensions_for_student_quiz_submissions",
        "tags": [
          "course_quiz_extensions"
        ],
        "operationId": "V1CoursesQuizExtensionsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the user we want to add quiz extensions for."
          },
          {
            "name": "extra_attempts",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Number of times the student is allowed to re-take the quiz over the\nmultiple-attempt limit. This is limited to 1000 attempts or less."
          },
          {
            "name": "extra_time",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The number of extra minutes to allow for all attempts. This will\nadd to the existing time limit on the submission. This is limited to\n10080 minutes (1 week)"
          },
          {
            "name": "manually_unlocked",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Allow the student to take the quiz even if it's locked for\neveryone else."
          },
          {
            "name": "extend_from_now",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The number of minutes to extend the quiz from the current time. This is\nmutually exclusive to extend_from_end_at. This is limited to 1440\nminutes (24 hours)"
          },
          {
            "name": "extend_from_end_at",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The number of minutes to extend the quiz beyond the quiz's current\nending time. This is mutually exclusive to extend_from_now. This is\nlimited to 1440 minutes (24 hours)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses": {
      "get": {
        "description": "List your courses",
        "summary": "list_your_courses",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "enrollment_type",
            "in": "query",
            "required": false,
            "enum": [
              "teacher",
              "student",
              "ta",
              "observer",
              "designer"
            ],
            "type": "string",
            "description": "When set, only return courses where the user is enrolled as this type. For\nexample, set to \"teacher\" to return only courses where the user is\nenrolled as a Teacher.  This argument is ignored if enrollment_role is given."
          },
          {
            "name": "enrollment_role",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Deprecated\nWhen set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a base role type of\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'."
          },
          {
            "name": "enrollment_role_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role type of\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'."
          },
          {
            "name": "enrollment_state",
            "in": "query",
            "required": false,
            "enum": [
              "active",
              "invited_or_pending",
              "completed"
            ],
            "type": "string",
            "description": "When set, only return courses where the user has an enrollment with the given state.\nThis will respect section/course/term date overrides."
          },
          {
            "name": "exclude_blueprint_courses",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set, only return courses that are not configured as blueprint courses."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "needs_grading_count",
              "syllabus_body",
              "public_description",
              "total_scores",
              "current_grading_period_scores",
              "term",
              "account",
              "course_progress",
              "sections",
              "storage_quota_used_mb",
              "total_students",
              "passback_status",
              "favorites",
              "teachers",
              "observed_users",
              "course_image",
              "concluded"
            ],
            "type": "string",
            "description": "- \"needs_grading_count\": Optional information to include with each Course.\n  When needs_grading_count is given, and the current user has grading\n  rights, the total number of submissions needing grading for all\n  assignments is returned.\n- \"syllabus_body\": Optional information to include with each Course.\n  When syllabus_body is given the user-generated html for the course\n  syllabus is returned.\n- \"public_description\": Optional information to include with each Course.\n  When public_description is given the user-generated text for the course\n  public description is returned.\n- \"total_scores\": Optional information to include with each Course.\n  When total_scores is given, any student enrollments will also\n  include the fields 'computed_current_score', 'computed_final_score',\n  'computed_current_grade', and 'computed_final_grade', as well as (if\n  the user has permission) 'unposted_current_score',\n  'unposted_final_score', 'unposted_current_grade', and\n  'unposted_final_grade' (see Enrollment documentation for more\n  information on these fields). This argument is ignored if the course is\n  configured to hide final grades.\n- \"current_grading_period_scores\": Optional information to include with\n  each Course. When current_grading_period_scores is given and total_scores\n  is given, any student enrollments will also include the fields\n  'has_grading_periods',\n  'totals_for_all_grading_periods_option', 'current_grading_period_title',\n  'current_grading_period_id', current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade', and\n  'current_period_computed_final_grade', as well as (if the user has permission)\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade' (see Enrollment documentation for\n  more information on these fields). In addition, when this argument is\n  passed, the course will have a 'has_grading_periods' attribute\n  on it. This argument is ignored if the total_scores argument is not\n  included. If the course is configured to hide final grades, the\n  following fields are not returned:\n  'totals_for_all_grading_periods_option',\n  'current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade',\n  'current_period_computed_final_grade',\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade'\n- \"term\": Optional information to include with each Course. When\n  term is given, the information for the enrollment term for each course\n  is returned.\n- \"account\": Optional information to include with each Course. When\n  account is given, the account json for each course is returned.\n- \"course_progress\": Optional information to include with each Course.\n  When course_progress is given, each course will include a\n  'course_progress' object with the fields: 'requirement_count', an integer\n  specifying the total number of requirements in the course,\n  'requirement_completed_count', an integer specifying the total number of\n  requirements in this course that have been completed, and\n  'next_requirement_url', a string url to the next requirement item, and\n  'completed_at', the date the course was completed (null if incomplete).\n  'next_requirement_url' will be null if all requirements have been\n  completed or the current module does not require sequential progress.\n  \"course_progress\" will return an error message if the course is not\n  module based or the user is not enrolled as a student in the course.\n- \"sections\": Section enrollment information to include with each Course.\n  Returns an array of hashes containing the section ID (id), section name\n  (name), start and end dates (start_at, end_at), as well as the enrollment\n  type (enrollment_role, e.g. 'StudentEnrollment').\n- \"storage_quota_used_mb\": The amount of storage space used by the files in this course\n- \"total_students\": Optional information to include with each Course.\n  Returns an integer for the total amount of active and invited students.\n- \"passback_status\": Include the grade passback_status\n- \"favorites\": Optional information to include with each Course.\n  Indicates if the user has marked the course as a favorite course.\n- \"teachers\": Teacher information to include with each Course.\n  Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information\n  for each teacher in the course.\n- \"observed_users\": Optional information to include with each Course.\n  Will include data for observed users if the current user has an\n  observer enrollment.\n- \"tabs\": Optional information to include with each Course.\n  Will include the list of tabs configured for each course.  See the\n  {api:TabsController#index List available tabs API} for more information.\n- \"course_image\": Optional course image data for when there is a course image\n  and the course image feature flag has been enabled\n- \"concluded\": Optional information to include with each Course. Indicates whether\n  the course has been concluded, taking course and term dates into account."
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "enum": [
              "unpublished",
              "available",
              "completed",
              "deleted"
            ],
            "type": "string",
            "description": "If set, only return courses that are in the given state(s).\nBy default, \"available\" is returned for students and observers, and\nanything except \"deleted\", for all other enrollment types"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/courses": {
      "get": {
        "description": "List courses for a user",
        "summary": "list_courses_for_user",
        "tags": [
          "courses"
        ],
        "operationId": "V1UsersCoursesByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "needs_grading_count",
              "syllabus_body",
              "public_description",
              "total_scores",
              "current_grading_period_scores",
              "term",
              "account",
              "course_progress",
              "sections",
              "storage_quota_used_mb",
              "total_students",
              "passback_status",
              "favorites",
              "teachers",
              "observed_users",
              "course_image",
              "concluded"
            ],
            "type": "string",
            "description": "- \"needs_grading_count\": Optional information to include with each Course.\n  When needs_grading_count is given, and the current user has grading\n  rights, the total number of submissions needing grading for all\n  assignments is returned.\n- \"syllabus_body\": Optional information to include with each Course.\n  When syllabus_body is given the user-generated html for the course\n  syllabus is returned.\n- \"public_description\": Optional information to include with each Course.\n  When public_description is given the user-generated text for the course\n  public description is returned.\n- \"total_scores\": Optional information to include with each Course.\n  When total_scores is given, any student enrollments will also\n  include the fields 'computed_current_score', 'computed_final_score',\n  'computed_current_grade', and 'computed_final_grade' (see Enrollment\n  documentation for more information on these fields). This argument\n  is ignored if the course is configured to hide final grades.\n- \"current_grading_period_scores\": Optional information to include with\n  each Course. When current_grading_period_scores is given and total_scores\n  is given, any student enrollments will also include the fields\n  'has_grading_periods',\n  'totals_for_all_grading_periods_option', 'current_grading_period_title',\n  'current_grading_period_id', current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade', and\n  'current_period_computed_final_grade', as well as (if the user has permission)\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade' (see Enrollment documentation for\n  more information on these fields). In addition, when this argument is\n  passed, the course will have a 'has_grading_periods' attribute\n  on it. This argument is ignored if the course is configured to hide final\n  grades or if the total_scores argument is not included.\n- \"term\": Optional information to include with each Course. When\n  term is given, the information for the enrollment term for each course\n  is returned.\n- \"account\": Optional information to include with each Course. When\n  account is given, the account json for each course is returned.\n- \"course_progress\": Optional information to include with each Course.\n  When course_progress is given, each course will include a\n  'course_progress' object with the fields: 'requirement_count', an integer\n  specifying the total number of requirements in the course,\n  'requirement_completed_count', an integer specifying the total number of\n  requirements in this course that have been completed, and\n  'next_requirement_url', a string url to the next requirement item, and\n  'completed_at', the date the course was completed (null if incomplete).\n  'next_requirement_url' will be null if all requirements have been\n  completed or the current module does not require sequential progress.\n  \"course_progress\" will return an error message if the course is not\n  module based or the user is not enrolled as a student in the course.\n- \"sections\": Section enrollment information to include with each Course.\n  Returns an array of hashes containing the section ID (id), section name\n  (name), start and end dates (start_at, end_at), as well as the enrollment\n  type (enrollment_role, e.g. 'StudentEnrollment').\n- \"storage_quota_used_mb\": The amount of storage space used by the files in this course\n- \"total_students\": Optional information to include with each Course.\n  Returns an integer for the total amount of active and invited students.\n- \"passback_status\": Include the grade passback_status\n- \"favorites\": Optional information to include with each Course.\n  Indicates if the user has marked the course as a favorite course.\n- \"teachers\": Teacher information to include with each Course.\n  Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information\n  for each teacher in the course.\n- \"observed_users\": Optional information to include with each Course.\n  Will include data for observed users if the current user has an\n  observer enrollment.\n- \"tabs\": Optional information to include with each Course.\n  Will include the list of tabs configured for each course.  See the\n  {api:TabsController#index List available tabs API} for more information.\n- \"course_image\": Optional course image data for when there is a course image\n  and the course image feature flag has been enabled\n- \"concluded\": Optional information to include with each Course. Indicates whether\n  the course has been concluded, taking course and term dates into account."
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "enum": [
              "unpublished",
              "available",
              "completed",
              "deleted"
            ],
            "type": "string",
            "description": "If set, only return courses that are in the given state(s).\nBy default, \"available\" is returned for students and observers, and\nanything except \"deleted\", for all other enrollment types"
          },
          {
            "name": "enrollment_state",
            "in": "query",
            "required": false,
            "enum": [
              "active",
              "invited_or_pending",
              "completed"
            ],
            "type": "string",
            "description": "When set, only return courses where the user has an enrollment with the given state.\nThis will respect section/course/term date overrides."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/files": {
      "post": {
        "description": "Upload a file",
        "summary": "upload_file",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesFilesByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List files",
        "summary": "list_files_courses",
        "tags": [
          "files"
        ],
        "operationId": "V1CoursesFilesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.)."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name of the files to match and return."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "user"
            ],
            "type": "string",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)"
          },
          {
            "name": "only",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "name",
              "size",
              "created_at",
              "updated_at",
              "content_type",
              "user"
            ],
            "type": "string",
            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "The sorting order. Defaults to 'asc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/students": {
      "get": {
        "description": "List students",
        "summary": "list_students",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesStudentsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/users": {
      "get": {
        "description": "List users in course",
        "summary": "list_users_in_course_users",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesUsersByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name or full ID of the users to match and return in the results list."
          },
          {
            "name": "enrollment_type",
            "in": "query",
            "required": false,
            "enum": [
              "teacher",
              "student",
              "student_view",
              "ta",
              "observer",
              "designer"
            ],
            "type": "string",
            "description": "When set, only return users where the user is enrolled as this type.\n\"student_view\" implies include[]=test_student.\nThis argument is ignored if enrollment_role is given."
          },
          {
            "name": "enrollment_role",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Deprecated\nWhen set, only return users enrolled with the specified course-level role.  This can be\na role created with the {api:RoleOverridesController#add_role Add Role API} or a\nbase role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'ObserverEnrollment', or 'DesignerEnrollment'."
          },
          {
            "name": "enrollment_role_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role id with type\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "enrollments",
              "locked",
              "avatar_url",
              "test_student",
              "bio",
              "custom_links",
              "current_grading_period_scores"
            ],
            "type": "string",
            "description": "- \"enrollments\":\nOptionally include with each Course the user's current and invited\nenrollments. If the user is enrolled as a student, and the account has\npermission to manage or view all grades, each enrollment will include a\n'grades' key with 'current_score', 'final_score', 'current_grade' and\n'final_grade' values.\n- \"locked\": Optionally include whether an enrollment is locked.\n- \"avatar_url\": Optionally include avatar_url.\n- \"bio\": Optionally include each user's bio.\n- \"test_student\": Optionally include the course's Test Student,\nif present. Default is to not include Test Student.\n- \"custom_links\": Optionally include plugin-supplied custom links for each student,\nsuch as analytics information\n- \"current_grading_period_scores\": if enrollments is included as\nwell as this directive, the scores returned in the enrollment\nwill be for the current grading period if there is one. A\n'grading_period_id' value will also be included with the\nscores. if grading_period_id is nil there is no current grading\nperiod and the score is a total score."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If this parameter is given and it corresponds to a user in the course,\nthe +page+ parameter will be ignored and the page containing the specified user\nwill be returned instead."
          },
          {
            "name": "user_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "If included, the course users set will only include users with IDs\nspecified by the param. Note: this will not work in conjunction\nwith the \"user_id\" argument but multiple user_ids can be included."
          },
          {
            "name": "enrollment_state",
            "in": "query",
            "required": false,
            "enum": [
              "active",
              "invited",
              "rejected",
              "completed",
              "inactive"
            ],
            "type": "string",
            "description": "When set, only return users where the enrollment workflow state is of one of the given types.\n\"active\" and \"invited\" enrollments are returned by default."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/search_users": {
      "get": {
        "description": "List users in course",
        "summary": "list_users_in_course_search_users",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesSearchUsersByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name or full ID of the users to match and return in the results list."
          },
          {
            "name": "enrollment_type",
            "in": "query",
            "required": false,
            "enum": [
              "teacher",
              "student",
              "student_view",
              "ta",
              "observer",
              "designer"
            ],
            "type": "string",
            "description": "When set, only return users where the user is enrolled as this type.\n\"student_view\" implies include[]=test_student.\nThis argument is ignored if enrollment_role is given."
          },
          {
            "name": "enrollment_role",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Deprecated\nWhen set, only return users enrolled with the specified course-level role.  This can be\na role created with the {api:RoleOverridesController#add_role Add Role API} or a\nbase role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'ObserverEnrollment', or 'DesignerEnrollment'."
          },
          {
            "name": "enrollment_role_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role id with type\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "enrollments",
              "locked",
              "avatar_url",
              "test_student",
              "bio",
              "custom_links",
              "current_grading_period_scores"
            ],
            "type": "string",
            "description": "- \"enrollments\":\nOptionally include with each Course the user's current and invited\nenrollments. If the user is enrolled as a student, and the account has\npermission to manage or view all grades, each enrollment will include a\n'grades' key with 'current_score', 'final_score', 'current_grade' and\n'final_grade' values.\n- \"locked\": Optionally include whether an enrollment is locked.\n- \"avatar_url\": Optionally include avatar_url.\n- \"bio\": Optionally include each user's bio.\n- \"test_student\": Optionally include the course's Test Student,\nif present. Default is to not include Test Student.\n- \"custom_links\": Optionally include plugin-supplied custom links for each student,\nsuch as analytics information\n- \"current_grading_period_scores\": if enrollments is included as\nwell as this directive, the scores returned in the enrollment\nwill be for the current grading period if there is one. A\n'grading_period_id' value will also be included with the\nscores. if grading_period_id is nil there is no current grading\nperiod and the score is a total score."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If this parameter is given and it corresponds to a user in the course,\nthe +page+ parameter will be ignored and the page containing the specified user\nwill be returned instead."
          },
          {
            "name": "user_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "If included, the course users set will only include users with IDs\nspecified by the param. Note: this will not work in conjunction\nwith the \"user_id\" argument but multiple user_ids can be included."
          },
          {
            "name": "enrollment_state",
            "in": "query",
            "required": false,
            "enum": [
              "active",
              "invited",
              "rejected",
              "completed",
              "inactive"
            ],
            "type": "string",
            "description": "When set, only return users where the enrollment workflow state is of one of the given types.\n\"active\" and \"invited\" enrollments are returned by default."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/recent_students": {
      "get": {
        "description": "List recently logged in students",
        "summary": "list_recently_logged_in_students",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesRecentStudentsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/users/{id}": {
      "get": {
        "description": "Get single user",
        "summary": "get_single_user",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesUsersByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/preview_html": {
      "post": {
        "description": "Preview processed html",
        "summary": "preview_processed_html",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesPreviewHtmlByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "html",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The html content to process"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/activity_stream": {
      "get": {
        "description": "Course activity stream",
        "summary": "course_activity_stream",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesActivityStreamByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/activity_stream/summary": {
      "get": {
        "description": "Course activity stream summary",
        "summary": "course_activity_stream_summary",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesActivityStreamSummaryByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/todo": {
      "get": {
        "description": "Course TODO items",
        "summary": "course_todo_items",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesTodoByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{id}": {
      "delete": {
        "description": "Delete/Conclude a course",
        "summary": "delete_conclude_course",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "event",
            "in": "query",
            "required": true,
            "enum": [
              "delete",
              "conclude"
            ],
            "type": "string",
            "description": "The action to take on the course."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Get a single course",
        "summary": "get_single_course_courses",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "needs_grading_count",
              "syllabus_body",
              "public_description",
              "total_scores",
              "current_grading_period_scores",
              "term",
              "account",
              "course_progress",
              "sections",
              "storage_quota_used_mb",
              "total_students",
              "passback_status",
              "favorites",
              "teachers",
              "observed_users",
              "all_courses",
              "permissions",
              "course_image",
              "concluded"
            ],
            "type": "string",
            "description": "- \"all_courses\": Also search recently deleted courses.\n- \"permissions\": Include permissions the current user has\n  for the course.\n- \"observed_users\": include observed users in the enrollments\n- \"course_image\": Optional course image data for when there is a course image\n  and the course image feature flag has been enabled\n- \"concluded\": Optional information to include with each Course. Indicates whether\n  the course has been concluded, taking course and term dates into account."
          },
          {
            "name": "teacher_limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of teacher enrollments to show.\nIf the course contains more teachers than this, instead of giving the teacher\nenrollments, the count of teachers will be given under a _teacher_count_ key."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a course",
        "summary": "update_course",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "course[account_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The unique ID of the account to move the course to."
          },
          {
            "name": "course[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the course. If omitted, the course will be named \"Unnamed\nCourse.\""
          },
          {
            "name": "course[course_code]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The course code for the course."
          },
          {
            "name": "course[start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z"
          },
          {
            "name": "course[end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z"
          },
          {
            "name": "course[license]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the licensing. Should be one of the following abbreviations\n(a descriptive name is included in parenthesis for reference):\n- 'private' (Private Copyrighted)\n- 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives)\n- 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike)\n- 'cc_by_nc' (CC Attribution Non-Commercial)\n- 'cc_by_nd' (CC Attribution No Derivatives)\n- 'cc_by_sa' (CC Attribution Share Alike)\n- 'cc_by' (CC Attribution)\n- 'public_domain' (Public Domain)."
          },
          {
            "name": "course[is_public]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true if course is public to both authenticated and unauthenticated users."
          },
          {
            "name": "course[is_public_to_auth_users]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true if course is public only to authenticated users."
          },
          {
            "name": "course[public_syllabus]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true to make the course syllabus public."
          },
          {
            "name": "course[public_syllabus_to_auth]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true to make the course syllabus to public for authenticated users."
          },
          {
            "name": "course[public_description]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A publicly visible description of the course."
          },
          {
            "name": "course[allow_student_wiki_edits]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, students will be able to modify the course wiki."
          },
          {
            "name": "course[allow_wiki_comments]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, course members will be able to comment on wiki pages."
          },
          {
            "name": "course[allow_student_forum_attachments]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, students can attach files to forum posts."
          },
          {
            "name": "course[open_enrollment]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true if the course is open enrollment."
          },
          {
            "name": "course[self_enrollment]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true if the course is self enrollment."
          },
          {
            "name": "course[restrict_enrollments_to_course_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true to restrict user enrollments to the start and end dates of the\ncourse."
          },
          {
            "name": "course[term_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The unique ID of the term to create to course in."
          },
          {
            "name": "course[sis_course_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The unique SIS identifier."
          },
          {
            "name": "course[integration_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The unique Integration identifier."
          },
          {
            "name": "course[hide_final_grades]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If this option is set to true, the totals in student grades summary will\nbe hidden."
          },
          {
            "name": "course[time_zone]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
          },
          {
            "name": "course[apply_assignment_group_weights]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true to weight final grade based on assignment groups percentages."
          },
          {
            "name": "course[storage_quota_mb]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Set the storage quota for the course, in megabytes. The caller must have\nthe \"Manage storage quotas\" account permission."
          },
          {
            "name": "offer",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If this option is set to true, the course will be available to students\nimmediately."
          },
          {
            "name": "course[event]",
            "in": "formData",
            "required": false,
            "enum": [
              "claim",
              "offer",
              "conclude",
              "delete",
              "undelete"
            ],
            "type": "string",
            "description": "The action to take on each course.\n* 'claim' makes a course no longer visible to students. This action is also called \"unpublish\" on the web site.\n  A course cannot be unpublished if students have received graded submissions.\n* 'offer' makes a course visible to students. This action is also called \"publish\" on the web site.\n* 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears\n  in prior-enrollment lists.\n* 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).\n  All enrollments are deleted. Course content may be physically deleted at a future date.\n* 'undelete' attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude\n  rather than delete a course if there is any possibility the course will be used again.) The recovered course\n  will be unpublished. Deleted enrollments will not be recovered."
          },
          {
            "name": "course[default_view]",
            "in": "formData",
            "required": false,
            "enum": [
              "feed",
              "wiki",
              "modules",
              "syllabus",
              "assignments"
            ],
            "type": "string",
            "description": "The type of page that users will see when they first visit the course\n* 'feed' Recent Activity Dashboard\n* 'wiki' Wiki Front Page\n* 'modules' Course Modules/Sections Page\n* 'assignments' Course Assignments List\n* 'syllabus' Course Syllabus Page\nother types may be added in the future"
          },
          {
            "name": "course[syllabus_body]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The syllabus body for the course"
          },
          {
            "name": "course[grading_standard_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course."
          },
          {
            "name": "course[course_format]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Optional. Specifies the format of the course. (Should be either 'on_campus' or 'online')"
          },
          {
            "name": "course[image_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "This is a file ID corresponding to an image file in the course that will\nbe used as the course image.\nThis will clear the course's image_url setting if set.  If you attempt\nto provide image_url and image_id in a request it will fail."
          },
          {
            "name": "course[image_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "This is a URL to an image to be used as the course image.\nThis will clear the course's image_id setting if set.  If you attempt\nto provide image_url and image_id in a request it will fail."
          },
          {
            "name": "course[remove_image]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If this option is set to true, the course image url and course image\nID are both set to nil"
          },
          {
            "name": "course[blueprint]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Sets the course as a blueprint course."
          },
          {
            "name": "course[blueprint_restrictions]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Sets a default set to apply to blueprint course objects when restricted,\nunless _use_blueprint_restrictions_by_object_type_ is enabled.\nSee the {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction} documentation"
          },
          {
            "name": "course[use_blueprint_restrictions_by_object_type]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "When enabled, the _blueprint_restrictions_ parameter will be ignored in favor of\nthe _blueprint_restrictions_by_object_type_ parameter"
          },
          {
            "name": "course[blueprint_restrictions_by_object_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Allows setting multiple {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction}\nto apply to blueprint course objects of the matching type when restricted.\nThe possible object types are \"assignment\", \"attachment\", \"discussion_topic\", \"quiz\" and \"wiki_page\".\nExample usage:\n  course[blueprint_restrictions_by_object_type][assignment][content]=1"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/settings": {
      "get": {
        "description": "Get course settings",
        "summary": "get_course_settings",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesSettingsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update course settings",
        "summary": "update_course_settings",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesSettingsByCourseIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "allow_student_discussion_topics",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Let students create discussion topics"
          },
          {
            "name": "allow_student_forum_attachments",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Let students attach files to discussions"
          },
          {
            "name": "allow_student_discussion_editing",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Let students edit or delete their own discussion posts"
          },
          {
            "name": "allow_student_organized_groups",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Let students organize their own groups"
          },
          {
            "name": "hide_final_grades",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Hide totals in student grades summary"
          },
          {
            "name": "hide_distribution_graphs",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Hide grade distribution graphs from students"
          },
          {
            "name": "lock_all_announcements",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Disable comments on announcements"
          },
          {
            "name": "restrict_student_past_view",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Restrict students from viewing courses after end date"
          },
          {
            "name": "restrict_student_future_view",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Restrict students from viewing courses before start date"
          },
          {
            "name": "show_announcements_on_home_page",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Show the most recent announcements on the Course home page (if a Wiki, defaults to five announcements, configurable via home_page_announcement_limit)"
          },
          {
            "name": "home_page_announcement_limit",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Limit the number of announcements on the home page if enabled via show_announcements_on_home_page"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/courses/{id}": {
      "get": {
        "description": "Get a single course",
        "summary": "get_single_course_accounts",
        "tags": [
          "courses"
        ],
        "operationId": "V1AccountsCoursesByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "needs_grading_count",
              "syllabus_body",
              "public_description",
              "total_scores",
              "current_grading_period_scores",
              "term",
              "account",
              "course_progress",
              "sections",
              "storage_quota_used_mb",
              "total_students",
              "passback_status",
              "favorites",
              "teachers",
              "observed_users",
              "all_courses",
              "permissions",
              "course_image",
              "concluded"
            ],
            "type": "string",
            "description": "- \"all_courses\": Also search recently deleted courses.\n- \"permissions\": Include permissions the current user has\n  for the course.\n- \"observed_users\": include observed users in the enrollments\n- \"course_image\": Optional course image data for when there is a course image\n  and the course image feature flag has been enabled\n- \"concluded\": Optional information to include with each Course. Indicates whether\n  the course has been concluded, taking course and term dates into account."
          },
          {
            "name": "teacher_limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of teacher enrollments to show.\nIf the course contains more teachers than this, instead of giving the teacher\nenrollments, the count of teachers will be given under a _teacher_count_ key."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/reset_content": {
      "post": {
        "description": "Reset a course",
        "summary": "reset_course",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesResetContentByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/effective_due_dates": {
      "get": {
        "description": "Get effective due dates",
        "summary": "get_effective_due_dates",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesEffectiveDueDatesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/permissions": {
      "get": {
        "description": "Permissions",
        "summary": "permissions",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesPermissionsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "permissions",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/course_copy/{id}": {
      "get": {
        "description": "Get course copy status",
        "summary": "get_course_copy_status",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesCourseCopyByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/course_copy": {
      "post": {
        "description": "Copy course content",
        "summary": "copy_course_content",
        "tags": [
          "courses"
        ],
        "operationId": "V1CoursesCourseCopyByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "source_course",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "ID or SIS-ID of the course to copy the content from"
          },
          {
            "name": "except",
            "in": "formData",
            "required": false,
            "enum": [
              "course_settings",
              "assignments",
              "external_tools",
              "files",
              "topics",
              "calendar_events",
              "quizzes",
              "wiki_pages",
              "modules",
              "outcomes"
            ],
            "type": "string",
            "description": "A list of the course content types to exclude, all areas not listed will\nbe copied."
          },
          {
            "name": "only",
            "in": "formData",
            "required": false,
            "enum": [
              "course_settings",
              "assignments",
              "external_tools",
              "files",
              "topics",
              "calendar_events",
              "quizzes",
              "wiki_pages",
              "modules",
              "outcomes"
            ],
            "type": "string",
            "description": "A list of the course content types to copy, all areas not listed will not\nbe copied."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_columns": {
      "get": {
        "description": "List custom gradebook columns",
        "summary": "list_custom_gradebook_columns",
        "tags": [
          "custom_gradebook_columns"
        ],
        "operationId": "V1CoursesCustomGradebookColumnsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include_hidden",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include hidden parameters (defaults to false)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a custom gradebook column",
        "summary": "create_custom_gradebook_column",
        "tags": [
          "custom_gradebook_columns"
        ],
        "operationId": "V1CoursesCustomGradebookColumnsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "column[title]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "column[position]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The position of the column relative to other custom columns"
          },
          {
            "name": "column[hidden]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Hidden columns are not displayed in the gradebook"
          },
          {
            "name": "column[teacher_notes]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this if the column is created by a teacher.  The gradebook only\nsupports one teacher_notes column."
          },
          {
            "name": "column[read_only]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to prevent the column from being editable in the gradebook ui"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_columns/{id}": {
      "put": {
        "description": "Update a custom gradebook column",
        "summary": "update_custom_gradebook_column",
        "tags": [
          "custom_gradebook_columns"
        ],
        "operationId": "V1CoursesCustomGradebookColumnsByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a custom gradebook column",
        "summary": "delete_custom_gradebook_column",
        "tags": [
          "custom_gradebook_columns"
        ],
        "operationId": "V1CoursesCustomGradebookColumnsByCourseIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_columns/reorder": {
      "post": {
        "description": "Reorder custom columns",
        "summary": "reorder_custom_columns",
        "tags": [
          "custom_gradebook_columns"
        ],
        "operationId": "V1CoursesCustomGradebookColumnsReorderByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "order",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_columns/{id}/data": {
      "get": {
        "description": "List entries for a column",
        "summary": "list_entries_for_column",
        "tags": [
          "custom_gradebook_columns"
        ],
        "operationId": "V1CoursesCustomGradebookColumnsDataByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include_hidden",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, hidden columns will be included in the\nresult. If false or absent, only visible columns\nwill be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_columns/{id}/data/{user_id}": {
      "put": {
        "description": "Update column data",
        "summary": "update_column_data",
        "tags": [
          "custom_gradebook_columns"
        ],
        "operationId": "V1CoursesCustomGradebookColumnsDataUserIdByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "column_data[content]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "Column content.  Setting this to blank will delete the datum object."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/custom_gradebook_column_data": {
      "put": {
        "description": "Bulk update column data",
        "summary": "bulk_update_column_data",
        "tags": [
          "custom_gradebook_columns"
        ],
        "operationId": "V1CoursesCustomGradebookColumnDataByCourseIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "column_data",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Column content. Setting this to an empty string will delete the data object."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics": {
      "get": {
        "description": "List discussion topics",
        "summary": "list_discussion_topics_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "all_dates",
              "sections",
              "sections_user_count",
              "overrides"
            ],
            "type": "string",
            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included"
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "enum": [
              "position",
              "recent_activity",
              "title"
            ],
            "type": "string",
            "description": "Determines the order of the discussion topic list. Defaults to \"position\"."
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "enum": [
              "locked",
              "unlocked",
              "pinned",
              "unpinned"
            ],
            "type": "string",
            "description": "Only return discussion topics in the given state(s). Defaults to including\nall topics. Filtering is done after pagination, so pages\nmay be smaller than requested if topics are filtered.\nCan pass multiple states as comma separated string."
          },
          {
            "name": "only_announcements",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Return announcements instead of discussion topics. Defaults to false"
          },
          {
            "name": "filter_by",
            "in": "query",
            "required": false,
            "enum": [
              "all",
              "unread"
            ],
            "type": "string",
            "description": "The state of the discussion topic to return. Currently only supports unread state."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial title of the discussion topics to match and return."
          },
          {
            "name": "exclude_context_module_locked_topics",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "For students, exclude topics that are locked by module progression.\nDefaults to false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a new discussion topic",
        "summary": "create_new_discussion_topic_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "message",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "discussion_type",
            "in": "formData",
            "required": false,
            "enum": [
              "side_comment",
              "threaded"
            ],
            "type": "string",
            "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions."
          },
          {
            "name": "published",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics."
          },
          {
            "name": "delayed_post_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If a timestamp is given, the topic will not be published until that time."
          },
          {
            "name": "allow_rating",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether or not users can rate entries in this topic."
          },
          {
            "name": "lock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked."
          },
          {
            "name": "podcast_enabled",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, the topic will have an associated podcast feed."
          },
          {
            "name": "podcast_has_student_posts",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled."
          },
          {
            "name": "require_initial_post",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false."
          },
          {
            "name": "assignment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
          },
          {
            "name": "is_announcement",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions."
          },
          {
            "name": "pinned",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, this topic will be listed in the \"Pinned Discussion\" section"
          },
          {
            "name": "position_after",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed."
          },
          {
            "name": "group_category_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If present, the topic will become a group discussion assigned\nto the group."
          },
          {
            "name": "only_graders_can_rate",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, only graders will be allowed to rate entries."
          },
          {
            "name": "sort_by_rating",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, entries will be sorted by rating."
          },
          {
            "name": "attachment",
            "in": "formData",
            "required": false,
            "type": "file",
            "format": "file",
            "description": "A multipart/form-data form-field-style attachment.\nAttachments larger than 1 kilobyte are subject to quota restrictions."
          },
          {
            "name": "specific_sections",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics": {
      "get": {
        "description": "List discussion topics",
        "summary": "list_discussion_topics_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "all_dates",
              "sections",
              "sections_user_count",
              "overrides"
            ],
            "type": "string",
            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included"
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "enum": [
              "position",
              "recent_activity",
              "title"
            ],
            "type": "string",
            "description": "Determines the order of the discussion topic list. Defaults to \"position\"."
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "enum": [
              "locked",
              "unlocked",
              "pinned",
              "unpinned"
            ],
            "type": "string",
            "description": "Only return discussion topics in the given state(s). Defaults to including\nall topics. Filtering is done after pagination, so pages\nmay be smaller than requested if topics are filtered.\nCan pass multiple states as comma separated string."
          },
          {
            "name": "only_announcements",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Return announcements instead of discussion topics. Defaults to false"
          },
          {
            "name": "filter_by",
            "in": "query",
            "required": false,
            "enum": [
              "all",
              "unread"
            ],
            "type": "string",
            "description": "The state of the discussion topic to return. Currently only supports unread state."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial title of the discussion topics to match and return."
          },
          {
            "name": "exclude_context_module_locked_topics",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "For students, exclude topics that are locked by module progression.\nDefaults to false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a new discussion topic",
        "summary": "create_new_discussion_topic_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsByGroupIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "message",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "discussion_type",
            "in": "formData",
            "required": false,
            "enum": [
              "side_comment",
              "threaded"
            ],
            "type": "string",
            "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions."
          },
          {
            "name": "published",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics."
          },
          {
            "name": "delayed_post_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If a timestamp is given, the topic will not be published until that time."
          },
          {
            "name": "allow_rating",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether or not users can rate entries in this topic."
          },
          {
            "name": "lock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked."
          },
          {
            "name": "podcast_enabled",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, the topic will have an associated podcast feed."
          },
          {
            "name": "podcast_has_student_posts",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled."
          },
          {
            "name": "require_initial_post",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false."
          },
          {
            "name": "assignment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
          },
          {
            "name": "is_announcement",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions."
          },
          {
            "name": "pinned",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, this topic will be listed in the \"Pinned Discussion\" section"
          },
          {
            "name": "position_after",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed."
          },
          {
            "name": "group_category_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If present, the topic will become a group discussion assigned\nto the group."
          },
          {
            "name": "only_graders_can_rate",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, only graders will be allowed to rate entries."
          },
          {
            "name": "sort_by_rating",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, entries will be sorted by rating."
          },
          {
            "name": "attachment",
            "in": "formData",
            "required": false,
            "type": "file",
            "format": "file",
            "description": "A multipart/form-data form-field-style attachment.\nAttachments larger than 1 kilobyte are subject to quota restrictions."
          },
          {
            "name": "specific_sections",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}": {
      "put": {
        "description": "Update a topic",
        "summary": "update_topic_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsByCourseIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "message",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "discussion_type",
            "in": "formData",
            "required": false,
            "enum": [
              "side_comment",
              "threaded"
            ],
            "type": "string",
            "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions."
          },
          {
            "name": "published",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics."
          },
          {
            "name": "delayed_post_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If a timestamp is given, the topic will not be published until that time."
          },
          {
            "name": "lock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked."
          },
          {
            "name": "podcast_enabled",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, the topic will have an associated podcast feed."
          },
          {
            "name": "podcast_has_student_posts",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled."
          },
          {
            "name": "require_initial_post",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false."
          },
          {
            "name": "assignment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
          },
          {
            "name": "is_announcement",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions."
          },
          {
            "name": "pinned",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, this topic will be listed in the \"Pinned Discussion\" section"
          },
          {
            "name": "position_after",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed."
          },
          {
            "name": "group_category_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If present, the topic will become a group discussion assigned\nto the group."
          },
          {
            "name": "allow_rating",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, users will be allowed to rate entries."
          },
          {
            "name": "only_graders_can_rate",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, only graders will be allowed to rate entries."
          },
          {
            "name": "sort_by_rating",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, entries will be sorted by rating."
          },
          {
            "name": "specific_sections",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a topic",
        "summary": "delete_topic_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsByCourseIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Get a single topic",
        "summary": "get_single_topic_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsByCourseIdAndTopicIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "all_dates",
              "sections",
              "sections_user_count",
              "overrides"
            ],
            "type": "string",
            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}": {
      "put": {
        "description": "Update a topic",
        "summary": "update_topic_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsByGroupIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "message",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "discussion_type",
            "in": "formData",
            "required": false,
            "enum": [
              "side_comment",
              "threaded"
            ],
            "type": "string",
            "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions."
          },
          {
            "name": "published",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics."
          },
          {
            "name": "delayed_post_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If a timestamp is given, the topic will not be published until that time."
          },
          {
            "name": "lock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked."
          },
          {
            "name": "podcast_enabled",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, the topic will have an associated podcast feed."
          },
          {
            "name": "podcast_has_student_posts",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled."
          },
          {
            "name": "require_initial_post",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false."
          },
          {
            "name": "assignment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
          },
          {
            "name": "is_announcement",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions."
          },
          {
            "name": "pinned",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, this topic will be listed in the \"Pinned Discussion\" section"
          },
          {
            "name": "position_after",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed."
          },
          {
            "name": "group_category_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If present, the topic will become a group discussion assigned\nto the group."
          },
          {
            "name": "allow_rating",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, users will be allowed to rate entries."
          },
          {
            "name": "only_graders_can_rate",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, only graders will be allowed to rate entries."
          },
          {
            "name": "sort_by_rating",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, entries will be sorted by rating."
          },
          {
            "name": "specific_sections",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a topic",
        "summary": "delete_topic_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsByGroupIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Get a single topic",
        "summary": "get_single_topic_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsByGroupIdAndTopicIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "all_dates",
              "sections",
              "sections_user_count",
              "overrides"
            ],
            "type": "string",
            "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/reorder": {
      "post": {
        "description": "Reorder pinned topics",
        "summary": "reorder_pinned_topics_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsReorderByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "order",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ids of the pinned discussion topics in the desired order.\n(For example, \"order=104,102,103\".)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/reorder": {
      "post": {
        "description": "Reorder pinned topics",
        "summary": "reorder_pinned_topics_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsReorderByGroupIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "order",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ids of the pinned discussion topics in the desired order.\n(For example, \"order=104,102,103\".)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}": {
      "put": {
        "description": "Update an entry",
        "summary": "update_entry_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsEntriesIdByCourseIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "message",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The updated body of the entry."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete an entry",
        "summary": "delete_entry_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsEntriesIdByCourseIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}": {
      "put": {
        "description": "Update an entry",
        "summary": "update_entry_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsEntriesIdByGroupIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "message",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The updated body of the entry."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete an entry",
        "summary": "delete_entry_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsEntriesIdByGroupIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/view": {
      "get": {
        "description": "Get the full topic",
        "summary": "get_full_topic_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsViewByCourseIdAndTopicIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/view": {
      "get": {
        "description": "Get the full topic",
        "summary": "get_full_topic_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsViewByGroupIdAndTopicIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries": {
      "post": {
        "description": "Post an entry",
        "summary": "post_entry_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsEntriesByCourseIdAndTopicIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "message",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The body of the entry."
          },
          {
            "name": "attachment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List topic entries",
        "summary": "list_topic_entries_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsEntriesByCourseIdAndTopicIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries": {
      "post": {
        "description": "Post an entry",
        "summary": "post_entry_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsEntriesByGroupIdAndTopicIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "message",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The body of the entry."
          },
          {
            "name": "attachment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List topic entries",
        "summary": "list_topic_entries_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsEntriesByGroupIdAndTopicIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies": {
      "post": {
        "description": "Post a reply",
        "summary": "post_reply_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsEntriesEntryIdRepliesByCourseIdAndTopicIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "entry_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "message",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The body of the entry."
          },
          {
            "name": "attachment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List entry replies",
        "summary": "list_entry_replies_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsEntriesEntryIdRepliesByCourseIdAndTopicIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "entry_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies": {
      "post": {
        "description": "Post a reply",
        "summary": "post_reply_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsEntriesEntryIdRepliesByGroupIdAndTopicIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "entry_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "message",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The body of the entry."
          },
          {
            "name": "attachment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "a multipart/form-data form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List entry replies",
        "summary": "list_entry_replies_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsEntriesEntryIdRepliesByGroupIdAndTopicIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "entry_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entry_list": {
      "get": {
        "description": "List entries",
        "summary": "list_entries_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsEntryListByCourseIdAndTopicIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of entry ids to retrieve. Entries will be returned in id order,\nsmallest id first."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entry_list": {
      "get": {
        "description": "List entries",
        "summary": "list_entries_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsEntryListByGroupIdAndTopicIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of entry ids to retrieve. Entries will be returned in id order,\nsmallest id first."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/read": {
      "put": {
        "description": "Mark topic as read",
        "summary": "mark_topic_as_read_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsReadByCourseIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Mark topic as unread",
        "summary": "mark_topic_as_unread_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsReadByCourseIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/read": {
      "put": {
        "description": "Mark topic as read",
        "summary": "mark_topic_as_read_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsReadByGroupIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Mark topic as unread",
        "summary": "mark_topic_as_unread_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsReadByGroupIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all": {
      "put": {
        "description": "Mark all entries as read",
        "summary": "mark_all_entries_as_read_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsReadAllByCourseIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "forced_read_state",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "A boolean value to set all of the entries' forced_read_state. No change\nis made if this argument is not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Mark all entries as unread",
        "summary": "mark_all_entries_as_unread_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsReadAllByCourseIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "forced_read_state",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "A boolean value to set all of the entries' forced_read_state. No change is\nmade if this argument is not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all": {
      "put": {
        "description": "Mark all entries as read",
        "summary": "mark_all_entries_as_read_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsReadAllByGroupIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "forced_read_state",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "A boolean value to set all of the entries' forced_read_state. No change\nis made if this argument is not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Mark all entries as unread",
        "summary": "mark_all_entries_as_unread_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsReadAllByGroupIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "forced_read_state",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "A boolean value to set all of the entries' forced_read_state. No change is\nmade if this argument is not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read": {
      "put": {
        "description": "Mark entry as read",
        "summary": "mark_entry_as_read_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsEntriesEntryIdReadByCourseIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "entry_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "forced_read_state",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Mark entry as unread",
        "summary": "mark_entry_as_unread_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsEntriesEntryIdReadByCourseIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "entry_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "forced_read_state",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read": {
      "put": {
        "description": "Mark entry as read",
        "summary": "mark_entry_as_read_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsEntriesEntryIdReadByGroupIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "entry_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "forced_read_state",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Mark entry as unread",
        "summary": "mark_entry_as_unread_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsEntriesEntryIdReadByGroupIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "entry_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "forced_read_state",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating": {
      "post": {
        "description": "Rate entry",
        "summary": "rate_entry_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsEntriesEntryIdRatingByCourseIdAndTopicIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "entry_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "rating",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "A rating to set on this entry. Only 0 and 1 are accepted."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating": {
      "post": {
        "description": "Rate entry",
        "summary": "rate_entry_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsEntriesEntryIdRatingByGroupIdAndTopicIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "entry_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "rating",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "A rating to set on this entry. Only 0 and 1 are accepted."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed": {
      "put": {
        "description": "Subscribe to a topic",
        "summary": "subscribe_to_topic_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsSubscribedByCourseIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Unsubscribe from a topic",
        "summary": "unsubscribe_from_topic_courses",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1CoursesDiscussionTopicsSubscribedByCourseIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed": {
      "put": {
        "description": "Subscribe to a topic",
        "summary": "subscribe_to_topic_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsSubscribedByGroupIdAndTopicIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Unsubscribe from a topic",
        "summary": "unsubscribe_from_topic_groups",
        "tags": [
          "discussion_topics"
        ],
        "operationId": "V1GroupsDiscussionTopicsSubscribedByGroupIdAndTopicIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/terms": {
      "post": {
        "description": "Create enrollment term",
        "summary": "create_enrollment_term",
        "tags": [
          "enrollment_terms"
        ],
        "operationId": "V1AccountsTermsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "enrollment_term[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the term."
          },
          {
            "name": "enrollment_term[start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the term starts.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z."
          },
          {
            "name": "enrollment_term[end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the term ends.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z."
          },
          {
            "name": "enrollment_term[sis_term_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The unique SIS identifier for the term."
          },
          {
            "name": "enrollment_term[overrides][enrollment_type][start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the term starts, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment"
          },
          {
            "name": "enrollment_term[overrides][enrollment_type][end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the term ends, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List enrollment terms",
        "summary": "list_enrollment_terms",
        "tags": [
          "enrollment_terms"
        ],
        "operationId": "V1AccountsTermsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "workflow_state",
            "in": "query",
            "required": false,
            "enum": [
              "active",
              "deleted",
              "all"
            ],
            "type": "string",
            "description": "If set, only returns terms that are in the given state.\nDefaults to 'active'."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "overrides"
            ],
            "type": "string",
            "description": "Array of additional information to include.\n\n\"overrides\":: term start/end dates overridden for different enrollment types"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/terms/{id}": {
      "put": {
        "description": "Update enrollment term",
        "summary": "update_enrollment_term",
        "tags": [
          "enrollment_terms"
        ],
        "operationId": "V1AccountsTermsByAccountIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "enrollment_term[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the term."
          },
          {
            "name": "enrollment_term[start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the term starts.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z."
          },
          {
            "name": "enrollment_term[end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the term ends.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z."
          },
          {
            "name": "enrollment_term[sis_term_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The unique SIS identifier for the term."
          },
          {
            "name": "enrollment_term[overrides][enrollment_type][start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the term starts, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment"
          },
          {
            "name": "enrollment_term[overrides][enrollment_type][end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the term ends, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete enrollment term",
        "summary": "delete_enrollment_term",
        "tags": [
          "enrollment_terms"
        ],
        "operationId": "V1AccountsTermsByAccountIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/enrollments": {
      "get": {
        "description": "List enrollments",
        "summary": "list_enrollments_courses",
        "tags": [
          "enrollments"
        ],
        "operationId": "V1CoursesEnrollmentsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of enrollment types to return. Accepted values are\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment\ntypes are returned. This argument is ignored if `role` is given."
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of enrollment roles to return. Accepted values include course-level\nroles created by the {api:RoleOverridesController#add_role Add Role API}\nas well as the base enrollment types accepted by the `type` argument above."
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "enum": [
              "active",
              "invited",
              "creation_pending",
              "deleted",
              "rejected",
              "completed",
              "inactive"
            ],
            "type": "string",
            "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments\nare returned. When querying a user's enrollments (either via user_id\nargument or via user enrollments endpoint), the following additional\nsynthetic states are supported: \"current_and_invited\"|\"current_and_future\"|\"current_and_concluded\""
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "avatar_url",
              "group_ids",
              "locked",
              "observed_users",
              "can_be_removed"
            ],
            "type": "string",
            "description": "Array of additional information to include on the enrollment or user records.\n\"avatar_url\" and \"group_ids\" will be returned on the user record."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by user_id (only valid for course or section enrollment\nqueries). If set to the current user's id, this is a way to\ndetermine if the user has any enrollments in the course or section,\nindependent of whether the user has permission to view other people\non the roster."
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Return grades for the given grading_period.  If this parameter is not\nspecified, the returned grades will be for the whole course."
          },
          {
            "name": "enrollment_term_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Returns only enrollments for the specified enrollment term. This parameter\nonly applies to the user enrollments path. May pass the ID from the\nenrollment terms api or the SIS id prepended with 'sis_term_id:'."
          },
          {
            "name": "sis_account_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only enrollments for the specified SIS account ID(s). Does not\nlook into sub_accounts. May pass in array or string."
          },
          {
            "name": "sis_course_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only enrollments matching the specified SIS course ID(s).\nMay pass in array or string."
          },
          {
            "name": "sis_section_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only section enrollments matching the specified SIS section ID(s).\nMay pass in array or string."
          },
          {
            "name": "sis_user_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only enrollments for the specified SIS user ID(s). May pass in\narray or string."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Enroll a user",
        "summary": "enroll_user_courses",
        "tags": [
          "enrollments"
        ],
        "operationId": "V1CoursesEnrollmentsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "enrollment[user_id]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The ID of the user to be enrolled in the course."
          },
          {
            "name": "enrollment[type]",
            "in": "formData",
            "required": true,
            "enum": [
              "StudentEnrollment",
              "TeacherEnrollment",
              "TaEnrollment",
              "ObserverEnrollment",
              "DesignerEnrollment"
            ],
            "type": "string",
            "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no\nvalue is given, the type will be inferred by enrollment[role] if supplied,\notherwise 'StudentEnrollment' will be used."
          },
          {
            "name": "enrollment[role]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Assigns a custom course-level role to the user."
          },
          {
            "name": "enrollment[role_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Assigns a custom course-level role to the user."
          },
          {
            "name": "enrollment[enrollment_state]",
            "in": "formData",
            "required": false,
            "enum": [
              "active",
              "invited",
              "inactive"
            ],
            "type": "string",
            "description": "If set to 'active,' student will be immediately enrolled in the course.\nOtherwise they will be required to accept a course invitation. Default is\n'invited.'.\n\nIf set to 'inactive', student will be listed in the course roster for\nteachers, but will not be able to participate in the course until\ntheir enrollment is activated."
          },
          {
            "name": "enrollment[course_section_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the course section to enroll the student in. If the\nsection-specific URL is used, this argument is redundant and will be\nignored."
          },
          {
            "name": "enrollment[limit_privileges_to_course_section]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If set, the enrollment will only allow the user to see and interact with\nusers enrolled in the section given by course_section_id.\n* For teachers and TAs, this includes grading privileges.\n* Section-limited students will not see any users (including teachers\n  and TAs) not enrolled in their sections.\n* Users may have other enrollments that grant privileges to\n  multiple sections in the same course."
          },
          {
            "name": "enrollment[notify]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, a notification will be sent to the enrolled user.\nNotifications are not sent by default."
          },
          {
            "name": "enrollment[self_enrollment_code]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If the current user is not allowed to manage enrollments in this\ncourse, but the course allows self-enrollment, the user can self-\nenroll as a student in the default section by passing in a valid\ncode. When self-enrolling, the user_id must be 'self'. The\nenrollment_state will be set to 'active' and all other arguments\nwill be ignored."
          },
          {
            "name": "enrollment[self_enrolled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, marks the enrollment as a self-enrollment, which gives\nstudents the ability to drop the course if desired. Defaults to false."
          },
          {
            "name": "enrollment[associated_user_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "For an observer enrollment, the ID of a student to observe. The\ncaller must have +manage_students+ permission in the course.\nThis is a one-off operation; to automatically observe all a\nstudent's enrollments (for example, as a parent), please use\nthe {api:UserObserveesController#create User Observees API}."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{section_id}/enrollments": {
      "get": {
        "description": "List enrollments",
        "summary": "list_enrollments_sections",
        "tags": [
          "enrollments"
        ],
        "operationId": "V1SectionsEnrollmentsBySectionIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of enrollment types to return. Accepted values are\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment\ntypes are returned. This argument is ignored if `role` is given."
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of enrollment roles to return. Accepted values include course-level\nroles created by the {api:RoleOverridesController#add_role Add Role API}\nas well as the base enrollment types accepted by the `type` argument above."
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "enum": [
              "active",
              "invited",
              "creation_pending",
              "deleted",
              "rejected",
              "completed",
              "inactive"
            ],
            "type": "string",
            "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments\nare returned. When querying a user's enrollments (either via user_id\nargument or via user enrollments endpoint), the following additional\nsynthetic states are supported: \"current_and_invited\"|\"current_and_future\"|\"current_and_concluded\""
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "avatar_url",
              "group_ids",
              "locked",
              "observed_users",
              "can_be_removed"
            ],
            "type": "string",
            "description": "Array of additional information to include on the enrollment or user records.\n\"avatar_url\" and \"group_ids\" will be returned on the user record."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by user_id (only valid for course or section enrollment\nqueries). If set to the current user's id, this is a way to\ndetermine if the user has any enrollments in the course or section,\nindependent of whether the user has permission to view other people\non the roster."
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Return grades for the given grading_period.  If this parameter is not\nspecified, the returned grades will be for the whole course."
          },
          {
            "name": "enrollment_term_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Returns only enrollments for the specified enrollment term. This parameter\nonly applies to the user enrollments path. May pass the ID from the\nenrollment terms api or the SIS id prepended with 'sis_term_id:'."
          },
          {
            "name": "sis_account_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only enrollments for the specified SIS account ID(s). Does not\nlook into sub_accounts. May pass in array or string."
          },
          {
            "name": "sis_course_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only enrollments matching the specified SIS course ID(s).\nMay pass in array or string."
          },
          {
            "name": "sis_section_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only section enrollments matching the specified SIS section ID(s).\nMay pass in array or string."
          },
          {
            "name": "sis_user_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only enrollments for the specified SIS user ID(s). May pass in\narray or string."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Enroll a user",
        "summary": "enroll_user_sections",
        "tags": [
          "enrollments"
        ],
        "operationId": "V1SectionsEnrollmentsBySectionIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "enrollment[user_id]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The ID of the user to be enrolled in the course."
          },
          {
            "name": "enrollment[type]",
            "in": "formData",
            "required": true,
            "enum": [
              "StudentEnrollment",
              "TeacherEnrollment",
              "TaEnrollment",
              "ObserverEnrollment",
              "DesignerEnrollment"
            ],
            "type": "string",
            "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no\nvalue is given, the type will be inferred by enrollment[role] if supplied,\notherwise 'StudentEnrollment' will be used."
          },
          {
            "name": "enrollment[role]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Assigns a custom course-level role to the user."
          },
          {
            "name": "enrollment[role_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Assigns a custom course-level role to the user."
          },
          {
            "name": "enrollment[enrollment_state]",
            "in": "formData",
            "required": false,
            "enum": [
              "active",
              "invited",
              "inactive"
            ],
            "type": "string",
            "description": "If set to 'active,' student will be immediately enrolled in the course.\nOtherwise they will be required to accept a course invitation. Default is\n'invited.'.\n\nIf set to 'inactive', student will be listed in the course roster for\nteachers, but will not be able to participate in the course until\ntheir enrollment is activated."
          },
          {
            "name": "enrollment[course_section_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the course section to enroll the student in. If the\nsection-specific URL is used, this argument is redundant and will be\nignored."
          },
          {
            "name": "enrollment[limit_privileges_to_course_section]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If set, the enrollment will only allow the user to see and interact with\nusers enrolled in the section given by course_section_id.\n* For teachers and TAs, this includes grading privileges.\n* Section-limited students will not see any users (including teachers\n  and TAs) not enrolled in their sections.\n* Users may have other enrollments that grant privileges to\n  multiple sections in the same course."
          },
          {
            "name": "enrollment[notify]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, a notification will be sent to the enrolled user.\nNotifications are not sent by default."
          },
          {
            "name": "enrollment[self_enrollment_code]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If the current user is not allowed to manage enrollments in this\ncourse, but the course allows self-enrollment, the user can self-\nenroll as a student in the default section by passing in a valid\ncode. When self-enrolling, the user_id must be 'self'. The\nenrollment_state will be set to 'active' and all other arguments\nwill be ignored."
          },
          {
            "name": "enrollment[self_enrolled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, marks the enrollment as a self-enrollment, which gives\nstudents the ability to drop the course if desired. Defaults to false."
          },
          {
            "name": "enrollment[associated_user_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "For an observer enrollment, the ID of a student to observe. The\ncaller must have +manage_students+ permission in the course.\nThis is a one-off operation; to automatically observe all a\nstudent's enrollments (for example, as a parent), please use\nthe {api:UserObserveesController#create User Observees API}."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/enrollments": {
      "get": {
        "description": "List enrollments",
        "summary": "list_enrollments_users",
        "tags": [
          "enrollments"
        ],
        "operationId": "V1UsersEnrollmentsByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Filter by user_id (only valid for course or section enrollment\nqueries). If set to the current user's id, this is a way to\ndetermine if the user has any enrollments in the course or section,\nindependent of whether the user has permission to view other people\non the roster."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of enrollment types to return. Accepted values are\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment\ntypes are returned. This argument is ignored if `role` is given."
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of enrollment roles to return. Accepted values include course-level\nroles created by the {api:RoleOverridesController#add_role Add Role API}\nas well as the base enrollment types accepted by the `type` argument above."
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "enum": [
              "active",
              "invited",
              "creation_pending",
              "deleted",
              "rejected",
              "completed",
              "inactive"
            ],
            "type": "string",
            "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments\nare returned. When querying a user's enrollments (either via user_id\nargument or via user enrollments endpoint), the following additional\nsynthetic states are supported: \"current_and_invited\"|\"current_and_future\"|\"current_and_concluded\""
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "avatar_url",
              "group_ids",
              "locked",
              "observed_users",
              "can_be_removed"
            ],
            "type": "string",
            "description": "Array of additional information to include on the enrollment or user records.\n\"avatar_url\" and \"group_ids\" will be returned on the user record."
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Return grades for the given grading_period.  If this parameter is not\nspecified, the returned grades will be for the whole course."
          },
          {
            "name": "enrollment_term_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Returns only enrollments for the specified enrollment term. This parameter\nonly applies to the user enrollments path. May pass the ID from the\nenrollment terms api or the SIS id prepended with 'sis_term_id:'."
          },
          {
            "name": "sis_account_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only enrollments for the specified SIS account ID(s). Does not\nlook into sub_accounts. May pass in array or string."
          },
          {
            "name": "sis_course_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only enrollments matching the specified SIS course ID(s).\nMay pass in array or string."
          },
          {
            "name": "sis_section_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only section enrollments matching the specified SIS section ID(s).\nMay pass in array or string."
          },
          {
            "name": "sis_user_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns only enrollments for the specified SIS user ID(s). May pass in\narray or string."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/enrollments/{id}": {
      "get": {
        "description": "Enrollment by ID",
        "summary": "enrollment_by_id",
        "tags": [
          "enrollments"
        ],
        "operationId": "V1AccountsEnrollmentsByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the enrollment object"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/enrollments/{id}": {
      "delete": {
        "description": "Conclude, deactivate, or delete an enrollment",
        "summary": "conclude_deactivate_or_delete_enrollment",
        "tags": [
          "enrollments"
        ],
        "operationId": "V1CoursesEnrollmentsByCourseIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "task",
            "in": "query",
            "required": false,
            "enum": [
              "conclude",
              "delete",
              "inactivate",
              "deactivate"
            ],
            "type": "string",
            "description": "The action to take on the enrollment.\nWhen inactive, a user will still appear in the course roster to admins, but be unable to participate.\n(\"inactivate\" and \"deactivate\" are equivalent tasks)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/enrollments/{id}/accept": {
      "post": {
        "description": "Accept Course Invitation",
        "summary": "accept_course_invitation",
        "tags": [
          "enrollments"
        ],
        "operationId": "V1CoursesEnrollmentsAcceptByCourseIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/enrollments/{id}/reject": {
      "post": {
        "description": "Reject Course Invitation",
        "summary": "reject_course_invitation",
        "tags": [
          "enrollments"
        ],
        "operationId": "V1CoursesEnrollmentsRejectByCourseIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/enrollments/{id}/reactivate": {
      "put": {
        "description": "Re-activate an enrollment",
        "summary": "re_activate_enrollment",
        "tags": [
          "enrollments"
        ],
        "operationId": "V1CoursesEnrollmentsReactivateByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/users/{user_id}/last_attended": {
      "put": {
        "description": "Adds last attended date to student enrollment in course",
        "summary": "adds_last_attended_date_to_student_enrollment_in_course",
        "tags": [
          "enrollments"
        ],
        "operationId": "V1CoursesUsersLastAttendedByCourseIdAndUserIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/error_reports": {
      "post": {
        "description": "Create Error Report",
        "summary": "create_error_report",
        "tags": [
          "error_reports"
        ],
        "operationId": "V1ErrorReportsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "error[subject]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The summary of the problem"
          },
          {
            "name": "error[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "URL from which the report was issued"
          },
          {
            "name": "error[email]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Email address for the reporting user"
          },
          {
            "name": "error[comments]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The long version of the story from the user one what they experienced"
          },
          {
            "name": "error[http_env]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A collection of metadata about the users' environment.  If not provided,\ncanvas will collect it based on information found in the request.\n(Doesn't have to be HTTPENV info, could be anything JSON object that can be\nserialized as a hash, a mobile app might include relevant metadata for\nitself)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/external_tools": {
      "get": {
        "description": "List external tools",
        "summary": "list_external_tools_courses",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1CoursesExternalToolsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name of the tools to match and return."
          },
          {
            "name": "selectable",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, then only tools that are meant to be selectable are returned"
          },
          {
            "name": "include_parents",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, then include tools installed in all accounts above the current context"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create an external tool",
        "summary": "create_external_tool_courses",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1CoursesExternalToolsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The name of the tool"
          },
          {
            "name": "privacy_level",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "What information to send to the external tool."
          },
          {
            "name": "consumer_key",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The consumer key for the external tool"
          },
          {
            "name": "shared_secret",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The shared secret with the external tool"
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A description of the tool"
          },
          {
            "name": "url",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url to match links against. Either \"url\" or \"domain\" should be set,\nnot both."
          },
          {
            "name": "domain",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The domain to match links against. Either \"url\" or \"domain\" should be\nset, not both."
          },
          {
            "name": "icon_url",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the icon to show for this tool"
          },
          {
            "name": "text",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The default text to show for this tool"
          },
          {
            "name": "custom_fields[field_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Custom fields that will be sent to the tool consumer; can be used\nmultiple times"
          },
          {
            "name": "account_navigation[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool for account navigation"
          },
          {
            "name": "account_navigation[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "account_navigation[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show on the left-tab in the account navigation"
          },
          {
            "name": "account_navigation[selection_width]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The width of the dialog the tool is launched in"
          },
          {
            "name": "account_navigation[selection_height]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The height of the dialog the tool is launched in"
          },
          {
            "name": "account_navigation[display_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"borderless\", or \"default\""
          },
          {
            "name": "user_navigation[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool for user navigation"
          },
          {
            "name": "user_navigation[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "user_navigation[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show on the left-tab in the user navigation"
          },
          {
            "name": "user_navigation[visibility]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Who will see the navigation tab. \"admins\" for admins, \"public\" or\n\"members\" for everyone"
          },
          {
            "name": "course_home_sub_navigation[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool for right-side course home navigation menu"
          },
          {
            "name": "course_home_sub_navigation[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "course_home_sub_navigation[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show on the right-side course home navigation menu"
          },
          {
            "name": "course_home_sub_navigation[icon_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the icon to show in the right-side course home navigation menu"
          },
          {
            "name": "course_navigation[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "course_navigation[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show on the left-tab in the course navigation"
          },
          {
            "name": "course_navigation[visibility]",
            "in": "formData",
            "required": false,
            "enum": [
              "admins",
              "members"
            ],
            "type": "string",
            "description": "Who will see the navigation tab. \"admins\" for course admins, \"members\" for\nstudents, null for everyone"
          },
          {
            "name": "course_navigation[windowTarget]",
            "in": "formData",
            "required": false,
            "enum": [
              "_blank",
              "_self"
            ],
            "type": "string",
            "description": "Determines how the navigation tab will be opened.\n\"_blank\"\tLaunches the external tool in a new window or tab.\n\"_self\"\t(Default) Launches the external tool in an iframe inside of Canvas."
          },
          {
            "name": "course_navigation[default]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the navigation option will show in the course by default or\nwhether the teacher will have to explicitly enable it"
          },
          {
            "name": "course_navigation[display_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"borderless\", or \"default\""
          },
          {
            "name": "editor_button[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "editor_button[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "editor_button[icon_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the icon to show in the WYSIWYG editor"
          },
          {
            "name": "editor_button[selection_width]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The width of the dialog the tool is launched in"
          },
          {
            "name": "editor_button[selection_height]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The height of the dialog the tool is launched in"
          },
          {
            "name": "editor_button[message_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
          },
          {
            "name": "homework_submission[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "homework_submission[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "homework_submission[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show on the homework submission tab"
          },
          {
            "name": "homework_submission[message_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
          },
          {
            "name": "link_selection[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "link_selection[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "link_selection[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show for the link selection text"
          },
          {
            "name": "link_selection[message_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
          },
          {
            "name": "migration_selection[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "migration_selection[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "migration_selection[message_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
          },
          {
            "name": "tool_configuration[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "tool_configuration[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "tool_configuration[message_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
          },
          {
            "name": "tool_configuration[prefer_sis_email]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to default the lis_person_contact_email_primary to prefer\nprovisioned sis_email; otherwise, omit"
          },
          {
            "name": "resource_selection[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "resource_selection[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "resource_selection[icon_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the icon to show in the module external tool list"
          },
          {
            "name": "resource_selection[selection_width]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The width of the dialog the tool is launched in"
          },
          {
            "name": "resource_selection[selection_height]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The height of the dialog the tool is launched in"
          },
          {
            "name": "config_type",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Configuration can be passed in as CC xml instead of using query\nparameters. If this value is \"by_url\" or \"by_xml\" then an xml\nconfiguration will be expected in either the \"config_xml\" or \"config_url\"\nparameter. Note that the name parameter overrides the tool name provided\nin the xml"
          },
          {
            "name": "config_xml",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "XML tool configuration, as specified in the CC xml specification. This is\nrequired if \"config_type\" is set to \"by_xml\""
          },
          {
            "name": "config_url",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "URL where the server can retrieve an XML tool configuration, as specified\nin the CC xml specification. This is required if \"config_type\" is set to\n\"by_url\""
          },
          {
            "name": "not_selectable",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Default: false, if set to true the tool won't show up in the external tool\nselection UI in modules and assignments"
          },
          {
            "name": "oauth_compliant",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Default: false, if set to true LTI query params will not be copied to the\npost body."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/external_tools": {
      "get": {
        "description": "List external tools",
        "summary": "list_external_tools_accounts",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1AccountsExternalToolsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name of the tools to match and return."
          },
          {
            "name": "selectable",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, then only tools that are meant to be selectable are returned"
          },
          {
            "name": "include_parents",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, then include tools installed in all accounts above the current context"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create an external tool",
        "summary": "create_external_tool_accounts",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1AccountsExternalToolsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The name of the tool"
          },
          {
            "name": "privacy_level",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "What information to send to the external tool."
          },
          {
            "name": "consumer_key",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The consumer key for the external tool"
          },
          {
            "name": "shared_secret",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The shared secret with the external tool"
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A description of the tool"
          },
          {
            "name": "url",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url to match links against. Either \"url\" or \"domain\" should be set,\nnot both."
          },
          {
            "name": "domain",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The domain to match links against. Either \"url\" or \"domain\" should be\nset, not both."
          },
          {
            "name": "icon_url",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the icon to show for this tool"
          },
          {
            "name": "text",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The default text to show for this tool"
          },
          {
            "name": "custom_fields[field_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Custom fields that will be sent to the tool consumer; can be used\nmultiple times"
          },
          {
            "name": "account_navigation[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool for account navigation"
          },
          {
            "name": "account_navigation[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "account_navigation[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show on the left-tab in the account navigation"
          },
          {
            "name": "account_navigation[selection_width]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The width of the dialog the tool is launched in"
          },
          {
            "name": "account_navigation[selection_height]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The height of the dialog the tool is launched in"
          },
          {
            "name": "account_navigation[display_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"borderless\", or \"default\""
          },
          {
            "name": "user_navigation[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool for user navigation"
          },
          {
            "name": "user_navigation[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "user_navigation[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show on the left-tab in the user navigation"
          },
          {
            "name": "user_navigation[visibility]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Who will see the navigation tab. \"admins\" for admins, \"public\" or\n\"members\" for everyone"
          },
          {
            "name": "course_home_sub_navigation[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool for right-side course home navigation menu"
          },
          {
            "name": "course_home_sub_navigation[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "course_home_sub_navigation[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show on the right-side course home navigation menu"
          },
          {
            "name": "course_home_sub_navigation[icon_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the icon to show in the right-side course home navigation menu"
          },
          {
            "name": "course_navigation[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "course_navigation[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show on the left-tab in the course navigation"
          },
          {
            "name": "course_navigation[visibility]",
            "in": "formData",
            "required": false,
            "enum": [
              "admins",
              "members"
            ],
            "type": "string",
            "description": "Who will see the navigation tab. \"admins\" for course admins, \"members\" for\nstudents, null for everyone"
          },
          {
            "name": "course_navigation[windowTarget]",
            "in": "formData",
            "required": false,
            "enum": [
              "_blank",
              "_self"
            ],
            "type": "string",
            "description": "Determines how the navigation tab will be opened.\n\"_blank\"\tLaunches the external tool in a new window or tab.\n\"_self\"\t(Default) Launches the external tool in an iframe inside of Canvas."
          },
          {
            "name": "course_navigation[default]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the navigation option will show in the course by default or\nwhether the teacher will have to explicitly enable it"
          },
          {
            "name": "course_navigation[display_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"borderless\", or \"default\""
          },
          {
            "name": "editor_button[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "editor_button[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "editor_button[icon_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the icon to show in the WYSIWYG editor"
          },
          {
            "name": "editor_button[selection_width]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The width of the dialog the tool is launched in"
          },
          {
            "name": "editor_button[selection_height]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The height of the dialog the tool is launched in"
          },
          {
            "name": "editor_button[message_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
          },
          {
            "name": "homework_submission[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "homework_submission[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "homework_submission[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show on the homework submission tab"
          },
          {
            "name": "homework_submission[message_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
          },
          {
            "name": "link_selection[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "link_selection[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "link_selection[text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text that will show for the link selection text"
          },
          {
            "name": "link_selection[message_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
          },
          {
            "name": "migration_selection[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "migration_selection[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "migration_selection[message_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
          },
          {
            "name": "tool_configuration[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "tool_configuration[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "tool_configuration[message_type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit"
          },
          {
            "name": "tool_configuration[prefer_sis_email]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to default the lis_person_contact_email_primary to prefer\nprovisioned sis_email; otherwise, omit"
          },
          {
            "name": "resource_selection[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the external tool"
          },
          {
            "name": "resource_selection[enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set this to enable this feature"
          },
          {
            "name": "resource_selection[icon_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The url of the icon to show in the module external tool list"
          },
          {
            "name": "resource_selection[selection_width]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The width of the dialog the tool is launched in"
          },
          {
            "name": "resource_selection[selection_height]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The height of the dialog the tool is launched in"
          },
          {
            "name": "config_type",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Configuration can be passed in as CC xml instead of using query\nparameters. If this value is \"by_url\" or \"by_xml\" then an xml\nconfiguration will be expected in either the \"config_xml\" or \"config_url\"\nparameter. Note that the name parameter overrides the tool name provided\nin the xml"
          },
          {
            "name": "config_xml",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "XML tool configuration, as specified in the CC xml specification. This is\nrequired if \"config_type\" is set to \"by_xml\""
          },
          {
            "name": "config_url",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "URL where the server can retrieve an XML tool configuration, as specified\nin the CC xml specification. This is required if \"config_type\" is set to\n\"by_url\""
          },
          {
            "name": "not_selectable",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Default: false, if set to true the tool won't show up in the external tool\nselection UI in modules and assignments"
          },
          {
            "name": "oauth_compliant",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Default: false, if set to true LTI query params will not be copied to the\npost body."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/external_tools": {
      "get": {
        "description": "List external tools",
        "summary": "list_external_tools_groups",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1GroupsExternalToolsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name of the tools to match and return."
          },
          {
            "name": "selectable",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, then only tools that are meant to be selectable are returned"
          },
          {
            "name": "include_parents",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, then include tools installed in all accounts above the current context"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/external_tools/sessionless_launch": {
      "get": {
        "description": "Get a sessionless launch url for an external tool.",
        "summary": "get_sessionless_launch_url_for_external_tool_courses",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1CoursesExternalToolsSessionlessLaunchByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The external id of the tool to launch."
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The LTI launch url for the external tool."
          },
          {
            "name": "assignment_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The assignment id for an assignment launch. Required if launch_type is set to \"assessment\"."
          },
          {
            "name": "module_item_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The assignment id for a module item launch. Required if launch_type is set to \"module_item\"."
          },
          {
            "name": "launch_type",
            "in": "query",
            "required": false,
            "enum": [
              "assessment",
              "module_item"
            ],
            "type": "string",
            "description": "The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\")\ncan also be specified to use the custom launch url for that placement; if done, the tool id\nmust be provided."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/external_tools/sessionless_launch": {
      "get": {
        "description": "Get a sessionless launch url for an external tool.",
        "summary": "get_sessionless_launch_url_for_external_tool_accounts",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1AccountsExternalToolsSessionlessLaunchByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The external id of the tool to launch."
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The LTI launch url for the external tool."
          },
          {
            "name": "assignment_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The assignment id for an assignment launch. Required if launch_type is set to \"assessment\"."
          },
          {
            "name": "module_item_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The assignment id for a module item launch. Required if launch_type is set to \"module_item\"."
          },
          {
            "name": "launch_type",
            "in": "query",
            "required": false,
            "enum": [
              "assessment",
              "module_item"
            ],
            "type": "string",
            "description": "The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\")\ncan also be specified to use the custom launch url for that placement; if done, the tool id\nmust be provided."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/external_tools/{external_tool_id}": {
      "get": {
        "description": "Get a single external tool",
        "summary": "get_single_external_tool_courses",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1CoursesExternalToolsByCourseIdAndExternalToolIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Edit an external tool",
        "summary": "edit_external_tool_courses",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1CoursesExternalToolsByCourseIdAndExternalToolIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete an external tool",
        "summary": "delete_external_tool_courses",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1CoursesExternalToolsByCourseIdAndExternalToolIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/external_tools/{external_tool_id}": {
      "get": {
        "description": "Get a single external tool",
        "summary": "get_single_external_tool_accounts",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1AccountsExternalToolsByAccountIdAndExternalToolIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Edit an external tool",
        "summary": "edit_external_tool_accounts",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1AccountsExternalToolsByAccountIdAndExternalToolIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete an external tool",
        "summary": "delete_external_tool_accounts",
        "tags": [
          "external_tools"
        ],
        "operationId": "V1AccountsExternalToolsByAccountIdAndExternalToolIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "external_tool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/favorites/courses": {
      "get": {
        "description": "List favorite courses",
        "summary": "list_favorite_courses",
        "tags": [
          "favorites"
        ],
        "operationId": "V1UsersSelfFavoritesCoursesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "exclude_blueprint_courses",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set, only return courses that are not configured as blueprint courses."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Reset course favorites",
        "summary": "reset_course_favorites",
        "tags": [
          "favorites"
        ],
        "operationId": "V1UsersSelfFavoritesCoursesDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/favorites/groups": {
      "get": {
        "description": "List favorite groups",
        "summary": "list_favorite_groups",
        "tags": [
          "favorites"
        ],
        "operationId": "V1UsersSelfFavoritesGroupsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Reset group favorites",
        "summary": "reset_group_favorites",
        "tags": [
          "favorites"
        ],
        "operationId": "V1UsersSelfFavoritesGroupsDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/favorites/courses/{id}": {
      "post": {
        "description": "Add course to favorites",
        "summary": "add_course_to_favorites",
        "tags": [
          "favorites"
        ],
        "operationId": "V1UsersSelfFavoritesCoursesByIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID or SIS ID of the course to add.  The current user must be\nregistered in the course."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove course from favorites",
        "summary": "remove_course_from_favorites",
        "tags": [
          "favorites"
        ],
        "operationId": "V1UsersSelfFavoritesCoursesByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "the ID or SIS ID of the course to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/favorites/groups/{id}": {
      "post": {
        "description": "Add group to favorites",
        "summary": "add_group_to_favorites",
        "tags": [
          "favorites"
        ],
        "operationId": "V1UsersSelfFavoritesGroupsByIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID or SIS ID of the group to add.  The current user must be\na member of the group."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove group from favorites",
        "summary": "remove_group_from_favorites",
        "tags": [
          "favorites"
        ],
        "operationId": "V1UsersSelfFavoritesGroupsByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "the ID or SIS ID of the group to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/features": {
      "get": {
        "description": "List features",
        "summary": "list_features_courses",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1CoursesFeaturesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/features": {
      "get": {
        "description": "List features",
        "summary": "list_features_accounts",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1AccountsFeaturesByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/features": {
      "get": {
        "description": "List features",
        "summary": "list_features_users",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1UsersFeaturesByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/features/enabled": {
      "get": {
        "description": "List enabled features",
        "summary": "list_enabled_features_courses",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1CoursesFeaturesEnabledByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/features/enabled": {
      "get": {
        "description": "List enabled features",
        "summary": "list_enabled_features_accounts",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1AccountsFeaturesEnabledByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/features/enabled": {
      "get": {
        "description": "List enabled features",
        "summary": "list_enabled_features_users",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1UsersFeaturesEnabledByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/features/flags/{feature}": {
      "get": {
        "description": "Get feature flag",
        "summary": "get_feature_flag_courses",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1CoursesFeaturesFlagsByCourseIdAndFeatureGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "feature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Set feature flag",
        "summary": "set_feature_flag_courses",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1CoursesFeaturesFlagsByCourseIdAndFeaturePut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "feature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "state",
            "in": "formData",
            "required": false,
            "enum": [
              "off",
              "allowed",
              "on"
            ],
            "type": "string",
            "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove feature flag",
        "summary": "remove_feature_flag_courses",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1CoursesFeaturesFlagsByCourseIdAndFeatureDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "feature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/features/flags/{feature}": {
      "get": {
        "description": "Get feature flag",
        "summary": "get_feature_flag_accounts",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1AccountsFeaturesFlagsByAccountIdAndFeatureGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "feature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Set feature flag",
        "summary": "set_feature_flag_accounts",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1AccountsFeaturesFlagsByAccountIdAndFeaturePut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "feature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "state",
            "in": "formData",
            "required": false,
            "enum": [
              "off",
              "allowed",
              "on"
            ],
            "type": "string",
            "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove feature flag",
        "summary": "remove_feature_flag_accounts",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1AccountsFeaturesFlagsByAccountIdAndFeatureDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "feature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/features/flags/{feature}": {
      "get": {
        "description": "Get feature flag",
        "summary": "get_feature_flag_users",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1UsersFeaturesFlagsByUserIdAndFeatureGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "feature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Set feature flag",
        "summary": "set_feature_flag_users",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1UsersFeaturesFlagsByUserIdAndFeaturePut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "feature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "state",
            "in": "formData",
            "required": false,
            "enum": [
              "off",
              "allowed",
              "on"
            ],
            "type": "string",
            "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove feature flag",
        "summary": "remove_feature_flag_users",
        "tags": [
          "feature_flags"
        ],
        "operationId": "V1UsersFeaturesFlagsByUserIdAndFeatureDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "feature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/files/quota": {
      "get": {
        "description": "Get quota information",
        "summary": "get_quota_information_courses",
        "tags": [
          "files"
        ],
        "operationId": "V1CoursesFilesQuotaByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/files/quota": {
      "get": {
        "description": "Get quota information",
        "summary": "get_quota_information_groups",
        "tags": [
          "files"
        ],
        "operationId": "V1GroupsFilesQuotaByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/files/quota": {
      "get": {
        "description": "Get quota information",
        "summary": "get_quota_information_users",
        "tags": [
          "files"
        ],
        "operationId": "V1UsersFilesQuotaByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/files": {
      "get": {
        "description": "List files",
        "summary": "list_files_users",
        "tags": [
          "files"
        ],
        "operationId": "V1UsersFilesByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.)."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name of the files to match and return."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "user"
            ],
            "type": "string",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)"
          },
          {
            "name": "only",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "name",
              "size",
              "created_at",
              "updated_at",
              "content_type",
              "user"
            ],
            "type": "string",
            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "The sorting order. Defaults to 'asc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Upload a file",
        "summary": "upload_file",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersFilesByUserIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/files": {
      "get": {
        "description": "List files",
        "summary": "list_files_groups",
        "tags": [
          "files"
        ],
        "operationId": "V1GroupsFilesByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.)."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name of the files to match and return."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "user"
            ],
            "type": "string",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)"
          },
          {
            "name": "only",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "name",
              "size",
              "created_at",
              "updated_at",
              "content_type",
              "user"
            ],
            "type": "string",
            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "The sorting order. Defaults to 'asc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Upload a file",
        "summary": "upload_file",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsFilesByGroupIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/folders/{id}/files": {
      "get": {
        "description": "List files",
        "summary": "list_files_folders",
        "tags": [
          "files"
        ],
        "operationId": "V1FoldersFilesByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "content_types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.)."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name of the files to match and return."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "user"
            ],
            "type": "string",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)"
          },
          {
            "name": "only",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "name",
              "size",
              "created_at",
              "updated_at",
              "content_type",
              "user"
            ],
            "type": "string",
            "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "The sorting order. Defaults to 'asc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/files/{id}/public_url": {
      "get": {
        "description": "Get public inline preview url",
        "summary": "get_public_inline_preview_url",
        "tags": [
          "files"
        ],
        "operationId": "V1FilesPublicUrlByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the submission the file is associated with.  Provide this argument to gain access to a file\nthat has been submitted to an assignment (Canvas will verify that the file belongs to the submission\nand the calling user has rights to view the submission)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/files/{id}": {
      "get": {
        "description": "Get file",
        "summary": "get_file_files",
        "tags": [
          "files"
        ],
        "operationId": "V1FilesByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "user"
            ],
            "type": "string",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update file",
        "summary": "update_file",
        "tags": [
          "files"
        ],
        "operationId": "V1FilesByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new display name of the file"
          },
          {
            "name": "parent_folder_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The id of the folder to move this file into.\nThe new folder must be in the same context as the original parent folder.\nIf the file is in a context without folders this does not apply."
          },
          {
            "name": "on_duplicate",
            "in": "formData",
            "required": false,
            "enum": [
              "overwrite",
              "rename"
            ],
            "type": "string",
            "description": "If the file is moved to a folder containing a file with the same name,\nor renamed to a name matching an existing file, the API call will fail\nunless this parameter is supplied.\n\n\"overwrite\":: Replace the existing file with the same name\n\"rename\":: Add a qualifier to make the new filename unique"
          },
          {
            "name": "lock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to lock the file at"
          },
          {
            "name": "unlock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to unlock the file at"
          },
          {
            "name": "locked",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the file as locked"
          },
          {
            "name": "hidden",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the file as hidden"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete file",
        "summary": "delete_file",
        "tags": [
          "files"
        ],
        "operationId": "V1FilesByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "replace",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "This action is irreversible.\nIf replace is set to true the file contents will be replaced with a\ngeneric \"file has been removed\" file. This also destroys any previews\nthat have been generated for the file.\nMust have manage files and become other users permissions"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/files/{id}": {
      "get": {
        "description": "Get file",
        "summary": "get_file_courses",
        "tags": [
          "files"
        ],
        "operationId": "V1CoursesFilesByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "user"
            ],
            "type": "string",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/files/{id}": {
      "get": {
        "description": "Get file",
        "summary": "get_file_groups",
        "tags": [
          "files"
        ],
        "operationId": "V1GroupsFilesByGroupIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "user"
            ],
            "type": "string",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/files/{id}": {
      "get": {
        "description": "Get file",
        "summary": "get_file_users",
        "tags": [
          "files"
        ],
        "operationId": "V1UsersFilesByUserIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "user"
            ],
            "type": "string",
            "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/folders/{id}/folders": {
      "get": {
        "description": "List folders",
        "summary": "list_folders",
        "tags": [
          "files"
        ],
        "operationId": "V1FoldersFoldersByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/folders": {
      "get": {
        "description": "List all folders",
        "summary": "list_all_folders_courses",
        "tags": [
          "files"
        ],
        "operationId": "V1CoursesFoldersByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create folder",
        "summary": "create_folder_courses",
        "tags": [
          "files"
        ],
        "operationId": "V1CoursesFoldersByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The name of the folder"
          },
          {
            "name": "parent_folder_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used."
          },
          {
            "name": "parent_folder_path",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used."
          },
          {
            "name": "lock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to lock the folder at"
          },
          {
            "name": "unlock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to unlock the folder at"
          },
          {
            "name": "locked",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the folder as locked"
          },
          {
            "name": "hidden",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the folder as hidden"
          },
          {
            "name": "position",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Set an explicit sort position for the folder"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/folders": {
      "get": {
        "description": "List all folders",
        "summary": "list_all_folders_users",
        "tags": [
          "files"
        ],
        "operationId": "V1UsersFoldersByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create folder",
        "summary": "create_folder_users",
        "tags": [
          "files"
        ],
        "operationId": "V1UsersFoldersByUserIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The name of the folder"
          },
          {
            "name": "parent_folder_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used."
          },
          {
            "name": "parent_folder_path",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used."
          },
          {
            "name": "lock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to lock the folder at"
          },
          {
            "name": "unlock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to unlock the folder at"
          },
          {
            "name": "locked",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the folder as locked"
          },
          {
            "name": "hidden",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the folder as hidden"
          },
          {
            "name": "position",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Set an explicit sort position for the folder"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/folders": {
      "get": {
        "description": "List all folders",
        "summary": "list_all_folders_groups",
        "tags": [
          "files"
        ],
        "operationId": "V1GroupsFoldersByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create folder",
        "summary": "create_folder_groups",
        "tags": [
          "files"
        ],
        "operationId": "V1GroupsFoldersByGroupIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The name of the folder"
          },
          {
            "name": "parent_folder_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used."
          },
          {
            "name": "parent_folder_path",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used."
          },
          {
            "name": "lock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to lock the folder at"
          },
          {
            "name": "unlock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to unlock the folder at"
          },
          {
            "name": "locked",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the folder as locked"
          },
          {
            "name": "hidden",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the folder as hidden"
          },
          {
            "name": "position",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Set an explicit sort position for the folder"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/folders/by_path/*full_path": {
      "get": {
        "description": "Resolve path",
        "summary": "resolve_path_courses_full_path",
        "tags": [
          "files"
        ],
        "operationId": "V1CoursesFoldersByPathFullPathByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/folders/by_path": {
      "get": {
        "description": "Resolve path",
        "summary": "resolve_path_courses",
        "tags": [
          "files"
        ],
        "operationId": "V1CoursesFoldersByPathByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/folders/by_path/*full_path": {
      "get": {
        "description": "Resolve path",
        "summary": "resolve_path_users_full_path",
        "tags": [
          "files"
        ],
        "operationId": "V1UsersFoldersByPathFullPathByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/folders/by_path": {
      "get": {
        "description": "Resolve path",
        "summary": "resolve_path_users",
        "tags": [
          "files"
        ],
        "operationId": "V1UsersFoldersByPathByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/folders/by_path/*full_path": {
      "get": {
        "description": "Resolve path",
        "summary": "resolve_path_groups_full_path",
        "tags": [
          "files"
        ],
        "operationId": "V1GroupsFoldersByPathFullPathByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/folders/by_path": {
      "get": {
        "description": "Resolve path",
        "summary": "resolve_path_groups",
        "tags": [
          "files"
        ],
        "operationId": "V1GroupsFoldersByPathByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/folders/{id}": {
      "get": {
        "description": "Get folder",
        "summary": "get_folder_courses",
        "tags": [
          "files"
        ],
        "operationId": "V1CoursesFoldersByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/folders/{id}": {
      "get": {
        "description": "Get folder",
        "summary": "get_folder_users",
        "tags": [
          "files"
        ],
        "operationId": "V1UsersFoldersByUserIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/folders/{id}": {
      "get": {
        "description": "Get folder",
        "summary": "get_folder_groups",
        "tags": [
          "files"
        ],
        "operationId": "V1GroupsFoldersByGroupIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/folders/{id}": {
      "get": {
        "description": "Get folder",
        "summary": "get_folder_folders",
        "tags": [
          "files"
        ],
        "operationId": "V1FoldersByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update folder",
        "summary": "update_folder",
        "tags": [
          "files"
        ],
        "operationId": "V1FoldersByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new name of the folder"
          },
          {
            "name": "parent_folder_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The id of the folder to move this folder into. The new folder must be in the same context as the original parent folder."
          },
          {
            "name": "lock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to lock the folder at"
          },
          {
            "name": "unlock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to unlock the folder at"
          },
          {
            "name": "locked",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the folder as locked"
          },
          {
            "name": "hidden",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the folder as hidden"
          },
          {
            "name": "position",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Set an explicit sort position for the folder"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete folder",
        "summary": "delete_folder",
        "tags": [
          "files"
        ],
        "operationId": "V1FoldersByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to 'true' to allow deleting a non-empty folder"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/folders/{folder_id}/folders": {
      "post": {
        "description": "Create folder",
        "summary": "create_folder_folders",
        "tags": [
          "files"
        ],
        "operationId": "V1FoldersFoldersByFolderIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The name of the folder"
          },
          {
            "name": "parent_folder_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used."
          },
          {
            "name": "parent_folder_path",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used."
          },
          {
            "name": "lock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to lock the folder at"
          },
          {
            "name": "unlock_at",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The datetime to unlock the folder at"
          },
          {
            "name": "locked",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the folder as locked"
          },
          {
            "name": "hidden",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Flag the folder as hidden"
          },
          {
            "name": "position",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Set an explicit sort position for the folder"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/folders/{folder_id}/files": {
      "post": {
        "description": "Upload a file",
        "summary": "upload_file",
        "tags": [
          "files"
        ],
        "operationId": "V1FoldersFilesByFolderIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/folders/{dest_folder_id}/copy_file": {
      "post": {
        "description": "Copy a file",
        "summary": "copy_file",
        "tags": [
          "files"
        ],
        "operationId": "V1FoldersCopyFileByDestFolderIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "dest_folder_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "source_file_id",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The id of the source file"
          },
          {
            "name": "on_duplicate",
            "in": "formData",
            "required": false,
            "enum": [
              "overwrite",
              "rename"
            ],
            "type": "string",
            "description": "What to do if a file with the same name already exists at the destination.\nIf such a file exists and this parameter is not given, the call will fail.\n\n\"overwrite\":: Replace an existing file with the same name\n\"rename\":: Add a qualifier to make the new filename unique"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/folders/{dest_folder_id}/copy_folder": {
      "post": {
        "description": "Copy a folder",
        "summary": "copy_folder",
        "tags": [
          "files"
        ],
        "operationId": "V1FoldersCopyFolderByDestFolderIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "dest_folder_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "source_folder_id",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The id of the source folder"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/usage_rights": {
      "put": {
        "description": "Set usage rights",
        "summary": "set_usage_rights_courses",
        "tags": [
          "files"
        ],
        "operationId": "V1CoursesUsageRightsByCourseIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "file_ids",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of files to set usage rights for."
          },
          {
            "name": "usage_rights[use_justification]",
            "in": "formData",
            "required": true,
            "enum": [
              "own_copyright",
              "used_by_permission",
              "fair_use",
              "public_domain",
              "creative_commons"
            ],
            "type": "string",
            "description": "The intellectual property justification for using the files in Canvas"
          },
          {
            "name": "folder_ids",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights."
          },
          {
            "name": "publish",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save)."
          },
          {
            "name": "usage_rights[legal_copyright]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The legal copyright line for the files"
          },
          {
            "name": "usage_rights[license]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove usage rights",
        "summary": "remove_usage_rights_courses",
        "tags": [
          "files"
        ],
        "operationId": "V1CoursesUsageRightsByCourseIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "file_ids",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of files to remove associated usage rights from."
          },
          {
            "name": "folder_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of folders. Usage rights will be removed from all files in these folders."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/usage_rights": {
      "put": {
        "description": "Set usage rights",
        "summary": "set_usage_rights_groups",
        "tags": [
          "files"
        ],
        "operationId": "V1GroupsUsageRightsByGroupIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "file_ids",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of files to set usage rights for."
          },
          {
            "name": "usage_rights[use_justification]",
            "in": "formData",
            "required": true,
            "enum": [
              "own_copyright",
              "used_by_permission",
              "fair_use",
              "public_domain",
              "creative_commons"
            ],
            "type": "string",
            "description": "The intellectual property justification for using the files in Canvas"
          },
          {
            "name": "folder_ids",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights."
          },
          {
            "name": "publish",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save)."
          },
          {
            "name": "usage_rights[legal_copyright]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The legal copyright line for the files"
          },
          {
            "name": "usage_rights[license]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove usage rights",
        "summary": "remove_usage_rights_groups",
        "tags": [
          "files"
        ],
        "operationId": "V1GroupsUsageRightsByGroupIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "file_ids",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of files to remove associated usage rights from."
          },
          {
            "name": "folder_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of folders. Usage rights will be removed from all files in these folders."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/usage_rights": {
      "put": {
        "description": "Set usage rights",
        "summary": "set_usage_rights_users",
        "tags": [
          "files"
        ],
        "operationId": "V1UsersUsageRightsByUserIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "file_ids",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of files to set usage rights for."
          },
          {
            "name": "usage_rights[use_justification]",
            "in": "formData",
            "required": true,
            "enum": [
              "own_copyright",
              "used_by_permission",
              "fair_use",
              "public_domain",
              "creative_commons"
            ],
            "type": "string",
            "description": "The intellectual property justification for using the files in Canvas"
          },
          {
            "name": "folder_ids",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights."
          },
          {
            "name": "publish",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save)."
          },
          {
            "name": "usage_rights[legal_copyright]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The legal copyright line for the files"
          },
          {
            "name": "usage_rights[license]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove usage rights",
        "summary": "remove_usage_rights_users",
        "tags": [
          "files"
        ],
        "operationId": "V1UsersUsageRightsByUserIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "file_ids",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of files to remove associated usage rights from."
          },
          {
            "name": "folder_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of folders. Usage rights will be removed from all files in these folders."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/content_licenses": {
      "get": {
        "description": "List licenses",
        "summary": "list_licenses_courses",
        "tags": [
          "files"
        ],
        "operationId": "V1CoursesContentLicensesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/content_licenses": {
      "get": {
        "description": "List licenses",
        "summary": "list_licenses_groups",
        "tags": [
          "files"
        ],
        "operationId": "V1GroupsContentLicensesByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/content_licenses": {
      "get": {
        "description": "List licenses",
        "summary": "list_licenses_users",
        "tags": [
          "files"
        ],
        "operationId": "V1UsersContentLicensesByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/audit/grade_change/assignments/{assignment_id}": {
      "get": {
        "description": "Query by assignment.",
        "summary": "query_by_assignment",
        "tags": [
          "grade_change_log"
        ],
        "operationId": "V1AuditGradeChangeAssignmentsByAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The beginning of the time range from which you want events."
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The end of the time range from which you want events."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/audit/grade_change/courses/{course_id}": {
      "get": {
        "description": "Query by course.",
        "summary": "query_by_course",
        "tags": [
          "grade_change_log"
        ],
        "operationId": "V1AuditGradeChangeCoursesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The beginning of the time range from which you want events."
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The end of the time range from which you want events."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/audit/grade_change/students/{student_id}": {
      "get": {
        "description": "Query by student.",
        "summary": "query_by_student",
        "tags": [
          "grade_change_log"
        ],
        "operationId": "V1AuditGradeChangeStudentsByStudentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "student_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The beginning of the time range from which you want events."
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The end of the time range from which you want events."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/audit/grade_change/graders/{grader_id}": {
      "get": {
        "description": "Query by grader.",
        "summary": "query_by_grader",
        "tags": [
          "grade_change_log"
        ],
        "operationId": "V1AuditGradeChangeGradersByGraderIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "grader_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The beginning of the time range from which you want events."
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The end of the time range from which you want events."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/gradebook_history/days": {
      "get": {
        "description": "Days in gradebook history for this course",
        "summary": "days_in_gradebook_history_for_this_course",
        "tags": [
          "gradebook_history"
        ],
        "operationId": "V1CoursesGradebookHistoryDaysByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the contextual course for this API call"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/gradebook_history/{date}": {
      "get": {
        "description": "Details for a given date in gradebook history for this course",
        "summary": "details_for_given_date_in_gradebook_history_for_this_course",
        "tags": [
          "gradebook_history"
        ],
        "operationId": "V1CoursesGradebookHistoryByCourseIdAndDateGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the contextual course for this API call"
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The date for which you would like to see detailed information"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/gradebook_history/{date}/graders/{grader_id}/assignments/{assignment_id}/submissions": {
      "get": {
        "description": "Lists submissions",
        "summary": "lists_submissions",
        "tags": [
          "gradebook_history"
        ],
        "operationId": "V1CoursesGradebookHistoryGradersGraderIdAssignmentsAssignmentIdSubmissionsByCourseIdAndDateGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the contextual course for this API call"
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The date for which you would like to see submissions"
          },
          {
            "name": "grader_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the grader for which you want to see submissions"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the assignment for which you want to see submissions"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/gradebook_history/feed": {
      "get": {
        "description": "List uncollated submission versions",
        "summary": "list_uncollated_submission_versions",
        "tags": [
          "gradebook_history"
        ],
        "operationId": "V1CoursesGradebookHistoryFeedByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the contextual course for this API call"
          },
          {
            "name": "assignment_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the assignment for which you want to see submissions. If\nabsent, versions of submissions from any assignment in the course are\nincluded."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the user for which you want to see submissions. If absent,\nversions of submissions from any user in the course are included."
          },
          {
            "name": "ascending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Returns submission versions in ascending date order (oldest first). If\nabsent, returns submission versions in descending date order (newest\nfirst)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/grading_periods": {
      "get": {
        "description": "List grading periods",
        "summary": "list_grading_periods_accounts",
        "tags": [
          "grading_periods"
        ],
        "operationId": "V1AccountsGradingPeriodsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/grading_periods": {
      "get": {
        "description": "List grading periods",
        "summary": "list_grading_periods_courses",
        "tags": [
          "grading_periods"
        ],
        "operationId": "V1CoursesGradingPeriodsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/grading_periods/{id}": {
      "get": {
        "description": "Get a single grading period",
        "summary": "get_single_grading_period",
        "tags": [
          "grading_periods"
        ],
        "operationId": "V1CoursesGradingPeriodsByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a single grading period",
        "summary": "update_single_grading_period",
        "tags": [
          "grading_periods"
        ],
        "operationId": "V1CoursesGradingPeriodsByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "grading_periods[start_date]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The date the grading period starts."
          },
          {
            "name": "grading_periods[end_date]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "no description"
          },
          {
            "name": "grading_periods[weight]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a grading period",
        "summary": "delete_grading_period_courses",
        "tags": [
          "grading_periods"
        ],
        "operationId": "V1CoursesGradingPeriodsByCourseIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/grading_periods/{id}": {
      "delete": {
        "description": "Delete a grading period",
        "summary": "delete_grading_period_accounts",
        "tags": [
          "grading_periods"
        ],
        "operationId": "V1AccountsGradingPeriodsByAccountIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/grading_standards": {
      "post": {
        "description": "Create a new grading standard",
        "summary": "create_new_grading_standard_accounts",
        "tags": [
          "grading_standards"
        ],
        "operationId": "V1AccountsGradingStandardsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The title for the Grading Standard."
          },
          {
            "name": "grading_scheme_entry[name]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name for an entry value within a GradingStandard that describes the range of the value\ne.g. A-"
          },
          {
            "name": "grading_scheme_entry[value]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The value for the name of the entry within a GradingStandard.\nThe entry represents the lower bound of the range for the entry.\nThis range includes the value up to the next entry in the GradingStandard,\nor 100 if there is no upper bound. The lowest value will have a lower bound range of 0.\ne.g. 93"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List the grading standards available in a context.",
        "summary": "list_grading_standards_available_in_context_accounts",
        "tags": [
          "grading_standards"
        ],
        "operationId": "V1AccountsGradingStandardsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/grading_standards": {
      "post": {
        "description": "Create a new grading standard",
        "summary": "create_new_grading_standard_courses",
        "tags": [
          "grading_standards"
        ],
        "operationId": "V1CoursesGradingStandardsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The title for the Grading Standard."
          },
          {
            "name": "grading_scheme_entry[name]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name for an entry value within a GradingStandard that describes the range of the value\ne.g. A-"
          },
          {
            "name": "grading_scheme_entry[value]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The value for the name of the entry within a GradingStandard.\nThe entry represents the lower bound of the range for the entry.\nThis range includes the value up to the next entry in the GradingStandard,\nor 100 if there is no upper bound. The lowest value will have a lower bound range of 0.\ne.g. 93"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List the grading standards available in a context.",
        "summary": "list_grading_standards_available_in_context_courses",
        "tags": [
          "grading_standards"
        ],
        "operationId": "V1CoursesGradingStandardsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/grading_standards/{grading_standard_id}": {
      "get": {
        "description": "Get a single grading standard in a context.",
        "summary": "get_single_grading_standard_in_context_courses",
        "tags": [
          "grading_standards"
        ],
        "operationId": "V1CoursesGradingStandardsByCourseIdAndGradingStandardIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "grading_standard_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/grading_standards/{grading_standard_id}": {
      "get": {
        "description": "Get a single grading standard in a context.",
        "summary": "get_single_grading_standard_in_context_accounts",
        "tags": [
          "grading_standards"
        ],
        "operationId": "V1AccountsGradingStandardsByAccountIdAndGradingStandardIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "grading_standard_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/group_categories": {
      "get": {
        "description": "List group categories for a context",
        "summary": "list_group_categories_for_context_accounts",
        "tags": [
          "group_categories"
        ],
        "operationId": "V1AccountsGroupCategoriesByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a Group Category",
        "summary": "create_group_category_accounts",
        "tags": [
          "group_categories"
        ],
        "operationId": "V1AccountsGroupCategoriesByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "Name of the group category"
          },
          {
            "name": "self_signup",
            "in": "formData",
            "required": false,
            "enum": [
              "enabled",
              "restricted"
            ],
            "type": "string",
            "description": "Allow students to sign up for a group themselves (Course Only).\nvalid values are:\n\"enabled\":: allows students to self sign up for any group in course\n\"restricted\":: allows students to self sign up only for groups in the\n               same section null disallows self sign up"
          },
          {
            "name": "auto_leader",
            "in": "formData",
            "required": false,
            "enum": [
              "first",
              "random"
            ],
            "type": "string",
            "description": "Assigns group leaders automatically when generating and allocating students to groups\nValid values are:\n\"first\":: the first student to be allocated to a group is the leader\n\"random\":: a random student from all members is chosen as the leader"
          },
          {
            "name": "group_limit",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Limit the maximum number of users in each group (Course Only). Requires\nself signup."
          },
          {
            "name": "sis_group_category_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The unique SIS identifier."
          },
          {
            "name": "create_group_count",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Create this number of groups (Course Only)."
          },
          {
            "name": "split_group_count",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "(Deprecated)\nCreate this number of groups, and evenly distribute students\namong them. not allowed with \"enable_self_signup\". because\nthe group assignment happens synchronously, it's recommended\nthat you instead use the assign_unassigned_members endpoint.\n(Course Only)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/group_categories": {
      "get": {
        "description": "List group categories for a context",
        "summary": "list_group_categories_for_context_courses",
        "tags": [
          "group_categories"
        ],
        "operationId": "V1CoursesGroupCategoriesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a Group Category",
        "summary": "create_group_category_courses",
        "tags": [
          "group_categories"
        ],
        "operationId": "V1CoursesGroupCategoriesByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "Name of the group category"
          },
          {
            "name": "self_signup",
            "in": "formData",
            "required": false,
            "enum": [
              "enabled",
              "restricted"
            ],
            "type": "string",
            "description": "Allow students to sign up for a group themselves (Course Only).\nvalid values are:\n\"enabled\":: allows students to self sign up for any group in course\n\"restricted\":: allows students to self sign up only for groups in the\n               same section null disallows self sign up"
          },
          {
            "name": "auto_leader",
            "in": "formData",
            "required": false,
            "enum": [
              "first",
              "random"
            ],
            "type": "string",
            "description": "Assigns group leaders automatically when generating and allocating students to groups\nValid values are:\n\"first\":: the first student to be allocated to a group is the leader\n\"random\":: a random student from all members is chosen as the leader"
          },
          {
            "name": "group_limit",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Limit the maximum number of users in each group (Course Only). Requires\nself signup."
          },
          {
            "name": "sis_group_category_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The unique SIS identifier."
          },
          {
            "name": "create_group_count",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Create this number of groups (Course Only)."
          },
          {
            "name": "split_group_count",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "(Deprecated)\nCreate this number of groups, and evenly distribute students\namong them. not allowed with \"enable_self_signup\". because\nthe group assignment happens synchronously, it's recommended\nthat you instead use the assign_unassigned_members endpoint.\n(Course Only)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/group_categories/{group_category_id}": {
      "get": {
        "description": "Get a single group category",
        "summary": "get_single_group_category",
        "tags": [
          "group_categories"
        ],
        "operationId": "V1GroupCategoriesByGroupCategoryIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_category_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a Group Category",
        "summary": "update_group_category",
        "tags": [
          "group_categories"
        ],
        "operationId": "V1GroupCategoriesByGroupCategoryIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_category_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Name of the group category"
          },
          {
            "name": "self_signup",
            "in": "formData",
            "required": false,
            "enum": [
              "enabled",
              "restricted"
            ],
            "type": "string",
            "description": "Allow students to sign up for a group themselves (Course Only).\nValid values are:\n\"enabled\":: allows students to self sign up for any group in course\n\"restricted\":: allows students to self sign up only for groups in the\n               same section null disallows self sign up"
          },
          {
            "name": "auto_leader",
            "in": "formData",
            "required": false,
            "enum": [
              "first",
              "random"
            ],
            "type": "string",
            "description": "Assigns group leaders automatically when generating and allocating students to groups\nValid values are:\n\"first\":: the first student to be allocated to a group is the leader\n\"random\":: a random student from all members is chosen as the leader"
          },
          {
            "name": "group_limit",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Limit the maximum number of users in each group (Course Only). Requires\nself signup."
          },
          {
            "name": "sis_group_category_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The unique SIS identifier."
          },
          {
            "name": "create_group_count",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Create this number of groups (Course Only)."
          },
          {
            "name": "split_group_count",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "(Deprecated)\nCreate this number of groups, and evenly distribute students\namong them. not allowed with \"enable_self_signup\". because\nthe group assignment happens synchronously, it's recommended\nthat you instead use the assign_unassigned_members endpoint.\n(Course Only)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a Group Category",
        "summary": "delete_group_category",
        "tags": [
          "group_categories"
        ],
        "operationId": "V1GroupCategoriesByGroupCategoryIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_category_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/group_categories/{group_category_id}/groups": {
      "get": {
        "description": "List groups in group category",
        "summary": "list_groups_in_group_category",
        "tags": [
          "group_categories"
        ],
        "operationId": "V1GroupCategoriesGroupsByGroupCategoryIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_category_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a group",
        "summary": "create_group_group_categories",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupCategoriesGroupsByGroupCategoryIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_category_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the group"
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A description of the group"
          },
          {
            "name": "is_public",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "whether the group is public (applies only to community groups)"
          },
          {
            "name": "join_level",
            "in": "formData",
            "required": false,
            "enum": [
              "parent_context_auto_join",
              "parent_context_request",
              "invitation_only"
            ],
            "type": "string",
            "description": "no description"
          },
          {
            "name": "storage_quota_mb",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The allowed file storage for the group, in megabytes. This parameter is\nignored if the caller does not have the manage_storage_quotas permission."
          },
          {
            "name": "sis_group_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The sis ID of the group. Must have manage_sis permission to set."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/group_categories/{group_category_id}/users": {
      "get": {
        "description": "List users in group category",
        "summary": "list_users_in_group_category",
        "tags": [
          "group_categories"
        ],
        "operationId": "V1GroupCategoriesUsersByGroupCategoryIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_category_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name or full ID of the users to match and return in the results\nlist. Must be at least 3 characters."
          },
          {
            "name": "unassigned",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set this value to true if you wish only to search unassigned users in the\ngroup category."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/group_categories/{group_category_id}/assign_unassigned_members": {
      "post": {
        "description": "Assign unassigned members",
        "summary": "assign_unassigned_members",
        "tags": [
          "group_categories"
        ],
        "operationId": "V1GroupCategoriesAssignUnassignedMembersByGroupCategoryIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_category_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "sync",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "The assigning is done asynchronously by default. If you would like to\noverride this and have the assigning done synchronously, set this value\nto true."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/groups": {
      "get": {
        "description": "List your groups",
        "summary": "list_your_groups",
        "tags": [
          "groups"
        ],
        "operationId": "V1UsersSelfGroupsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context_type",
            "in": "query",
            "required": false,
            "enum": [
              "Account",
              "Course"
            ],
            "type": "string",
            "description": "Only include groups that are in this type of context."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "tabs"
            ],
            "type": "string",
            "description": "- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/groups": {
      "get": {
        "description": "List the groups available in a context.",
        "summary": "list_groups_available_in_context_accounts",
        "tags": [
          "groups"
        ],
        "operationId": "V1AccountsGroupsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "only_own_groups",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Will only include groups that the user belongs to if this is set"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "tabs"
            ],
            "type": "string",
            "description": "- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/groups": {
      "get": {
        "description": "List the groups available in a context.",
        "summary": "list_groups_available_in_context_courses",
        "tags": [
          "groups"
        ],
        "operationId": "V1CoursesGroupsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "only_own_groups",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Will only include groups that the user belongs to if this is set"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "tabs"
            ],
            "type": "string",
            "description": "- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}": {
      "get": {
        "description": "Get a single group",
        "summary": "get_single_group",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "permissions",
              "tabs"
            ],
            "type": "string",
            "description": "- \"permissions\": Include permissions the current user has\n  for the group.\n- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Edit a group",
        "summary": "edit_group",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsByGroupIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the group"
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A description of the group"
          },
          {
            "name": "is_public",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the group is public (applies only to community groups). Currently\nyou cannot set a group back to private once it has been made public."
          },
          {
            "name": "join_level",
            "in": "formData",
            "required": false,
            "enum": [
              "parent_context_auto_join",
              "parent_context_request",
              "invitation_only"
            ],
            "type": "string",
            "description": "no description"
          },
          {
            "name": "avatar_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the attachment previously uploaded to the group that you would\nlike to use as the avatar image for this group."
          },
          {
            "name": "storage_quota_mb",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The allowed file storage for the group, in megabytes. This parameter is\nignored if the caller does not have the manage_storage_quotas permission."
          },
          {
            "name": "members",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of user ids for users you would like in the group.\nUsers not in the group will be sent invitations. Existing group\nmembers who aren't in the list will be removed from the group."
          },
          {
            "name": "sis_group_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The sis ID of the group. Must have manage_sis permission to set."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a group",
        "summary": "delete_group",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsByGroupIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups": {
      "post": {
        "description": "Create a group",
        "summary": "create_group_groups",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the group"
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A description of the group"
          },
          {
            "name": "is_public",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "whether the group is public (applies only to community groups)"
          },
          {
            "name": "join_level",
            "in": "formData",
            "required": false,
            "enum": [
              "parent_context_auto_join",
              "parent_context_request",
              "invitation_only"
            ],
            "type": "string",
            "description": "no description"
          },
          {
            "name": "storage_quota_mb",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The allowed file storage for the group, in megabytes. This parameter is\nignored if the caller does not have the manage_storage_quotas permission."
          },
          {
            "name": "sis_group_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The sis ID of the group. Must have manage_sis permission to set."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/invite": {
      "post": {
        "description": "Invite others to a group",
        "summary": "invite_others_to_group",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsInviteByGroupIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "invitees",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of email addresses to be sent invitations."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/users": {
      "get": {
        "description": "List group's users",
        "summary": "list_group_s_users",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsUsersByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name or full ID of the users to match and return in the\nresults list. Must be at least 3 characters."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "avatar_url"
            ],
            "type": "string",
            "description": "- \"avatar_url\": Include users' avatar_urls."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/preview_html": {
      "post": {
        "description": "Preview processed html",
        "summary": "preview_processed_html",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsPreviewHtmlByGroupIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "html",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The html content to process"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/activity_stream": {
      "get": {
        "description": "Group activity stream",
        "summary": "group_activity_stream",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsActivityStreamByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/activity_stream/summary": {
      "get": {
        "description": "Group activity stream summary",
        "summary": "group_activity_stream_summary",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsActivityStreamSummaryByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/permissions": {
      "get": {
        "description": "Permissions",
        "summary": "permissions",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsPermissionsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "permissions",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/memberships": {
      "get": {
        "description": "List group memberships",
        "summary": "list_group_memberships",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsMembershipsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "filter_states",
            "in": "query",
            "required": false,
            "enum": [
              "accepted",
              "invited",
              "requested"
            ],
            "type": "string",
            "description": "Only list memberships with the given workflow_states. By default it will\nreturn all memberships."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a membership",
        "summary": "create_membership",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsMembershipsByGroupIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/memberships/{membership_id}": {
      "get": {
        "description": "Get a single group membership",
        "summary": "get_single_group_membership_memberships",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsMembershipsByGroupIdAndMembershipIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "membership_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a membership",
        "summary": "update_membership_memberships",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsMembershipsByGroupIdAndMembershipIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "membership_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "workflow_state",
            "in": "formData",
            "required": false,
            "enum": [
              "accepted"
            ],
            "type": "string",
            "description": "Currently, the only allowed value is \"accepted\""
          },
          {
            "name": "moderator",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Leave a group",
        "summary": "leave_group_memberships",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsMembershipsByGroupIdAndMembershipIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "membership_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/users/{user_id}": {
      "get": {
        "description": "Get a single group membership",
        "summary": "get_single_group_membership_users",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsUsersByGroupIdAndUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a membership",
        "summary": "update_membership_users",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsUsersByGroupIdAndUserIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "workflow_state",
            "in": "formData",
            "required": false,
            "enum": [
              "accepted"
            ],
            "type": "string",
            "description": "Currently, the only allowed value is \"accepted\""
          },
          {
            "name": "moderator",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Leave a group",
        "summary": "leave_group_users",
        "tags": [
          "groups"
        ],
        "operationId": "V1GroupsUsersByGroupIdAndUserIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/jwts": {
      "post": {
        "description": "Create JWT",
        "summary": "create_jwt",
        "tags": [
          "jw_ts"
        ],
        "operationId": "V1JwtsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/jwts/refresh": {
      "post": {
        "description": "Refresh JWT",
        "summary": "refresh_jwt",
        "tags": [
          "jw_ts"
        ],
        "operationId": "V1JwtsRefreshPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "jwt",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "An existing JWT token to be refreshed. The new token will have\nthe same context and workflows as the existing token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{id}/late_policy": {
      "get": {
        "description": "Get a late policy",
        "summary": "get_late_policy",
        "tags": [
          "late_policy"
        ],
        "operationId": "V1CoursesLatePolicyByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a late policy",
        "summary": "create_late_policy",
        "tags": [
          "late_policy"
        ],
        "operationId": "V1CoursesLatePolicyByIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "late_policy[missing_submission_deduction_enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to enable the missing submission deduction late policy."
          },
          {
            "name": "late_policy[missing_submission_deduction]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "How many percentage points to deduct from a missing submission."
          },
          {
            "name": "late_policy[late_submission_deduction_enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to enable the late submission deduction late policy."
          },
          {
            "name": "late_policy[late_submission_deduction]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "How many percentage points to deduct per the late submission interval."
          },
          {
            "name": "late_policy[late_submission_interval]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The interval for late policies."
          },
          {
            "name": "late_policy[late_submission_minimum_percent_enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to enable the late submission minimum percent for a late policy."
          },
          {
            "name": "late_policy[late_submission_minimum_percent]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The minimum grade a submissions can have in percentage points."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "description": "Patch a late policy",
        "summary": "patch_late_policy",
        "tags": [
          "late_policy"
        ],
        "operationId": "V1CoursesLatePolicyByIdPatch",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "late_policy[missing_submission_deduction_enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to enable the missing submission deduction late policy."
          },
          {
            "name": "late_policy[missing_submission_deduction]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "How many percentage points to deduct from a missing submission."
          },
          {
            "name": "late_policy[late_submission_deduction_enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to enable the late submission deduction late policy."
          },
          {
            "name": "late_policy[late_submission_deduction]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "How many percentage points to deduct per the late submission interval."
          },
          {
            "name": "late_policy[late_submission_interval]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The interval for late policies."
          },
          {
            "name": "late_policy[late_submission_minimum_percent_enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to enable the late submission minimum percent for a late policy."
          },
          {
            "name": "late_policy[late_submission_minimum_percent]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The minimum grade a submissions can have in percentage points."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/live_assessments/{assessment_id}/results": {
      "post": {
        "description": "Create live assessment results",
        "summary": "create_live_assessment_results",
        "tags": [
          "live_assessments"
        ],
        "operationId": "V1CoursesLiveAssessmentsResultsByCourseIdAndAssessmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assessment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List live assessment results",
        "summary": "list_live_assessment_results",
        "tags": [
          "live_assessments"
        ],
        "operationId": "V1CoursesLiveAssessmentsResultsByCourseIdAndAssessmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assessment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If set, restrict results to those for this user"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/live_assessments": {
      "post": {
        "description": "Create or find a live assessment",
        "summary": "create_or_find_live_assessment",
        "tags": [
          "live_assessments"
        ],
        "operationId": "V1CoursesLiveAssessmentsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List live assessments",
        "summary": "list_live_assessments",
        "tags": [
          "live_assessments"
        ],
        "operationId": "V1CoursesLiveAssessmentsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/logins": {
      "get": {
        "description": "List user logins",
        "summary": "list_user_logins_accounts",
        "tags": [
          "logins"
        ],
        "operationId": "V1AccountsLoginsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a user login",
        "summary": "create_user_login",
        "tags": [
          "logins"
        ],
        "operationId": "V1AccountsLoginsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user[id]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The ID of the user to create the login for."
          },
          {
            "name": "login[unique_id]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The unique ID for the new login."
          },
          {
            "name": "login[password]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new login's password."
          },
          {
            "name": "login[sis_user_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "SIS ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account."
          },
          {
            "name": "login[integration_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Integration ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account. The Integration ID is a secondary\nidentifier useful for more complex SIS integrations."
          },
          {
            "name": "login[authentication_provider_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The authentication provider this login is associated with. Logins\nassociated with a specific provider can only be used with that provider.\nLegacy providers (LDAP, CAS, SAML) will search for logins associated with\nthem, or unassociated logins. New providers will only search for logins\nexplicitly associated with them. This can be the integer ID of the\nprovider, or the type of the provider (in which case, it will find the\nfirst matching provider)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/logins": {
      "get": {
        "description": "List user logins",
        "summary": "list_user_logins_users",
        "tags": [
          "logins"
        ],
        "operationId": "V1UsersLoginsByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/logins/{id}": {
      "put": {
        "description": "Edit a user login",
        "summary": "edit_user_login",
        "tags": [
          "logins"
        ],
        "operationId": "V1AccountsLoginsByAccountIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "login[unique_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new unique ID for the login."
          },
          {
            "name": "login[password]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new password for the login. Can only be set by an admin user if admins\nare allowed to change passwords for the account."
          },
          {
            "name": "login[sis_user_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "SIS ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account."
          },
          {
            "name": "login[integration_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Integration ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account. The Integration ID is a secondary\nidentifier useful for more complex SIS integrations."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/logins/{id}": {
      "delete": {
        "description": "Delete a user login",
        "summary": "delete_user_login",
        "tags": [
          "logins"
        ],
        "operationId": "V1UsersLoginsByUserIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students": {
      "get": {
        "description": "List students selected for moderation",
        "summary": "list_students_selected_for_moderation",
        "tags": [
          "moderated_grading"
        ],
        "operationId": "V1CoursesAssignmentsModeratedStudentsByCourseIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Select students for moderation",
        "summary": "select_students_for_moderation",
        "tags": [
          "moderated_grading"
        ],
        "operationId": "V1CoursesAssignmentsModeratedStudentsByCourseIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "student_ids",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "user ids for students to select for moderation"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/bulk_select": {
      "put": {
        "description": "Bulk select provisional grades",
        "summary": "bulk_select_provisional_grades",
        "tags": [
          "moderated_grading"
        ],
        "operationId": "V1CoursesAssignmentsProvisionalGradesBulkSelectByCourseIdAndAssignmentIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/status": {
      "get": {
        "description": "Show provisional grade status for a student",
        "summary": "show_provisional_grade_status_for_student",
        "tags": [
          "moderated_grading"
        ],
        "operationId": "V1CoursesAssignmentsProvisionalGradesStatusByCourseIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "student_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the student to show the status for"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/select": {
      "put": {
        "description": "Select provisional grade",
        "summary": "select_provisional_grade",
        "tags": [
          "moderated_grading"
        ],
        "operationId": "V1CoursesAssignmentsProvisionalGradesProvisionalGradeIdSelectByCourseIdAndAssignmentIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "provisional_grade_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/publish": {
      "post": {
        "description": "Publish provisional grades for an assignment",
        "summary": "publish_provisional_grades_for_assignment",
        "tags": [
          "moderated_grading"
        ],
        "operationId": "V1CoursesAssignmentsProvisionalGradesPublishByCourseIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_provisional_grades/status": {
      "get": {
        "description": "Show provisional grade status for a student",
        "summary": "show_provisional_grade_status_for_student",
        "tags": [
          "moderated_grading"
        ],
        "operationId": "V1CoursesAssignmentsAnonymousProvisionalGradesStatusByCourseIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "anonymous_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The id of the student to show the status for"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/modules": {
      "get": {
        "description": "List modules",
        "summary": "list_modules",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "items",
              "content_details"
            ],
            "type": "string",
            "description": "- \"items\": Return module items inline if possible.\n  This parameter suggests that Canvas return module items directly\n  in the Module object JSON, to avoid having to make separate API\n  requests for each module when enumerating modules and items. Canvas\n  is free to omit 'items' for any particular module if it deems them\n  too numerous to return inline. Callers must be prepared to use the\n  {api:ContextModuleItemsApiController#index List Module Items API}\n  if items are not returned.\n- \"content_details\": Requires include['items']. Returns additional\n  details with module items specific to their associated content items.\n  Includes standard lock information for each item."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name of the modules (and module items, if include['items'] is\nspecified) to match and return."
          },
          {
            "name": "student_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns module completion information for the student with this id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a module",
        "summary": "create_module",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module[name]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The name of the module"
          },
          {
            "name": "module[unlock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The date the module will unlock"
          },
          {
            "name": "module[position]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The position of this module in the course (1-based)"
          },
          {
            "name": "module[require_sequential_progress]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether module items must be unlocked in order"
          },
          {
            "name": "module[prerequisite_module_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of Modules that must be completed before this one is unlocked.\nPrerequisite modules must precede this module (i.e. have a lower position\nvalue), otherwise they will be ignored"
          },
          {
            "name": "module[publish_final_grade]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to publish the student's final grade for the course upon\ncompletion of this module."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/modules/{id}": {
      "get": {
        "description": "Show module",
        "summary": "show_module",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "items",
              "content_details"
            ],
            "type": "string",
            "description": "- \"items\": Return module items inline if possible.\n  This parameter suggests that Canvas return module items directly\n  in the Module object JSON, to avoid having to make separate API\n  requests for each module when enumerating modules and items. Canvas\n  is free to omit 'items' for any particular module if it deems them\n  too numerous to return inline. Callers must be prepared to use the\n  {api:ContextModuleItemsApiController#index List Module Items API}\n  if items are not returned.\n- \"content_details\": Requires include['items']. Returns additional\n  details with module items specific to their associated content items.\n  Includes standard lock information for each item."
          },
          {
            "name": "student_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns module completion information for the student with this id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a module",
        "summary": "update_module",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the module"
          },
          {
            "name": "module[unlock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The date the module will unlock"
          },
          {
            "name": "module[position]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The position of the module in the course (1-based)"
          },
          {
            "name": "module[require_sequential_progress]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether module items must be unlocked in order"
          },
          {
            "name": "module[prerequisite_module_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of Modules that must be completed before this one is unlocked\nPrerequisite modules must precede this module (i.e. have a lower position\nvalue), otherwise they will be ignored"
          },
          {
            "name": "module[publish_final_grade]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether to publish the student's final grade for the course upon\ncompletion of this module."
          },
          {
            "name": "module[published]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the module is published and visible to students"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete module",
        "summary": "delete_module",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesByCourseIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/modules/{id}/relock": {
      "put": {
        "description": "Re-lock module progressions",
        "summary": "re_lock_module_progressions",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesRelockByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/modules/{module_id}/items": {
      "get": {
        "description": "List module items",
        "summary": "list_module_items",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesItemsByCourseIdAndModuleIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "content_details"
            ],
            "type": "string",
            "description": "If included, will return additional details specific to the content\nassociated with each item. Refer to the {api:Modules:Module%20Item Module\nItem specification} for more details.\nIncludes standard lock information for each item."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial title of the items to match and return."
          },
          {
            "name": "student_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns module completion information for the student with this id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a module item",
        "summary": "create_module_item",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesItemsByCourseIdAndModuleIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module_item[type]",
            "in": "formData",
            "required": true,
            "enum": [
              "File",
              "Page",
              "Discussion",
              "Assignment",
              "Quiz",
              "SubHeader",
              "ExternalUrl",
              "ExternalTool"
            ],
            "type": "string",
            "description": "The type of content linked to the item"
          },
          {
            "name": "module_item[content_id]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The id of the content to link to the module item. Required, except for\n'ExternalUrl', 'Page', and 'SubHeader' types."
          },
          {
            "name": "module_item[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the module item and associated content"
          },
          {
            "name": "module_item[position]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The position of this item in the module (1-based)."
          },
          {
            "name": "module_item[indent]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "0-based indent level; module items may be indented to show a hierarchy"
          },
          {
            "name": "module_item[page_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Suffix for the linked wiki page (e.g. 'front-page'). Required for 'Page'\ntype."
          },
          {
            "name": "module_item[external_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "External url that the item points to. [Required for 'ExternalUrl' and\n'ExternalTool' types."
          },
          {
            "name": "module_item[new_tab]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the external tool opens in a new tab. Only applies to\n'ExternalTool' type."
          },
          {
            "name": "module_item[completion_requirement][type]",
            "in": "formData",
            "required": false,
            "enum": [
              "must_view",
              "must_contribute",
              "must_submit"
            ],
            "type": "string",
            "description": "Completion requirement for this module item.\n\"must_view\": Applies to all item types\n\"must_contribute\": Only applies to \"Assignment\", \"Discussion\", and \"Page\" types\n\"must_submit\", \"min_score\": Only apply to \"Assignment\" and \"Quiz\" types\nInapplicable types will be ignored"
          },
          {
            "name": "module_item[completion_requirement][min_score]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Minimum score required to complete. Required for completion_requirement\ntype 'min_score'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/modules/{module_id}/items/{id}": {
      "get": {
        "description": "Show module item",
        "summary": "show_module_item",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesItemsIdByCourseIdAndModuleIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "content_details"
            ],
            "type": "string",
            "description": "If included, will return additional details specific to the content\nassociated with this item. Refer to the {api:Modules:Module%20Item Module\nItem specification} for more details.\nIncludes standard lock information for each item."
          },
          {
            "name": "student_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns module completion information for the student with this id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a module item",
        "summary": "update_module_item",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesItemsIdByCourseIdAndModuleIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module_item[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the module item"
          },
          {
            "name": "module_item[position]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The position of this item in the module (1-based)"
          },
          {
            "name": "module_item[indent]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "0-based indent level; module items may be indented to show a hierarchy"
          },
          {
            "name": "module_item[external_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "External url that the item points to. Only applies to 'ExternalUrl' type."
          },
          {
            "name": "module_item[new_tab]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the external tool opens in a new tab. Only applies to\n'ExternalTool' type."
          },
          {
            "name": "module_item[completion_requirement][type]",
            "in": "formData",
            "required": false,
            "enum": [
              "must_view",
              "must_contribute",
              "must_submit"
            ],
            "type": "string",
            "description": "Completion requirement for this module item.\n\"must_view\": Applies to all item types\n\"must_contribute\": Only applies to \"Assignment\", \"Discussion\", and \"Page\" types\n\"must_submit\", \"min_score\": Only apply to \"Assignment\" and \"Quiz\" types\nInapplicable types will be ignored"
          },
          {
            "name": "module_item[completion_requirement][min_score]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Minimum score required to complete, Required for completion_requirement\ntype 'min_score'."
          },
          {
            "name": "module_item[published]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the module item is published and visible to students."
          },
          {
            "name": "module_item[module_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Move this item to another module by specifying the target module id here.\nThe target module must be in the same course."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete module item",
        "summary": "delete_module_item",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesItemsIdByCourseIdAndModuleIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/modules/{module_id}/items/{id}/select_mastery_path": {
      "post": {
        "description": "Select a mastery path",
        "summary": "select_mastery_path",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesItemsIdSelectMasteryPathByCourseIdAndModuleIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_set_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Assignment set chosen, as specified in the mastery_paths portion of the\ncontext module item response"
          },
          {
            "name": "student_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Which student the selection applies to.  If not specified, current user is\nimplied."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/modules/{module_id}/items/{id}/done": {
      "put": {
        "description": "Mark module item as done/not done",
        "summary": "mark_module_item_as_done_not_done",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesItemsIdDoneByCourseIdAndModuleIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/module_item_sequence": {
      "get": {
        "description": "Get module item sequence",
        "summary": "get_module_item_sequence",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModuleItemSequenceByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "asset_type",
            "in": "query",
            "required": false,
            "enum": [
              "ModuleItem",
              "File",
              "Page",
              "Discussion",
              "Assignment",
              "Quiz",
              "ExternalTool"
            ],
            "type": "string",
            "description": "The type of asset to find module sequence information for. Use the ModuleItem if it is known\n(e.g., the user navigated from a module item), since this will avoid ambiguity if the asset\nappears more than once in the module sequence."
          },
          {
            "name": "asset_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the asset (or the url in the case of a Page)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/modules/{module_id}/items/{id}/mark_read": {
      "post": {
        "description": "Mark module item read",
        "summary": "mark_module_item_read",
        "tags": [
          "modules"
        ],
        "operationId": "V1CoursesModulesItemsIdMarkReadByCourseIdAndModuleIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "module_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences": {
      "get": {
        "description": "List preferences",
        "summary": "list_preferences_communication_channel_id",
        "tags": [
          "notification_preferences"
        ],
        "operationId": "V1UsersCommunicationChannelsNotificationPreferencesByUserIdAndCommunicationChannelIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "communication_channel_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences": {
      "get": {
        "description": "List preferences",
        "summary": "list_preferences_type",
        "tags": [
          "notification_preferences"
        ],
        "operationId": "V1UsersCommunicationChannelsAddressNotificationPreferencesByUserIdAndTypeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preference_categories": {
      "get": {
        "description": "List of preference categories",
        "summary": "list_of_preference_categories",
        "tags": [
          "notification_preferences"
        ],
        "operationId": "V1UsersCommunicationChannelsNotificationPreferenceCategoriesByUserIdAndCommunicationChannelIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "communication_channel_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences/{notification}": {
      "get": {
        "description": "Get a preference",
        "summary": "get_preference_communication_channel_id",
        "tags": [
          "notification_preferences"
        ],
        "operationId": "V1UsersCommunicationChannelsNotificationPreferencesNotificationByUserIdAndCommunicationChannelIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "communication_channel_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "notification",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences/{notification}": {
      "get": {
        "description": "Get a preference",
        "summary": "get_preference_type",
        "tags": [
          "notification_preferences"
        ],
        "operationId": "V1UsersCommunicationChannelsAddressNotificationPreferencesNotificationByUserIdAndTypeGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "notification",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences/{notification}": {
      "put": {
        "description": "Update a preference",
        "summary": "update_preference_communication_channel_id",
        "tags": [
          "notification_preferences"
        ],
        "operationId": "V1UsersSelfCommunicationChannelsNotificationPreferencesByCommunicationChannelIdAndNotificationPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "communication_channel_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "notification",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "notification_preferences[frequency]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The desired frequency for this notification"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/communication_channels/{type}/{address}/notification_preferences/{notification}": {
      "put": {
        "description": "Update a preference",
        "summary": "update_preference_type",
        "tags": [
          "notification_preferences"
        ],
        "operationId": "V1UsersSelfCommunicationChannelsNotificationPreferencesNotificationByTypeAndAddressPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "notification",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "notification_preferences[frequency]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The desired frequency for this notification"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/communication_channels/{communication_channel_id}/notification_preference_categories/{category}": {
      "put": {
        "description": "Update preferences by category",
        "summary": "update_preferences_by_category",
        "tags": [
          "notification_preferences"
        ],
        "operationId": "V1UsersSelfCommunicationChannelsNotificationPreferenceCategoriesByCommunicationChannelIdAndCategoryPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "communication_channel_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "category",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the category. Must be parameterized (e.g. The category \"Course Content\" should be \"course_content\")"
          },
          {
            "name": "notification_preferences[frequency]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The desired frequency for each notification in the category"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences": {
      "put": {
        "description": "Update multiple preferences",
        "summary": "update_multiple_preferences_communication_channel_id",
        "tags": [
          "notification_preferences"
        ],
        "operationId": "V1UsersSelfCommunicationChannelsNotificationPreferencesByCommunicationChannelIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "communication_channel_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "notification_preferences[<X>][frequency]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The desired frequency for <X> notification"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/communication_channels/{type}/{address}/notification_preferences": {
      "put": {
        "description": "Update multiple preferences",
        "summary": "update_multiple_preferences_type",
        "tags": [
          "notification_preferences"
        ],
        "operationId": "V1UsersSelfCommunicationChannelsNotificationPreferencesByTypeAndAddressPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "notification_preferences[<X>][frequency]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The desired frequency for <X> notification"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report": {
      "post": {
        "description": "Create an Originality Report",
        "summary": "create_originality_report",
        "tags": [
          "originality_reports"
        ],
        "operationId": "LtiAssignmentsSubmissionsOriginalityReportByAssignmentIdAndSubmissionIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "originality_report[originality_score]",
            "in": "formData",
            "required": true,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "A number between 0 and 100 representing the measure of the\nspecified file's originality."
          },
          {
            "name": "originality_report[file_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the file being given an originality score. Required\nif creating a report associated with a file."
          },
          {
            "name": "originality_report[originality_report_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The URL where the originality report for the specified\nfile may be found."
          },
          {
            "name": "originality_report[originality_report_file_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the file within Canvas that contains the originality\nreport for the submitted file provided in the request URL."
          },
          {
            "name": "originality_report[tool_setting][resource_type_code]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The resource type code of the resource handler Canvas should use for the\nLTI launch for viewing originality reports. If set Canvas will launch\nto the message with type 'basic-lti-launch-request' in the specified\nresource handler rather than using the originality_report_url."
          },
          {
            "name": "originality_report[tool_setting][resource_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The URL Canvas should launch to when showing an LTI originality report.\nNote that this value is inferred from the specified resource handler's\nmessage \"path\" value (See `resource_type_code`) unless\nit is specified. If this parameter is used a `resource_type_code`\nmust also be specified."
          },
          {
            "name": "originality_report[workflow_state]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "May be set to \"pending\", \"error\", or \"scored\". If an originality score\nis provided a workflow state of \"scored\" will be inferred."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}": {
      "put": {
        "description": "Edit an Originality Report",
        "summary": "edit_originality_report_submissions",
        "tags": [
          "originality_reports"
        ],
        "operationId": "LtiAssignmentsSubmissionsOriginalityReportIdByAssignmentIdAndSubmissionIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "originality_report[originality_score]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "A number between 0 and 100 representing the measure of the\nspecified file's originality."
          },
          {
            "name": "originality_report[originality_report_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The URL where the originality report for the specified\nfile may be found."
          },
          {
            "name": "originality_report[originality_report_file_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the file within Canvas that contains the originality\nreport for the submitted file provided in the request URL."
          },
          {
            "name": "originality_report[tool_setting][resource_type_code]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The resource type code of the resource handler Canvas should use for the\nLTI launch for viewing originality reports. If set Canvas will launch\nto the message with type 'basic-lti-launch-request' in the specified\nresource handler rather than using the originality_report_url."
          },
          {
            "name": "originality_report[tool_setting][resource_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The URL Canvas should launch to when showing an LTI originality report.\nNote that this value is inferred from the specified resource handler's\nmessage \"path\" value (See `resource_type_code`) unless\nit is specified. If this parameter is used a `resource_type_code`\nmust also be specified."
          },
          {
            "name": "originality_report[workflow_state]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "May be set to \"pending\", \"error\", or \"scored\". If an originality score\nis provided a workflow state of \"scored\" will be inferred."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Show an Originality Report",
        "summary": "show_originality_report_submissions",
        "tags": [
          "originality_reports"
        ],
        "operationId": "LtiAssignmentsSubmissionsOriginalityReportIdByAssignmentIdAndSubmissionIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/lti/assignments/{assignment_id}/files/{file_id}/originality_report": {
      "put": {
        "description": "Edit an Originality Report",
        "summary": "edit_originality_report_files",
        "tags": [
          "originality_reports"
        ],
        "operationId": "LtiAssignmentsFilesOriginalityReportByAssignmentIdAndFileIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "originality_report[originality_score]",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "A number between 0 and 100 representing the measure of the\nspecified file's originality."
          },
          {
            "name": "originality_report[originality_report_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The URL where the originality report for the specified\nfile may be found."
          },
          {
            "name": "originality_report[originality_report_file_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the file within Canvas that contains the originality\nreport for the submitted file provided in the request URL."
          },
          {
            "name": "originality_report[tool_setting][resource_type_code]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The resource type code of the resource handler Canvas should use for the\nLTI launch for viewing originality reports. If set Canvas will launch\nto the message with type 'basic-lti-launch-request' in the specified\nresource handler rather than using the originality_report_url."
          },
          {
            "name": "originality_report[tool_setting][resource_url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The URL Canvas should launch to when showing an LTI originality report.\nNote that this value is inferred from the specified resource handler's\nmessage \"path\" value (See `resource_type_code`) unless\nit is specified. If this parameter is used a `resource_type_code`\nmust also be specified."
          },
          {
            "name": "originality_report[workflow_state]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "May be set to \"pending\", \"error\", or \"scored\". If an originality score\nis provided a workflow state of \"scored\" will be inferred."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Show an Originality Report",
        "summary": "show_originality_report_files",
        "tags": [
          "originality_reports"
        ],
        "operationId": "LtiAssignmentsFilesOriginalityReportByAssignmentIdAndFileIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/global/root_outcome_group": {
      "get": {
        "description": "Redirect to root outcome group for context",
        "summary": "redirect_to_root_outcome_group_for_context_global",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1GlobalRootOutcomeGroupGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/root_outcome_group": {
      "get": {
        "description": "Redirect to root outcome group for context",
        "summary": "redirect_to_root_outcome_group_for_context_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsRootOutcomeGroupByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/root_outcome_group": {
      "get": {
        "description": "Redirect to root outcome group for context",
        "summary": "redirect_to_root_outcome_group_for_context_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesRootOutcomeGroupByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/outcome_groups": {
      "get": {
        "description": "Get all outcome groups for context",
        "summary": "get_all_outcome_groups_for_context_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_groups": {
      "get": {
        "description": "Get all outcome groups for context",
        "summary": "get_all_outcome_groups_for_context_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/outcome_group_links": {
      "get": {
        "description": "Get all outcome links for context",
        "summary": "get_all_outcome_links_for_context_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupLinksByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_style",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information."
          },
          {
            "name": "outcome_group_style",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The detail level of the outcome groups. Defaults to \"abbrev\".\nSpecify \"full\" for more information."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_group_links": {
      "get": {
        "description": "Get all outcome links for context",
        "summary": "get_all_outcome_links_for_context_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupLinksByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_style",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information."
          },
          {
            "name": "outcome_group_style",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The detail level of the outcome groups. Defaults to \"abbrev\".\nSpecify \"full\" for more information."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/global/outcome_groups/{id}": {
      "get": {
        "description": "Show an outcome group",
        "summary": "show_outcome_group_global",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1GlobalOutcomeGroupsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update an outcome group",
        "summary": "update_outcome_group_global",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1GlobalOutcomeGroupsByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new outcome group title."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new outcome group description."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard."
          },
          {
            "name": "parent_outcome_group_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the new parent outcome group."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete an outcome group",
        "summary": "delete_outcome_group_global",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1GlobalOutcomeGroupsByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/outcome_groups/{id}": {
      "get": {
        "description": "Show an outcome group",
        "summary": "show_outcome_group_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupsByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update an outcome group",
        "summary": "update_outcome_group_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupsByAccountIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new outcome group title."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new outcome group description."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard."
          },
          {
            "name": "parent_outcome_group_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the new parent outcome group."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete an outcome group",
        "summary": "delete_outcome_group_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupsByAccountIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_groups/{id}": {
      "get": {
        "description": "Show an outcome group",
        "summary": "show_outcome_group_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupsByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update an outcome group",
        "summary": "update_outcome_group_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupsByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new outcome group title."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new outcome group description."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard."
          },
          {
            "name": "parent_outcome_group_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the new parent outcome group."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete an outcome group",
        "summary": "delete_outcome_group_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupsByCourseIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/global/outcome_groups/{id}/outcomes": {
      "get": {
        "description": "List linked outcomes",
        "summary": "list_linked_outcomes_global",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1GlobalOutcomeGroupsOutcomesByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_style",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create/link an outcome",
        "summary": "create_link_outcome_global",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1GlobalOutcomeGroupsOutcomesByIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the existing outcome to link."
          },
          {
            "name": "move_from",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the old outcome group. Only used if outcome_id is present."
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title of the new outcome. Required if outcome_id is absent."
          },
          {
            "name": "display_name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The description of the new outcome."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard."
          },
          {
            "name": "mastery_points",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The mastery threshold for the embedded rubric criterion."
          },
          {
            "name": "ratings[description]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The description of a rating level for the embedded rubric criterion."
          },
          {
            "name": "ratings[points]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The points corresponding to a rating level for the embedded rubric criterion."
          },
          {
            "name": "calculation_method",
            "in": "formData",
            "required": false,
            "enum": [
              "decaying_average",
              "n_mastery",
              "latest",
              "highest"
            ],
            "type": "string",
            "description": "The new calculation method.  Defaults to \"decaying_average\""
          },
          {
            "name": "calculation_int",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/outcome_groups/{id}/outcomes": {
      "get": {
        "description": "List linked outcomes",
        "summary": "list_linked_outcomes_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupsOutcomesByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_style",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create/link an outcome",
        "summary": "create_link_outcome_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupsOutcomesByAccountIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the existing outcome to link."
          },
          {
            "name": "move_from",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the old outcome group. Only used if outcome_id is present."
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title of the new outcome. Required if outcome_id is absent."
          },
          {
            "name": "display_name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The description of the new outcome."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard."
          },
          {
            "name": "mastery_points",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The mastery threshold for the embedded rubric criterion."
          },
          {
            "name": "ratings[description]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The description of a rating level for the embedded rubric criterion."
          },
          {
            "name": "ratings[points]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The points corresponding to a rating level for the embedded rubric criterion."
          },
          {
            "name": "calculation_method",
            "in": "formData",
            "required": false,
            "enum": [
              "decaying_average",
              "n_mastery",
              "latest",
              "highest"
            ],
            "type": "string",
            "description": "The new calculation method.  Defaults to \"decaying_average\""
          },
          {
            "name": "calculation_int",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_groups/{id}/outcomes": {
      "get": {
        "description": "List linked outcomes",
        "summary": "list_linked_outcomes_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupsOutcomesByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_style",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create/link an outcome",
        "summary": "create_link_outcome_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupsOutcomesByCourseIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the existing outcome to link."
          },
          {
            "name": "move_from",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the old outcome group. Only used if outcome_id is present."
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title of the new outcome. Required if outcome_id is absent."
          },
          {
            "name": "display_name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The description of the new outcome."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard."
          },
          {
            "name": "mastery_points",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The mastery threshold for the embedded rubric criterion."
          },
          {
            "name": "ratings[description]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The description of a rating level for the embedded rubric criterion."
          },
          {
            "name": "ratings[points]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The points corresponding to a rating level for the embedded rubric criterion."
          },
          {
            "name": "calculation_method",
            "in": "formData",
            "required": false,
            "enum": [
              "decaying_average",
              "n_mastery",
              "latest",
              "highest"
            ],
            "type": "string",
            "description": "The new calculation method.  Defaults to \"decaying_average\""
          },
          {
            "name": "calculation_int",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/global/outcome_groups/{id}/outcomes/{outcome_id}": {
      "put": {
        "description": "Create/link an outcome",
        "summary": "create_link_outcome_global_outcome_id",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1GlobalOutcomeGroupsOutcomesByIdAndOutcomeIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the existing outcome to link."
          },
          {
            "name": "move_from",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the old outcome group. Only used if outcome_id is present."
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title of the new outcome. Required if outcome_id is absent."
          },
          {
            "name": "display_name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The description of the new outcome."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard."
          },
          {
            "name": "mastery_points",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The mastery threshold for the embedded rubric criterion."
          },
          {
            "name": "ratings[description]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The description of a rating level for the embedded rubric criterion."
          },
          {
            "name": "ratings[points]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The points corresponding to a rating level for the embedded rubric criterion."
          },
          {
            "name": "calculation_method",
            "in": "formData",
            "required": false,
            "enum": [
              "decaying_average",
              "n_mastery",
              "latest",
              "highest"
            ],
            "type": "string",
            "description": "The new calculation method.  Defaults to \"decaying_average\""
          },
          {
            "name": "calculation_int",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Unlink an outcome",
        "summary": "unlink_outcome_global",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1GlobalOutcomeGroupsOutcomesByIdAndOutcomeIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}": {
      "put": {
        "description": "Create/link an outcome",
        "summary": "create_link_outcome_accounts_outcome_id",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupsOutcomesOutcomeIdByAccountIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the existing outcome to link."
          },
          {
            "name": "move_from",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the old outcome group. Only used if outcome_id is present."
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title of the new outcome. Required if outcome_id is absent."
          },
          {
            "name": "display_name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The description of the new outcome."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard."
          },
          {
            "name": "mastery_points",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The mastery threshold for the embedded rubric criterion."
          },
          {
            "name": "ratings[description]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The description of a rating level for the embedded rubric criterion."
          },
          {
            "name": "ratings[points]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The points corresponding to a rating level for the embedded rubric criterion."
          },
          {
            "name": "calculation_method",
            "in": "formData",
            "required": false,
            "enum": [
              "decaying_average",
              "n_mastery",
              "latest",
              "highest"
            ],
            "type": "string",
            "description": "The new calculation method.  Defaults to \"decaying_average\""
          },
          {
            "name": "calculation_int",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Unlink an outcome",
        "summary": "unlink_outcome_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupsOutcomesOutcomeIdByAccountIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}": {
      "put": {
        "description": "Create/link an outcome",
        "summary": "create_link_outcome_courses_outcome_id",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupsOutcomesOutcomeIdByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the existing outcome to link."
          },
          {
            "name": "move_from",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the old outcome group. Only used if outcome_id is present."
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title of the new outcome. Required if outcome_id is absent."
          },
          {
            "name": "display_name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The description of the new outcome."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard."
          },
          {
            "name": "mastery_points",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The mastery threshold for the embedded rubric criterion."
          },
          {
            "name": "ratings[description]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The description of a rating level for the embedded rubric criterion."
          },
          {
            "name": "ratings[points]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The points corresponding to a rating level for the embedded rubric criterion."
          },
          {
            "name": "calculation_method",
            "in": "formData",
            "required": false,
            "enum": [
              "decaying_average",
              "n_mastery",
              "latest",
              "highest"
            ],
            "type": "string",
            "description": "The new calculation method.  Defaults to \"decaying_average\""
          },
          {
            "name": "calculation_int",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\". Defaults to 65"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Unlink an outcome",
        "summary": "unlink_outcome_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupsOutcomesOutcomeIdByCourseIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "outcome_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/global/outcome_groups/{id}/subgroups": {
      "get": {
        "description": "List subgroups",
        "summary": "list_subgroups_global",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1GlobalOutcomeGroupsSubgroupsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a subgroup",
        "summary": "create_subgroup_global",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1GlobalOutcomeGroupsSubgroupsByIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The title of the new outcome group."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The description of the new outcome group."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/outcome_groups/{id}/subgroups": {
      "get": {
        "description": "List subgroups",
        "summary": "list_subgroups_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupsSubgroupsByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a subgroup",
        "summary": "create_subgroup_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupsSubgroupsByAccountIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The title of the new outcome group."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The description of the new outcome group."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_groups/{id}/subgroups": {
      "get": {
        "description": "List subgroups",
        "summary": "list_subgroups_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupsSubgroupsByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a subgroup",
        "summary": "create_subgroup_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupsSubgroupsByCourseIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The title of the new outcome group."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The description of the new outcome group."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/global/outcome_groups/{id}/import": {
      "post": {
        "description": "Import an outcome group",
        "summary": "import_outcome_group_global",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1GlobalOutcomeGroupsImportByIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "source_outcome_group_id",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the source outcome group."
          },
          {
            "name": "async",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, perform action asynchronously.  In that case, this endpoint\nwill return a Progress object instead of an OutcomeGroup.\nUse the {api:ProgressController#show progress endpoint}\nto query the status of the operation.  The imported outcome group id\nand url will be returned in the results of the Progress object\nas \"outcome_group_id\" and \"outcome_group_url\""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/outcome_groups/{id}/import": {
      "post": {
        "description": "Import an outcome group",
        "summary": "import_outcome_group_accounts",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1AccountsOutcomeGroupsImportByAccountIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "source_outcome_group_id",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the source outcome group."
          },
          {
            "name": "async",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, perform action asynchronously.  In that case, this endpoint\nwill return a Progress object instead of an OutcomeGroup.\nUse the {api:ProgressController#show progress endpoint}\nto query the status of the operation.  The imported outcome group id\nand url will be returned in the results of the Progress object\nas \"outcome_group_id\" and \"outcome_group_url\""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_groups/{id}/import": {
      "post": {
        "description": "Import an outcome group",
        "summary": "import_outcome_group_courses",
        "tags": [
          "outcome_groups"
        ],
        "operationId": "V1CoursesOutcomeGroupsImportByCourseIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "source_outcome_group_id",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the source outcome group."
          },
          {
            "name": "async",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, perform action asynchronously.  In that case, this endpoint\nwill return a Progress object instead of an OutcomeGroup.\nUse the {api:ProgressController#show progress endpoint}\nto query the status of the operation.  The imported outcome group id\nand url will be returned in the results of the Progress object\nas \"outcome_group_id\" and \"outcome_group_url\""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/outcome_imports": {
      "post": {
        "description": "Import Outcomes",
        "summary": "import_outcomes_accounts",
        "tags": [
          "outcome_imports"
        ],
        "operationId": "V1AccountsOutcomeImportsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "import_type",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Choose the data format for reading outcome data. With a standard Canvas\ninstall, this option can only be 'instructure_csv', and if unprovided,\nwill be assumed to be so. Can be part of the query string."
          },
          {
            "name": "attachment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "There are two ways to post outcome import data - either via a\nmultipart/form-data form-field-style attachment, or via a non-multipart\nraw post request.\n\n'attachment' is required for multipart/form-data style posts. Assumed to\nbe outcome data from a file upload form field named 'attachment'.\n\nExamples:\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'\n\nIf you decide to do a raw post, you can skip the 'attachment' argument,\nbut you will then be required to provide a suitable Content-Type header.\nYou are encouraged to also provide the 'extension' argument.\n\nExamples:\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'"
          },
          {
            "name": "extension",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Recommended for raw post request style imports. This field will be used to\ndistinguish between csv and other file format extensions that\nwould usually be provided with the filename in the multipart post request\nscenario. If not provided, this value will be inferred from the\nContent-Type, falling back to csv-file format if all else fails."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_imports": {
      "post": {
        "description": "Import Outcomes",
        "summary": "import_outcomes_courses",
        "tags": [
          "outcome_imports"
        ],
        "operationId": "V1CoursesOutcomeImportsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "import_type",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Choose the data format for reading outcome data. With a standard Canvas\ninstall, this option can only be 'instructure_csv', and if unprovided,\nwill be assumed to be so. Can be part of the query string."
          },
          {
            "name": "attachment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "There are two ways to post outcome import data - either via a\nmultipart/form-data form-field-style attachment, or via a non-multipart\nraw post request.\n\n'attachment' is required for multipart/form-data style posts. Assumed to\nbe outcome data from a file upload form field named 'attachment'.\n\nExamples:\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'\n\nIf you decide to do a raw post, you can skip the 'attachment' argument,\nbut you will then be required to provide a suitable Content-Type header.\nYou are encouraged to also provide the 'extension' argument.\n\nExamples:\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'"
          },
          {
            "name": "extension",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Recommended for raw post request style imports. This field will be used to\ndistinguish between csv and other file format extensions that\nwould usually be provided with the filename in the multipart post request\nscenario. If not provided, this value will be inferred from the\nContent-Type, falling back to csv-file format if all else fails."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/outcome_imports/{id}": {
      "get": {
        "description": "Get Outcome import status",
        "summary": "get_outcome_import_status_accounts",
        "tags": [
          "outcome_imports"
        ],
        "operationId": "V1AccountsOutcomeImportsByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_imports/{id}": {
      "get": {
        "description": "Get Outcome import status",
        "summary": "get_outcome_import_status_courses",
        "tags": [
          "outcome_imports"
        ],
        "operationId": "V1CoursesOutcomeImportsByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_results": {
      "get": {
        "description": "Get outcome results",
        "summary": "get_outcome_results",
        "tags": [
          "outcome_results"
        ],
        "operationId": "V1CoursesOutcomeResultsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "If specified, only the users whose ids are given will be included in the\nresults. SIS ids can be used, prefixed by \"sis_user_id:\".\nIt is an error to specify an id for a user who is not a student in\nthe context."
          },
          {
            "name": "outcome_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "If specified, only the outcomes whose ids are given will be included in the\nresults. it is an error to specify an id for an outcome which is not linked\nto the context."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "[String, \"alignments\"|\"outcomes\"|\"outcomes.alignments\"|\"outcome_groups\"|\"outcome_links\"|\"outcome_paths\"|\"users\"]\nSpecify additional collections to be side loaded with the result.\n\"alignments\" includes only the alignments referenced by the returned\nresults.\n\"outcomes.alignments\" includes all alignments referenced by outcomes in the\ncontext."
          },
          {
            "name": "include_hidden",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, results that are hidden from the learning mastery gradebook and student rollup\nscores will be included"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_rollups": {
      "get": {
        "description": "Get outcome result rollups",
        "summary": "get_outcome_result_rollups",
        "tags": [
          "outcome_results"
        ],
        "operationId": "V1CoursesOutcomeRollupsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "aggregate",
            "in": "query",
            "required": false,
            "enum": [
              "course"
            ],
            "type": "string",
            "description": "If specified, instead of returning one rollup for each user, all the user\nrollups will be combined into one rollup for the course that will contain\nthe average (or median, see below) rollup score for each outcome."
          },
          {
            "name": "aggregate_stat",
            "in": "query",
            "required": false,
            "enum": [
              "mean",
              "median"
            ],
            "type": "string",
            "description": "If aggregate rollups requested, then this value determines what\nstatistic is used for the aggregate. Defaults to \"mean\" if this value\nis not specified."
          },
          {
            "name": "user_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "If specified, only the users whose ids are given will be included in the\nresults or used in an aggregate result. it is an error to specify an id\nfor a user who is not a student in the context"
          },
          {
            "name": "outcome_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "If specified, only the outcomes whose ids are given will be included in the\nresults. it is an error to specify an id for an outcome which is not linked\nto the context."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "[String, \"courses\"|\"outcomes\"|\"outcomes.alignments\"|\"outcome_groups\"|\"outcome_links\"|\"outcome_paths\"|\"users\"]\nSpecify additional collections to be side loaded with the result."
          },
          {
            "name": "exclude",
            "in": "query",
            "required": false,
            "enum": [
              "missing_user_rollups"
            ],
            "type": "string",
            "description": "Specify additional values to exclude. \"missing_user_rollups\" excludes\nrollups for users without results."
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "enum": [
              "student",
              "outcome"
            ],
            "type": "string",
            "description": "If specified, sorts outcome result rollups. \"student\" sorting will sort\nby a user's sortable name. \"outcome\" sorting will sort by the given outcome's\nrollup score. The latter requires specifying the \"sort_outcome_id\" parameter.\nBy default, the sort order is ascending."
          },
          {
            "name": "sort_outcome_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If outcome sorting requested, then this determines which outcome to use\nfor rollup score sorting."
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "If sorting requested, then this allows changing the default sort order of\nascending to descending."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/outcomes/{id}": {
      "get": {
        "description": "Show an outcome",
        "summary": "show_outcome",
        "tags": [
          "outcomes"
        ],
        "operationId": "V1OutcomesByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update an outcome",
        "summary": "update_outcome",
        "tags": [
          "outcomes"
        ],
        "operationId": "V1OutcomesByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new outcome title."
          },
          {
            "name": "display_name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names."
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The new outcome description."
          },
          {
            "name": "vendor_guid",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A custom GUID for the learning standard."
          },
          {
            "name": "mastery_points",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The new mastery threshold for the embedded rubric criterion."
          },
          {
            "name": "ratings[description]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The description of a new rating level for the embedded rubric criterion."
          },
          {
            "name": "ratings[points]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The points corresponding to a new rating level for the embedded rubric\ncriterion."
          },
          {
            "name": "calculation_method",
            "in": "formData",
            "required": false,
            "enum": [
              "decaying_average",
              "n_mastery",
              "latest",
              "highest"
            ],
            "type": "string",
            "description": "The new calculation method."
          },
          {
            "name": "calculation_int",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/outcome_alignments": {
      "get": {
        "description": "Get aligned assignments for an outcome in a course for a particular student",
        "summary": "get_aligned_assignments_for_outcome_in_course_for_particular_student",
        "tags": [
          "outcomes"
        ],
        "operationId": "V1CoursesOutcomeAlignmentsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the course"
          },
          {
            "name": "student_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the student"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/front_page": {
      "get": {
        "description": "Show front page",
        "summary": "show_front_page_courses",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesFrontPageByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update/create front page",
        "summary": "update_create_front_page_courses",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesFrontPageByCourseIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "wiki_page[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result."
          },
          {
            "name": "wiki_page[body]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The content for the new page."
          },
          {
            "name": "wiki_page[editing_roles]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user."
          },
          {
            "name": "wiki_page[notify_of_update]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether participants should be notified when this page changes."
          },
          {
            "name": "wiki_page[published]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the page is published (true) or draft state (false)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/front_page": {
      "get": {
        "description": "Show front page",
        "summary": "show_front_page_groups",
        "tags": [
          "pages"
        ],
        "operationId": "V1GroupsFrontPageByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update/create front page",
        "summary": "update_create_front_page_groups",
        "tags": [
          "pages"
        ],
        "operationId": "V1GroupsFrontPageByGroupIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "wiki_page[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result."
          },
          {
            "name": "wiki_page[body]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The content for the new page."
          },
          {
            "name": "wiki_page[editing_roles]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user."
          },
          {
            "name": "wiki_page[notify_of_update]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether participants should be notified when this page changes."
          },
          {
            "name": "wiki_page[published]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the page is published (true) or draft state (false)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/pages/{url}/duplicate": {
      "post": {
        "description": "Duplicate page",
        "summary": "duplicate_page",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesPagesDuplicateByCourseIdAndUrlPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/pages": {
      "get": {
        "description": "List pages",
        "summary": "list_pages_courses",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesPagesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "title",
              "created_at",
              "updated_at"
            ],
            "type": "string",
            "description": "Sort results by this field."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "The sorting order. Defaults to 'asc'."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial title of the pages to match and return."
          },
          {
            "name": "published",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, include only published paqes. If false, exclude published\npages. If not present, do not filter on published status."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create page",
        "summary": "create_page_courses",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesPagesByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "wiki_page[title]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The title for the new page."
          },
          {
            "name": "wiki_page[body]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The content for the new page."
          },
          {
            "name": "wiki_page[editing_roles]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user."
          },
          {
            "name": "wiki_page[notify_of_update]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether participants should be notified when this page changes."
          },
          {
            "name": "wiki_page[published]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the page is published (true) or draft state (false)."
          },
          {
            "name": "wiki_page[front_page]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set an unhidden page as the front page (if true)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/pages": {
      "get": {
        "description": "List pages",
        "summary": "list_pages_groups",
        "tags": [
          "pages"
        ],
        "operationId": "V1GroupsPagesByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "title",
              "created_at",
              "updated_at"
            ],
            "type": "string",
            "description": "Sort results by this field."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "The sorting order. Defaults to 'asc'."
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial title of the pages to match and return."
          },
          {
            "name": "published",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, include only published paqes. If false, exclude published\npages. If not present, do not filter on published status."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create page",
        "summary": "create_page_groups",
        "tags": [
          "pages"
        ],
        "operationId": "V1GroupsPagesByGroupIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "wiki_page[title]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The title for the new page."
          },
          {
            "name": "wiki_page[body]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The content for the new page."
          },
          {
            "name": "wiki_page[editing_roles]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user."
          },
          {
            "name": "wiki_page[notify_of_update]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether participants should be notified when this page changes."
          },
          {
            "name": "wiki_page[published]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the page is published (true) or draft state (false)."
          },
          {
            "name": "wiki_page[front_page]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set an unhidden page as the front page (if true)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/pages/{url}": {
      "get": {
        "description": "Show page",
        "summary": "show_page_courses",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesPagesByCourseIdAndUrlGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update/create page",
        "summary": "update_create_page_courses",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesPagesByCourseIdAndUrlPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "wiki_page[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result."
          },
          {
            "name": "wiki_page[body]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The content for the new page."
          },
          {
            "name": "wiki_page[editing_roles]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user."
          },
          {
            "name": "wiki_page[notify_of_update]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether participants should be notified when this page changes."
          },
          {
            "name": "wiki_page[published]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the page is published (true) or draft state (false)."
          },
          {
            "name": "wiki_page[front_page]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set an unhidden page as the front page (if true)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete page",
        "summary": "delete_page_courses",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesPagesByCourseIdAndUrlDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/pages/{url}": {
      "get": {
        "description": "Show page",
        "summary": "show_page_groups",
        "tags": [
          "pages"
        ],
        "operationId": "V1GroupsPagesByGroupIdAndUrlGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update/create page",
        "summary": "update_create_page_groups",
        "tags": [
          "pages"
        ],
        "operationId": "V1GroupsPagesByGroupIdAndUrlPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "wiki_page[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result."
          },
          {
            "name": "wiki_page[body]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The content for the new page."
          },
          {
            "name": "wiki_page[editing_roles]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user."
          },
          {
            "name": "wiki_page[notify_of_update]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether participants should be notified when this page changes."
          },
          {
            "name": "wiki_page[published]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the page is published (true) or draft state (false)."
          },
          {
            "name": "wiki_page[front_page]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set an unhidden page as the front page (if true)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete page",
        "summary": "delete_page_groups",
        "tags": [
          "pages"
        ],
        "operationId": "V1GroupsPagesByGroupIdAndUrlDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/pages/{url}/revisions": {
      "get": {
        "description": "List revisions",
        "summary": "list_revisions_courses",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesPagesRevisionsByCourseIdAndUrlGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/pages/{url}/revisions": {
      "get": {
        "description": "List revisions",
        "summary": "list_revisions_groups",
        "tags": [
          "pages"
        ],
        "operationId": "V1GroupsPagesRevisionsByGroupIdAndUrlGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/pages/{url}/revisions/latest": {
      "get": {
        "description": "Show revision",
        "summary": "show_revision_courses_latest",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesPagesRevisionsLatestByCourseIdAndUrlGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "summary",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If set, exclude page content from results"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/pages/{url}/revisions/latest": {
      "get": {
        "description": "Show revision",
        "summary": "show_revision_groups_latest",
        "tags": [
          "pages"
        ],
        "operationId": "V1GroupsPagesRevisionsLatestByGroupIdAndUrlGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "summary",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If set, exclude page content from results"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/pages/{url}/revisions/{revision_id}": {
      "get": {
        "description": "Show revision",
        "summary": "show_revision_courses_revision_id",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesPagesRevisionsRevisionIdByCourseIdAndUrlGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "revision_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "summary",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If set, exclude page content from results"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Revert to revision",
        "summary": "revert_to_revision_courses",
        "tags": [
          "pages"
        ],
        "operationId": "V1CoursesPagesRevisionsRevisionIdByCourseIdAndUrlPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "revision_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The revision to revert to (use the\n{api:WikiPagesApiController#revisions List Revisions API} to see\navailable revisions)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/pages/{url}/revisions/{revision_id}": {
      "get": {
        "description": "Show revision",
        "summary": "show_revision_groups_revision_id",
        "tags": [
          "pages"
        ],
        "operationId": "V1GroupsPagesRevisionsRevisionIdByGroupIdAndUrlGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "revision_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "summary",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If set, exclude page content from results"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Revert to revision",
        "summary": "revert_to_revision_groups",
        "tags": [
          "pages"
        ],
        "operationId": "V1GroupsPagesRevisionsRevisionIdByGroupIdAndUrlPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "revision_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The revision to revert to (use the\n{api:WikiPagesApiController#revisions List Revisions API} to see\navailable revisions)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/peer_reviews": {
      "get": {
        "description": "Get all Peer Reviews",
        "summary": "get_all_peer_reviews_courses_peer_reviews",
        "tags": [
          "peer_reviews"
        ],
        "operationId": "V1CoursesAssignmentsPeerReviewsByCourseIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission_comments",
              "user"
            ],
            "type": "string",
            "description": "Associations to include with the peer review."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{section_id}/assignments/{assignment_id}/peer_reviews": {
      "get": {
        "description": "Get all Peer Reviews",
        "summary": "get_all_peer_reviews_sections_peer_reviews",
        "tags": [
          "peer_reviews"
        ],
        "operationId": "V1SectionsAssignmentsPeerReviewsBySectionIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission_comments",
              "user"
            ],
            "type": "string",
            "description": "Associations to include with the peer review."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews": {
      "get": {
        "description": "Get all Peer Reviews",
        "summary": "get_all_peer_reviews_courses_submissions",
        "tags": [
          "peer_reviews"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsSubmissionIdPeerReviewsByCourseIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission_comments",
              "user"
            ],
            "type": "string",
            "description": "Associations to include with the peer review."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create Peer Review",
        "summary": "create_peer_review_courses",
        "tags": [
          "peer_reviews"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsSubmissionIdPeerReviewsByCourseIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "user_id to assign as reviewer on this assignment"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete Peer Review",
        "summary": "delete_peer_review_courses",
        "tags": [
          "peer_reviews"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsSubmissionIdPeerReviewsByCourseIdAndAssignmentIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "user_id to delete as reviewer on this assignment"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews": {
      "get": {
        "description": "Get all Peer Reviews",
        "summary": "get_all_peer_reviews_sections_submissions",
        "tags": [
          "peer_reviews"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionsSubmissionIdPeerReviewsBySectionIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission_comments",
              "user"
            ],
            "type": "string",
            "description": "Associations to include with the peer review."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create Peer Review",
        "summary": "create_peer_review_sections",
        "tags": [
          "peer_reviews"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionsSubmissionIdPeerReviewsBySectionIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "user_id to assign as reviewer on this assignment"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete Peer Review",
        "summary": "delete_peer_review_sections",
        "tags": [
          "peer_reviews"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionsSubmissionIdPeerReviewsBySectionIdAndAssignmentIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "user_id to delete as reviewer on this assignment"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/lti/assignments/{assignment_id}": {
      "get": {
        "description": "Get a single assignment (lti)",
        "summary": "get_single_assignment_lti",
        "tags": [
          "plagiarism_detection_platform_assignments"
        ],
        "operationId": "LtiAssignmentsByAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The id of the user. Can be a Canvas or LTI id for the user."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/lti/users/{id}": {
      "get": {
        "description": "Get a single user (lti)",
        "summary": "get_single_user_lti",
        "tags": [
          "plagiarism_detection_platform_users"
        ],
        "operationId": "LtiUsersByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/lti/groups/{group_id}/users": {
      "get": {
        "description": "Get all users in a group (lti)",
        "summary": "get_all_users_in_group_lti",
        "tags": [
          "plagiarism_detection_platform_users"
        ],
        "operationId": "LtiGroupsUsersByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/lti/assignments/{assignment_id}/submissions/{submission_id}": {
      "get": {
        "description": "Get a single submission",
        "summary": "get_single_submission",
        "tags": [
          "plagiarism_detection_submissions"
        ],
        "operationId": "LtiAssignmentsSubmissionsByAssignmentIdAndSubmissionIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/lti/assignments/{assignment_id}/submissions/{submission_id}/history": {
      "get": {
        "description": "Get the history of a single submission",
        "summary": "get_history_of_single_submission",
        "tags": [
          "plagiarism_detection_submissions"
        ],
        "operationId": "LtiAssignmentsSubmissionsHistoryByAssignmentIdAndSubmissionIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/planner/items": {
      "get": {
        "description": "List planner items",
        "summary": "list_planner_items",
        "tags": [
          "planner"
        ],
        "operationId": "V1PlannerItemsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only return items starting from the given date.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ."
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only return items up to the given date.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ."
          },
          {
            "name": "context_codes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of context codes of courses and/or groups whose items you want to see.\nIf not specified, defaults to all contexts associated to the current user.\nNote that concluded courses will be ignored unless specified in the includes[]\nparameter. The format of this field is the context type, followed by an underscore,\nfollowed by the context id. For example: course_42, group_123"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "enum": [
              "new_activity"
            ],
            "type": "string",
            "description": "Only return items that have new or unread activity"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/planner_notes": {
      "get": {
        "description": "List planner notes",
        "summary": "list_planner_notes",
        "tags": [
          "planner"
        ],
        "operationId": "V1PlannerNotesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only return notes with todo dates since the start_date (inclusive).\nNo default. The value should be formatted as: yyyy-mm-dd or\nISO 8601 YYYY-MM-DDTHH:MM:SSZ."
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only return notes with todo dates before the end_date (inclusive).\nNo default. The value should be formatted as: yyyy-mm-dd or\nISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date and start_date are both specified and equivalent,\nthen only notes with todo dates on that day are returned."
          },
          {
            "name": "context_codes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of context codes of courses whose notes you want to see.\nIf not specified, defaults to all contexts that the user belongs to.\nThe format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42\nIncluding a code matching the user's own context code (e.g. user_1)\nwill include notes that are not associated with any particular course."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a planner note",
        "summary": "create_planner_note",
        "tags": [
          "planner"
        ],
        "operationId": "V1PlannerNotesPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title of the planner note."
          },
          {
            "name": "details",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Text of the planner note."
          },
          {
            "name": "todo_date",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The date where this planner note should appear in the planner.\nThe value should be formatted as: yyyy-mm-dd."
          },
          {
            "name": "course_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the course to associate with the planner note. The caller must be able to view the course in order to\nassociate it with a planner note."
          },
          {
            "name": "linked_object_type",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The type of a learning object to link to this planner note. Must be used in conjunction wtih linked_object_id\nand course_id. Valid linked_object_type values are:\n'announcement', 'assignment', 'discussion_topic', 'wiki_page', 'quiz'"
          },
          {
            "name": "linked_object_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of a learning object to link to this planner note. Must be used in conjunction with linked_object_type\nand course_id. The object must be in the same course as specified by course_id. If the title argument is not\nprovided, the planner note will use the learning object's title as its title. Only one planner note may be\nlinked to a specific learning object."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/planner_notes/{id}": {
      "get": {
        "description": "Show a planner note",
        "summary": "show_planner_note",
        "tags": [
          "planner"
        ],
        "operationId": "V1PlannerNotesByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a planner note",
        "summary": "update_planner_note",
        "tags": [
          "planner"
        ],
        "operationId": "V1PlannerNotesByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "title",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The title of the planner note."
          },
          {
            "name": "details",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Text of the planner note."
          },
          {
            "name": "todo_date",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The date where this planner note should appear in the planner.\nThe value should be formatted as: yyyy-mm-dd."
          },
          {
            "name": "course_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the course to associate with the planner note. The caller must be able to view the course in order to\nassociate it with a planner note. Use a null or empty value to remove a planner note from a course. Note that if\nthe planner note is linked to a learning object, its course_id cannot be changed."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a planner note",
        "summary": "delete_planner_note",
        "tags": [
          "planner"
        ],
        "operationId": "V1PlannerNotesByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/planner/overrides": {
      "get": {
        "description": "List planner overrides",
        "summary": "list_planner_overrides",
        "tags": [
          "planner"
        ],
        "operationId": "V1PlannerOverridesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a planner override",
        "summary": "create_planner_override",
        "tags": [
          "planner"
        ],
        "operationId": "V1PlannerOverridesPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "plannable_type",
            "in": "formData",
            "required": true,
            "enum": [
              "announcement",
              "assignment",
              "discussion_topic",
              "quiz",
              "wiki_page",
              "planner_note"
            ],
            "type": "string",
            "description": "Type of the item that you are overriding in the planner"
          },
          {
            "name": "plannable_id",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "ID of the item that you are overriding in the planner"
          },
          {
            "name": "marked_complete",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If this is true, the item will show in the planner as completed"
          },
          {
            "name": "dismissed",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If this is true, the item will not show in the opportunities list"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/planner/overrides/{id}": {
      "get": {
        "description": "Show a planner override",
        "summary": "show_planner_override",
        "tags": [
          "planner"
        ],
        "operationId": "V1PlannerOverridesByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a planner override",
        "summary": "update_planner_override",
        "tags": [
          "planner"
        ],
        "operationId": "V1PlannerOverridesByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "marked_complete",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "determines whether the planner item is marked as completed"
          },
          {
            "name": "dismissed",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "determines whether the planner item shows in the opportunities list"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a planner override",
        "summary": "delete_planner_override",
        "tags": [
          "planner"
        ],
        "operationId": "V1PlannerOverridesByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/polls/{poll_id}/poll_sessions": {
      "get": {
        "description": "List poll sessions for a poll",
        "summary": "list_poll_sessions_for_poll",
        "tags": [
          "poll_sessions"
        ],
        "operationId": "V1PollsPollSessionsByPollIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a single poll session",
        "summary": "create_single_poll_session",
        "tags": [
          "poll_sessions"
        ],
        "operationId": "V1PollsPollSessionsByPollIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "poll_sessions[course_id]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The id of the course this session is associated with."
          },
          {
            "name": "poll_sessions[course_section_id]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The id of the course section this session is associated with."
          },
          {
            "name": "poll_sessions[has_public_results]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "Whether or not results are viewable by students."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/polls/{poll_id}/poll_sessions/{id}": {
      "get": {
        "description": "Get the results for a single poll session",
        "summary": "get_results_for_single_poll_session",
        "tags": [
          "poll_sessions"
        ],
        "operationId": "V1PollsPollSessionsByPollIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a single poll session",
        "summary": "update_single_poll_session",
        "tags": [
          "poll_sessions"
        ],
        "operationId": "V1PollsPollSessionsByPollIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "poll_sessions[course_id]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The id of the course this session is associated with."
          },
          {
            "name": "poll_sessions[course_section_id]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The id of the course section this session is associated with."
          },
          {
            "name": "poll_sessions[has_public_results]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "Whether or not results are viewable by students."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a poll session",
        "summary": "delete_poll_session",
        "tags": [
          "poll_sessions"
        ],
        "operationId": "V1PollsPollSessionsByPollIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/polls/{poll_id}/poll_sessions/{id}/open": {
      "get": {
        "description": "Open a poll session",
        "summary": "open_poll_session",
        "tags": [
          "poll_sessions"
        ],
        "operationId": "V1PollsPollSessionsOpenByPollIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/polls/{poll_id}/poll_sessions/{id}/close": {
      "get": {
        "description": "Close an opened poll session",
        "summary": "close_opened_poll_session",
        "tags": [
          "poll_sessions"
        ],
        "operationId": "V1PollsPollSessionsCloseByPollIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/poll_sessions/opened": {
      "get": {
        "description": "List opened poll sessions",
        "summary": "list_opened_poll_sessions",
        "tags": [
          "poll_sessions"
        ],
        "operationId": "V1PollSessionsOpenedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/poll_sessions/closed": {
      "get": {
        "description": "List closed poll sessions",
        "summary": "list_closed_poll_sessions",
        "tags": [
          "poll_sessions"
        ],
        "operationId": "V1PollSessionsClosedGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/polls/{poll_id}/poll_choices": {
      "get": {
        "description": "List poll choices in a poll",
        "summary": "list_poll_choices_in_poll",
        "tags": [
          "poll_choices"
        ],
        "operationId": "V1PollsPollChoicesByPollIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a single poll choice",
        "summary": "create_single_poll_choice",
        "tags": [
          "poll_choices"
        ],
        "operationId": "V1PollsPollChoicesByPollIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "poll_choices[text]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The descriptive text of the poll choice."
          },
          {
            "name": "poll_choices[is_correct]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "Whether this poll choice is considered correct or not. Defaults to false."
          },
          {
            "name": "poll_choices[position]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The order this poll choice should be returned in the context it's sibling poll choices."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/polls/{poll_id}/poll_choices/{id}": {
      "get": {
        "description": "Get a single poll choice",
        "summary": "get_single_poll_choice",
        "tags": [
          "poll_choices"
        ],
        "operationId": "V1PollsPollChoicesByPollIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a single poll choice",
        "summary": "update_single_poll_choice",
        "tags": [
          "poll_choices"
        ],
        "operationId": "V1PollsPollChoicesByPollIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "poll_choices[text]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The descriptive text of the poll choice."
          },
          {
            "name": "poll_choices[is_correct]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "Whether this poll choice is considered correct or not.  Defaults to false."
          },
          {
            "name": "poll_choices[position]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The order this poll choice should be returned in the context it's sibling poll choices."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a poll choice",
        "summary": "delete_poll_choice",
        "tags": [
          "poll_choices"
        ],
        "operationId": "V1PollsPollChoicesByPollIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions/{id}": {
      "get": {
        "description": "Get a single poll submission",
        "summary": "get_single_poll_submission",
        "tags": [
          "poll_submissions"
        ],
        "operationId": "V1PollsPollSessionsPollSubmissionsIdByPollIdAndPollSessionIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "poll_session_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions": {
      "post": {
        "description": "Create a single poll submission",
        "summary": "create_single_poll_submission",
        "tags": [
          "poll_submissions"
        ],
        "operationId": "V1PollsPollSessionsPollSubmissionsByPollIdAndPollSessionIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "poll_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "poll_session_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "poll_submissions[poll_choice_id]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The chosen poll choice for this submission."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/polls": {
      "get": {
        "description": "List polls",
        "summary": "list_polls",
        "tags": [
          "polls"
        ],
        "operationId": "V1PollsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a single poll",
        "summary": "create_single_poll",
        "tags": [
          "polls"
        ],
        "operationId": "V1PollsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "polls[question]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The title of the poll."
          },
          {
            "name": "polls[description]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A brief description or instructions for the poll."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/polls/{id}": {
      "get": {
        "description": "Get a single poll",
        "summary": "get_single_poll",
        "tags": [
          "polls"
        ],
        "operationId": "V1PollsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a single poll",
        "summary": "update_single_poll",
        "tags": [
          "polls"
        ],
        "operationId": "V1PollsByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "polls[question]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The title of the poll."
          },
          {
            "name": "polls[description]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A brief description or instructions for the poll."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a poll",
        "summary": "delete_poll",
        "tags": [
          "polls"
        ],
        "operationId": "V1PollsByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/outcome_proficiency": {
      "post": {
        "description": "Create/update proficiency ratings",
        "summary": "create_update_proficiency_ratings",
        "tags": [
          "proficiency_ratings"
        ],
        "operationId": "V1AccountsOutcomeProficiencyByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "ratings[description]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The description of the rating level."
          },
          {
            "name": "ratings[points]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The non-negative number of points of the rating level. Points across ratings should be strictly decreasing in value."
          },
          {
            "name": "ratings[mastery]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Indicates the rating level where mastery is first achieved. Only one rating in a proficiency should be marked for mastery."
          },
          {
            "name": "ratings[color]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The color associated with the rating level. Should be a hex color code like '00FFFF'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Get proficiency ratings",
        "summary": "get_proficiency_ratings",
        "tags": [
          "proficiency_ratings"
        ],
        "operationId": "V1AccountsOutcomeProficiencyByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/progress/{id}": {
      "get": {
        "description": "Query progress",
        "summary": "query_progress",
        "tags": [
          "progress"
        ],
        "operationId": "V1ProgressByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/assignment_overrides": {
      "get": {
        "description": "Retrieve assignment-overridden dates for quizzes",
        "summary": "retrieve_assignment_overridden_dates_for_quizzes",
        "tags": [
          "quiz_assignment_overrides"
        ],
        "operationId": "V1CoursesQuizzesAssignmentOverridesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_assignment_overrides[0][quiz_ids]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "An array of quiz IDs. If omitted, overrides for all quizzes available to\nthe operating user will be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/extensions": {
      "post": {
        "description": "Set extensions for student quiz submissions",
        "summary": "set_extensions_for_student_quiz_submissions",
        "tags": [
          "quiz_extensions"
        ],
        "operationId": "V1CoursesQuizzesExtensionsByCourseIdAndQuizIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_extensions[user_id]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ID of the user we want to add quiz extensions for."
          },
          {
            "name": "quiz_extensions[extra_attempts]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Number of times the student is allowed to re-take the quiz over the\nmultiple-attempt limit. This is limited to 1000 attempts or less."
          },
          {
            "name": "quiz_extensions[extra_time]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The number of extra minutes to allow for all attempts. This will\nadd to the existing time limit on the submission. This is limited to\n10080 minutes (1 week)"
          },
          {
            "name": "quiz_extensions[manually_unlocked]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "Allow the student to take the quiz even if it's locked for\neveryone else."
          },
          {
            "name": "quiz_extensions[extend_from_now]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The number of minutes to extend the quiz from the current time. This is\nmutually exclusive to extend_from_end_at. This is limited to 1440\nminutes (24 hours)"
          },
          {
            "name": "quiz_extensions[extend_from_end_at]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The number of minutes to extend the quiz beyond the quiz's current\nending time. This is mutually exclusive to extend_from_now. This is\nlimited to 1440 minutes (24 hours)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/ip_filters": {
      "get": {
        "description": "Get available quiz IP filters.",
        "summary": "get_available_quiz_ip_filters",
        "tags": [
          "quiz_ip_filters"
        ],
        "operationId": "V1CoursesQuizzesIpFiltersByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}": {
      "get": {
        "description": "Get a single quiz group",
        "summary": "get_single_quiz_group",
        "tags": [
          "quiz_question_groups"
        ],
        "operationId": "V1CoursesQuizzesGroupsIdByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a question group",
        "summary": "update_question_group",
        "tags": [
          "quiz_question_groups"
        ],
        "operationId": "V1CoursesQuizzesGroupsIdByCourseIdAndQuizIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_groups[name]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the question group."
          },
          {
            "name": "quiz_groups[pick_count]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The number of questions to randomly select for this group."
          },
          {
            "name": "quiz_groups[question_points]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The number of points to assign to each question in the group."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a question group",
        "summary": "delete_question_group",
        "tags": [
          "quiz_question_groups"
        ],
        "operationId": "V1CoursesQuizzesGroupsIdByCourseIdAndQuizIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/groups": {
      "post": {
        "description": "Create a question group",
        "summary": "create_question_group",
        "tags": [
          "quiz_question_groups"
        ],
        "operationId": "V1CoursesQuizzesGroupsByCourseIdAndQuizIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_groups[name]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the question group."
          },
          {
            "name": "quiz_groups[pick_count]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The number of questions to randomly select for this group."
          },
          {
            "name": "quiz_groups[question_points]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The number of points to assign to each question in the group."
          },
          {
            "name": "quiz_groups[assessment_question_bank_id]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The id of the assessment question bank to pull questions from."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}/reorder": {
      "post": {
        "description": "Reorder question groups",
        "summary": "reorder_question_groups",
        "tags": [
          "quiz_question_groups"
        ],
        "operationId": "V1CoursesQuizzesGroupsIdReorderByCourseIdAndQuizIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "order[id]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The associated item's unique identifier"
          },
          {
            "name": "order[type]",
            "in": "formData",
            "required": false,
            "enum": [
              "question"
            ],
            "type": "string",
            "description": "The type of item is always 'question' for a group"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/questions": {
      "get": {
        "description": "List questions in a quiz or a submission",
        "summary": "list_questions_in_quiz_or_submission",
        "tags": [
          "quiz_questions"
        ],
        "operationId": "V1CoursesQuizzesQuestionsByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_submission_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If specified, the endpoint will return the questions that were presented\nfor that submission. This is useful if the quiz has been modified after\nthe submission was created and the latest quiz version's set of questions\ndoes not match the submission's.\nNOTE: you must specify quiz_submission_attempt as well if you specify this\nparameter."
          },
          {
            "name": "quiz_submission_attempt",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The attempt of the submission you want the questions for."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a single quiz question",
        "summary": "create_single_quiz_question",
        "tags": [
          "quiz_questions"
        ],
        "operationId": "V1CoursesQuizzesQuestionsByCourseIdAndQuizIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "question[question_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the question."
          },
          {
            "name": "question[question_text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text of the question."
          },
          {
            "name": "question[quiz_group_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the quiz group to assign the question to."
          },
          {
            "name": "question[question_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "calculated_question",
              "essay_question",
              "file_upload_question",
              "fill_in_multiple_blanks_question",
              "matching_question",
              "multiple_answers_question",
              "multiple_choice_question",
              "multiple_dropdowns_question",
              "numerical_question",
              "short_answer_question",
              "text_only_question",
              "true_false_question"
            ],
            "type": "string",
            "description": "The type of question. Multiple optional fields depend upon the type of question to be used."
          },
          {
            "name": "question[position]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The order in which the question will be displayed in the quiz in relation to other questions."
          },
          {
            "name": "question[points_possible]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum amount of points received for answering this question correctly."
          },
          {
            "name": "question[correct_comments]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The comment to display if the student answers the question correctly."
          },
          {
            "name": "question[incorrect_comments]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The comment to display if the student answers incorrectly."
          },
          {
            "name": "question[neutral_comments]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The comment to display regardless of how the student answered."
          },
          {
            "name": "question[text_after_answers]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "question[answers]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}": {
      "get": {
        "description": "Get a single quiz question",
        "summary": "get_single_quiz_question",
        "tags": [
          "quiz_questions"
        ],
        "operationId": "V1CoursesQuizzesQuestionsIdByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The quiz question unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update an existing quiz question",
        "summary": "update_existing_quiz_question",
        "tags": [
          "quiz_questions"
        ],
        "operationId": "V1CoursesQuizzesQuestionsIdByCourseIdAndQuizIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The associated quiz's unique identifier."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The quiz question's unique identifier."
          },
          {
            "name": "question[question_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the question."
          },
          {
            "name": "question[question_text]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The text of the question."
          },
          {
            "name": "question[quiz_group_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the quiz group to assign the question to."
          },
          {
            "name": "question[question_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "calculated_question",
              "essay_question",
              "file_upload_question",
              "fill_in_multiple_blanks_question",
              "matching_question",
              "multiple_answers_question",
              "multiple_choice_question",
              "multiple_dropdowns_question",
              "numerical_question",
              "short_answer_question",
              "text_only_question",
              "true_false_question"
            ],
            "type": "string",
            "description": "The type of question. Multiple optional fields depend upon the type of question to be used."
          },
          {
            "name": "question[position]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The order in which the question will be displayed in the quiz in relation to other questions."
          },
          {
            "name": "question[points_possible]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum amount of points received for answering this question correctly."
          },
          {
            "name": "question[correct_comments]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The comment to display if the student answers the question correctly."
          },
          {
            "name": "question[incorrect_comments]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The comment to display if the student answers incorrectly."
          },
          {
            "name": "question[neutral_comments]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The comment to display regardless of how the student answered."
          },
          {
            "name": "question[text_after_answers]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "question[answers]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a quiz question",
        "summary": "delete_quiz_question",
        "tags": [
          "quiz_questions"
        ],
        "operationId": "V1CoursesQuizzesQuestionsIdByCourseIdAndQuizIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The associated quiz's unique identifier"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The quiz question's unique identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/reports": {
      "get": {
        "description": "Retrieve all quiz reports",
        "summary": "retrieve_all_quiz_reports",
        "tags": [
          "quiz_reports"
        ],
        "operationId": "V1CoursesQuizzesReportsByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "includes_all_versions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Whether to retrieve reports that consider all the submissions or only\nthe most recent. Defaults to false, ignored for item_analysis reports."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a quiz report",
        "summary": "create_quiz_report",
        "tags": [
          "quiz_reports"
        ],
        "operationId": "V1CoursesQuizzesReportsByCourseIdAndQuizIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_report[report_type]",
            "in": "formData",
            "required": true,
            "enum": [
              "student_analysis",
              "item_analysis"
            ],
            "type": "string",
            "description": "The type of report to be generated."
          },
          {
            "name": "quiz_report[includes_all_versions]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the report should consider all submissions or only the most\nrecent. Defaults to false, ignored for item_analysis."
          },
          {
            "name": "include",
            "in": "formData",
            "required": false,
            "enum": [
              "file",
              "progress"
            ],
            "type": "string",
            "description": "Whether the output should include documents for the file and/or progress\nobjects associated with this report. (Note: JSON-API only)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}": {
      "get": {
        "description": "Get a quiz report",
        "summary": "get_quiz_report",
        "tags": [
          "quiz_reports"
        ],
        "operationId": "V1CoursesQuizzesReportsIdByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "file",
              "progress"
            ],
            "type": "string",
            "description": "Whether the output should include documents for the file and/or progress\nobjects associated with this report. (Note: JSON-API only)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Abort the generation of a report, or remove a previously generated one",
        "summary": "abort_generation_of_report_or_remove_previously_generated_one",
        "tags": [
          "quiz_reports"
        ],
        "operationId": "V1CoursesQuizzesReportsIdByCourseIdAndQuizIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/statistics": {
      "get": {
        "description": "Fetching the latest quiz statistics",
        "summary": "fetching_latest_quiz_statistics",
        "tags": [
          "quiz_statistics"
        ],
        "operationId": "V1CoursesQuizzesStatisticsByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "all_versions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Whether the statistics report should include all submissions attempts."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events": {
      "post": {
        "description": "Submit captured events",
        "summary": "submit_captured_events",
        "tags": [
          "quiz_submission_events"
        ],
        "operationId": "V1CoursesQuizzesSubmissionsIdEventsByCourseIdAndQuizIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_submission_events",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The submission events to be recorded"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Retrieve captured events",
        "summary": "retrieve_captured_events",
        "tags": [
          "quiz_submission_events"
        ],
        "operationId": "V1CoursesQuizzesSubmissionsIdEventsByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "attempt",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The specific submission attempt to look up the events for. If unspecified,\nthe latest attempt will be used."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/self/files": {
      "post": {
        "description": "Upload a file",
        "summary": "upload_file",
        "tags": [
          "quiz_submission_files"
        ],
        "operationId": "V1CoursesQuizzesSubmissionsSelfFilesByCourseIdAndQuizIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the quiz submission file"
          },
          {
            "name": "on_duplicate",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "How to handle duplicate names"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/quiz_submissions/{quiz_submission_id}/questions": {
      "get": {
        "description": "Get all quiz submission questions.",
        "summary": "get_all_quiz_submission_questions",
        "tags": [
          "quiz_submission_questions"
        ],
        "operationId": "V1QuizSubmissionsQuestionsByQuizSubmissionIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "quiz_submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "quiz_question"
            ],
            "type": "string",
            "description": "Associations to include with the quiz submission question."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Answering questions",
        "summary": "answering_questions",
        "tags": [
          "quiz_submission_questions"
        ],
        "operationId": "V1QuizSubmissionsQuestionsByQuizSubmissionIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "quiz_submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "attempt",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The attempt number of the quiz submission being taken. Note that this\nmust be the latest attempt index, as questions for earlier attempts can\nnot be modified."
          },
          {
            "name": "validation_token",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The unique validation token you received when the Quiz Submission was\ncreated."
          },
          {
            "name": "access_code",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Access code for the Quiz, if any."
          },
          {
            "name": "quiz_questions",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set of question IDs and the answer value.\n\nSee {Appendix: Question Answer Formats} for the accepted answer formats\nfor each question type."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/flag": {
      "put": {
        "description": "Flagging a question.",
        "summary": "flagging_question",
        "tags": [
          "quiz_submission_questions"
        ],
        "operationId": "V1QuizSubmissionsQuestionsFlagByQuizSubmissionIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "quiz_submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "attempt",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The attempt number of the quiz submission being taken. Note that this\nmust be the latest attempt index, as questions for earlier attempts can\nnot be modified."
          },
          {
            "name": "validation_token",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The unique validation token you received when the Quiz Submission was\ncreated."
          },
          {
            "name": "access_code",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Access code for the Quiz, if any."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/unflag": {
      "put": {
        "description": "Unflagging a question.",
        "summary": "unflagging_question",
        "tags": [
          "quiz_submission_questions"
        ],
        "operationId": "V1QuizSubmissionsQuestionsUnflagByQuizSubmissionIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "quiz_submission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "attempt",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The attempt number of the quiz submission being taken. Note that this\nmust be the latest attempt index, as questions for earlier attempts can\nnot be modified."
          },
          {
            "name": "validation_token",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The unique validation token you received when the Quiz Submission was\ncreated."
          },
          {
            "name": "access_code",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Access code for the Quiz, if any."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{id}/submission_users/message": {
      "post": {
        "description": "Send a message to unsubmitted or submitted users for the quiz",
        "summary": "send_message_to_unsubmitted_or_submitted_users_for_quiz",
        "tags": [
          "quiz_submission_user_list"
        ],
        "operationId": "V1CoursesQuizzesSubmissionUsersMessageByCourseIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "conversations",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "- Body and recipients to send the message to."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions": {
      "get": {
        "description": "Get all quiz submissions.",
        "summary": "get_all_quiz_submissions",
        "tags": [
          "quiz_submissions"
        ],
        "operationId": "V1CoursesQuizzesSubmissionsByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission",
              "quiz",
              "user"
            ],
            "type": "string",
            "description": "Associations to include with the quiz submission."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create the quiz submission (start a quiz-taking session)",
        "summary": "create_quiz_submission_start_quiz_taking_session",
        "tags": [
          "quiz_submissions"
        ],
        "operationId": "V1CoursesQuizzesSubmissionsByCourseIdAndQuizIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "access_code",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Access code for the Quiz, if any."
          },
          {
            "name": "preview",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this should be a preview QuizSubmission and not count towards\nthe user's course record. Teachers only."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/submission": {
      "get": {
        "description": "Get the quiz submission.",
        "summary": "get_quiz_submission",
        "tags": [
          "quiz_submissions"
        ],
        "operationId": "V1CoursesQuizzesSubmissionByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission",
              "quiz",
              "user"
            ],
            "type": "string",
            "description": "Associations to include with the quiz submission."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}": {
      "get": {
        "description": "Get a single quiz submission.",
        "summary": "get_single_quiz_submission",
        "tags": [
          "quiz_submissions"
        ],
        "operationId": "V1CoursesQuizzesSubmissionsIdByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission",
              "quiz",
              "user"
            ],
            "type": "string",
            "description": "Associations to include with the quiz submission."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update student question scores and comments.",
        "summary": "update_student_question_scores_and_comments",
        "tags": [
          "quiz_submissions"
        ],
        "operationId": "V1CoursesQuizzesSubmissionsIdByCourseIdAndQuizIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_submissions[attempt]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The attempt number of the quiz submission that should be updated. This\nattempt MUST be already completed."
          },
          {
            "name": "quiz_submissions[fudge_points]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "Amount of positive or negative points to fudge the total score by."
          },
          {
            "name": "quiz_submissions[questions]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of scores and comments for each question answered by the student.\nThe keys are the question IDs, and the values are hashes of `score` and\n`comment` entries. See {Appendix: Manual Scoring} for more on this\nparameter."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/complete": {
      "post": {
        "description": "Complete the quiz submission (turn it in).",
        "summary": "complete_quiz_submission_turn_it_in",
        "tags": [
          "quiz_submissions"
        ],
        "operationId": "V1CoursesQuizzesSubmissionsIdCompleteByCourseIdAndQuizIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "attempt",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The attempt number of the quiz submission that should be completed. Note\nthat this must be the latest attempt index, as earlier attempts can not\nbe modified."
          },
          {
            "name": "validation_token",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The unique validation token you received when this Quiz Submission was\ncreated."
          },
          {
            "name": "access_code",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Access code for the Quiz, if any."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/time": {
      "get": {
        "description": "Get current quiz submission times.",
        "summary": "get_current_quiz_submission_times",
        "tags": [
          "quiz_submissions"
        ],
        "operationId": "V1CoursesQuizzesSubmissionsIdTimeByCourseIdAndQuizIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes": {
      "get": {
        "description": "List quizzes in a course",
        "summary": "list_quizzes_in_course",
        "tags": [
          "quizzes"
        ],
        "operationId": "V1CoursesQuizzesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial title of the quizzes to match and return."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a quiz",
        "summary": "create_quiz",
        "tags": [
          "quizzes"
        ],
        "operationId": "V1CoursesQuizzesByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz[title]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The quiz title."
          },
          {
            "name": "quiz[description]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A description of the quiz."
          },
          {
            "name": "quiz[quiz_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "practice_quiz",
              "assignment",
              "graded_survey",
              "survey"
            ],
            "type": "string",
            "description": "The type of quiz."
          },
          {
            "name": "quiz[assignment_group_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The assignment group id to put the assignment in. Defaults to the top\nassignment group in the course. Only valid if the quiz is graded, i.e. if\nquiz_type is \"assignment\" or \"graded_survey\"."
          },
          {
            "name": "quiz[time_limit]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Time limit to take this quiz, in minutes. Set to null for no time limit.\nDefaults to null."
          },
          {
            "name": "quiz[shuffle_answers]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, quiz answers for multiple choice questions will be randomized for\neach student. Defaults to false."
          },
          {
            "name": "quiz[hide_results]",
            "in": "formData",
            "required": false,
            "enum": [
              "always",
              "until_after_last_attempt"
            ],
            "type": "string",
            "description": "Dictates whether or not quiz results are hidden from students.\nIf null, students can see their results after any attempt.\nIf \"always\", students can never see their results.\nIf \"until_after_last_attempt\", students can only see results after their\nlast attempt. (Only valid if allowed_attempts > 1). Defaults to null."
          },
          {
            "name": "quiz[show_correct_answers]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Only valid if hide_results=null\nIf false, hides correct answers from students when quiz results are viewed.\nDefaults to true."
          },
          {
            "name": "quiz[show_correct_answers_last_attempt]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Only valid if show_correct_answers=true and allowed_attempts > 1\nIf true, hides correct answers from students when quiz results are viewed\nuntil they submit the last attempt for the quiz.\nDefaults to false."
          },
          {
            "name": "quiz[show_correct_answers_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Only valid if show_correct_answers=true\nIf set, the correct answers will be visible by students only after this\ndate, otherwise the correct answers are visible once the student hands in\ntheir quiz submission."
          },
          {
            "name": "quiz[hide_correct_answers_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Only valid if show_correct_answers=true\nIf set, the correct answers will stop being visible once this date has\npassed. Otherwise, the correct answers will be visible indefinitely."
          },
          {
            "name": "quiz[allowed_attempts]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Number of times a student is allowed to take a quiz.\nSet to -1 for unlimited attempts.\nDefaults to 1."
          },
          {
            "name": "quiz[scoring_policy]",
            "in": "formData",
            "required": false,
            "enum": [
              "keep_highest",
              "keep_latest"
            ],
            "type": "string",
            "description": "Required and only valid if allowed_attempts > 1.\nScoring policy for a quiz that students can take multiple times.\nDefaults to \"keep_highest\"."
          },
          {
            "name": "quiz[one_question_at_a_time]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, shows quiz to student one question at a time.\nDefaults to false."
          },
          {
            "name": "quiz[cant_go_back]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Only valid if one_question_at_a_time=true\nIf true, questions are locked after answering.\nDefaults to false."
          },
          {
            "name": "quiz[access_code]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Restricts access to the quiz with a password.\nFor no access code restriction, set to null.\nDefaults to null."
          },
          {
            "name": "quiz[ip_filter]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Restricts access to the quiz to computers in a specified IP range.\nFilters can be a comma-separated list of addresses, or an address followed by a mask\n\nExamples:\n  \"192.168.217.1\"\n  \"192.168.217.1/24\"\n  \"192.168.217.1/255.255.255.0\"\n\nFor no IP filter restriction, set to null.\nDefaults to null."
          },
          {
            "name": "quiz[due_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the quiz is due.\nAccepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z."
          },
          {
            "name": "quiz[lock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the quiz is locked for students.\nAccepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z."
          },
          {
            "name": "quiz[unlock_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The day/time the quiz is unlocked for students.\nAccepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z."
          },
          {
            "name": "quiz[published]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the quiz should have a draft state of published or unpublished.\nNOTE: If students have started taking the quiz, or there are any\nsubmissions for the quiz, you may not unpublish a quiz and will recieve\nan error."
          },
          {
            "name": "quiz[one_time_results]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether students should be prevented from viewing their quiz results past\nthe first time (right after they turn the quiz in.)\nOnly valid if \"hide_results\" is not set to \"always\".\nDefaults to false."
          },
          {
            "name": "quiz[only_visible_to_overrides]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether this quiz is only visible to overrides (Only useful if\n'differentiated assignments' account setting is on)\nDefaults to false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{id}": {
      "get": {
        "description": "Get a single quiz",
        "summary": "get_single_quiz",
        "tags": [
          "quizzes"
        ],
        "operationId": "V1CoursesQuizzesByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Edit a quiz",
        "summary": "edit_quiz",
        "tags": [
          "quizzes"
        ],
        "operationId": "V1CoursesQuizzesByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "quiz[notify_of_update]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, notifies users that the quiz has changed.\nDefaults to true"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a quiz",
        "summary": "delete_quiz",
        "tags": [
          "quizzes"
        ],
        "operationId": "V1CoursesQuizzesByCourseIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{id}/reorder": {
      "post": {
        "description": "Reorder quiz items",
        "summary": "reorder_quiz_items",
        "tags": [
          "quizzes"
        ],
        "operationId": "V1CoursesQuizzesReorderByCourseIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "order[id]",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The associated item's unique identifier"
          },
          {
            "name": "order[type]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The type of item is either 'question' or 'group'"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/quizzes/{id}/validate_access_code": {
      "post": {
        "description": "Validate quiz access code",
        "summary": "validate_quiz_access_code",
        "tags": [
          "quizzes"
        ],
        "operationId": "V1CoursesQuizzesValidateAccessCodeByCourseIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "access_code",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The access code being validated"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/roles": {
      "get": {
        "description": "List roles",
        "summary": "list_roles",
        "tags": [
          "roles"
        ],
        "operationId": "V1AccountsRolesByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the account to retrieve roles for."
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "enum": [
              "active",
              "inactive"
            ],
            "type": "string",
            "description": "Filter by role state. If this argument is omitted, only 'active' roles are\nreturned."
          },
          {
            "name": "show_inherited",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If this argument is true, all roles inherited from parent accounts will\nbe included."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a new role",
        "summary": "create_new_role",
        "tags": [
          "roles"
        ],
        "operationId": "V1AccountsRolesByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "label",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "Label for the role."
          },
          {
            "name": "role",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Deprecated alias for label."
          },
          {
            "name": "base_role_type",
            "in": "formData",
            "required": false,
            "enum": [
              "AccountMembership",
              "StudentEnrollment",
              "TeacherEnrollment",
              "TaEnrollment",
              "ObserverEnrollment",
              "DesignerEnrollment"
            ],
            "type": "string",
            "description": "Specifies the role type that will be used as a base\nfor the permissions granted to this role.\n\nDefaults to 'AccountMembership' if absent"
          },
          {
            "name": "permissions[<X>][explicit]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "permissions[<X>][enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If explicit is 1 and enabled is 1, permission <X> will be explicitly\ngranted to this role. If explicit is 1 and enabled has any other value\n(typically 0), permission <X> will be explicitly denied to this role. If\nexplicit is any other value (typically 0) or absent, or if enabled is\nabsent, the value for permission <X> will be inherited from upstream.\nIgnored if permission <X> is locked upstream (in an ancestor account).\n\nMay occur multiple times with unique values for <X>. Recognized\npermission names for <X> are:\n\n  [For Account-Level Roles Only]\n  become_user                      -- Users - act as\n  import_sis                       -- SIS Data - import\n  manage_account_memberships       -- Admins - add / remove\n  manage_account_settings          -- Account-level settings - manage\n  manage_alerts                    -- Global announcements - add / edit / delete\n  manage_catalog                   -- Catalog - manage\n  manage_courses                   -- Courses - add / edit / delete\n  manage_developer_keys            -- Developer keys - manage\n  manage_feature_flags             -- Feature Options - enable / disable\n  manage_global_outcomes           -- Manage learning outcomes\n  manage_jobs                      -- Manage background jobs\n  manage_master_courses            -- Blueprint Courses - add / edit / associate / delete\n  manage_role_overrides            -- Permissions - manage\n  manage_storage_quotas            -- Storage Quotas - manage\n  manage_sis                       -- SIS data - manage\n  manage_site_settings             -- Manage site-wide and plugin settings\n  manage_user_logins               -- Users - manage login details\n  manage_user_observers            -- Users - add / remove observers\n  read_course_content              -- Course Content - view\n  read_course_list                 -- Courses - view list\n  read_messages                    -- View notifications sent to users\n  reset_any_mfa                    -- Reset multi-factor authentication\n  site_admin                       -- Use the Site Admin section and admin all other accounts\n  view_course_changes              -- Courses - view change logs\n  view_error_reports               -- View error reports\n  view_grade_changes               -- Grades - view change logs\n  view_jobs                        -- View background jobs\n  view_notifications               -- Notifications - view\n  view_quiz_answer_audits          -- Quizzes - view submission log\n  view_statistics                  -- Statistics - view\n  undelete_courses                 -- Courses - undelete\n\n  [For both Account-Level and Course-Level roles]\n   Note: Applicable enrollment types for course-level roles are given in brackets:\n         S = student, T = teacher, A = TA, D = designer, O = observer.\n         Lower-case letters indicate permissions that are off by default.\n         A missing letter indicates the permission cannot be enabled for the role\n         or any derived custom roles.\n  change_course_state              -- [ TaD ] Course State - manage\n  create_collaborations            -- [STADo] Student Collaborations - create\n  create_conferences               -- [STADo] Web conferences - create\n  create_forum                     -- [STADo] Discussions - create\n  generate_observer_pairing_code   -- [ tado] Users - Generate observer pairing codes for students\n  import_outcomes                  -- [ TaDo] Learning Outcomes - import\n  lti_add_edit                     -- [ TAD ] LTI - add / edit / delete\n  manage_admin_users               -- [ Tad ] Users - add / remove teachers, course designers, or TAs in courses\n  manage_assignments               -- [ TADo] Assignments and Quizzes - add / edit / delete\n  manage_calendar                  -- [sTADo] Course Calendar - add / edit / delete events\n  manage_content                   -- [ TADo] Course Content - add / edit / delete\n  manage_files                     -- [ TADo] Course Files - add / edit / delete\n  manage_grades                    -- [ TA  ] Grades - edit\n  manage_groups                    -- [ TAD ] Groups - add / edit / delete\n  manage_interaction_alerts        -- [ Ta  ] Alerts - add / edit / delete\n  manage_outcomes                  -- [sTaDo] Learning Outcomes - add / edit / delete\n  manage_sections                  -- [ TaD ] Course Sections - add / edit / delete\n  manage_students                  -- [ TAD ] Users - add / remove students in courses\n  manage_user_notes                -- [ TA  ] Faculty Journal - manage entries\n  manage_rubrics                   -- [ TAD ] Rubrics - add / edit / delete\n  manage_wiki                      -- [ TADo] Pages - add / edit / delete\n  moderate_forum                   -- [sTADo] Discussions - moderate\n  post_to_forum                    -- [STADo] Discussions - post\n  read_announcements               -- [STADO] Announcements - view\n  read_email_addresses             -- [sTAdo] Users - view primary email address\n  read_forum                       -- [STADO] Discussions - view\n  read_question_banks              -- [ TADo] Question banks - view and link\n  read_reports                     -- [ TAD ] Courses - view usage reports\n  read_roster                      -- [STADo] Users - view list\n  read_sis                         -- [sTa  ] SIS Data - read\n  select_final_grade               -- [ TA  ] Grades - select final grade for moderation\n  send_messages                    -- [STADo] Conversations - send messages to individual course members\n  send_messages_all                -- [sTADo] Conversations - send messages to entire class\n  view_all_grades                  -- [ TAd ] Grades - view all grades\n  view_audit_trail                 -- [ t   ] Grades - view audit trail\n  view_group_pages                 -- [sTADo] Groups - view all student groups\n  view_user_logins                 -- [ TA  ] Users - view login IDs\n\nSome of these permissions are applicable only for roles on the site admin\naccount, on a root account, or for course-level roles with a particular base role type;\nif a specified permission is inapplicable, it will be ignored.\n\nAdditional permissions may exist based on installed plugins."
          },
          {
            "name": "permissions[<X>][locked]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If the value is 1, permission <X> will be locked downstream (new roles in\nsubaccounts cannot override the setting). For any other value, permission\n<X> is left unlocked. Ignored if permission <X> is already locked\nupstream. May occur multiple times with unique values for <X>."
          },
          {
            "name": "permissions[<X>][applies_to_self]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If the value is 1, permission <X> applies to the account this role is in.\nThe default value is 1. Must be true if applies_to_descendants is false.\nThis value is only returned if enabled is true."
          },
          {
            "name": "permissions[<X>][applies_to_descendants]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If the value is 1, permission <X> cascades down to sub accounts of the\naccount this role is in. The default value is 1.  Must be true if\napplies_to_self is false.This value is only returned if enabled is true."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/roles/{id}": {
      "get": {
        "description": "Get a single role",
        "summary": "get_single_role",
        "tags": [
          "roles"
        ],
        "operationId": "V1AccountsRolesByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the account containing the role"
          },
          {
            "name": "role_id",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The unique identifier for the role"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The name for the role"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Deactivate a role",
        "summary": "deactivate_role",
        "tags": [
          "roles"
        ],
        "operationId": "V1AccountsRolesByAccountIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "role_id",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The unique identifier for the role"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The name for the role"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a role",
        "summary": "update_role",
        "tags": [
          "roles"
        ],
        "operationId": "V1AccountsRolesByAccountIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "label",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The label for the role. Can only change the label of a custom role that belongs directly to the account."
          },
          {
            "name": "permissions[<X>][explicit]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "permissions[<X>][enabled]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "These arguments are described in the documentation for the\n{api:RoleOverridesController#add_role add_role method}."
          },
          {
            "name": "permissions[<X>][applies_to_self]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If the value is 1, permission <X> applies to the account this role is in.\nThe default value is 1. Must be true if applies_to_descendants is false.\nThis value is only returned if enabled is true."
          },
          {
            "name": "permissions[<X>][applies_to_descendants]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If the value is 1, permission <X> cascades down to sub accounts of the\naccount this role is in. The default value is 1.  Must be true if\napplies_to_self is false.This value is only returned if enabled is true."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/roles/{id}/activate": {
      "post": {
        "description": "Activate a role",
        "summary": "activate_role",
        "tags": [
          "roles"
        ],
        "operationId": "V1AccountsRolesActivateByAccountIdAndIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "role_id",
            "in": "formData",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The unique identifier for the role"
          },
          {
            "name": "role",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name for the role"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/rubrics": {
      "post": {
        "description": "Create a single rubric",
        "summary": "create_single_rubric",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1CoursesRubricsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the rubric"
          },
          {
            "name": "rubric_association_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the object with which this rubric is associated"
          },
          {
            "name": "rubric[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "rubric[free_form_criterion_comments]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "rubric_association[association_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the object with which this rubric is associated"
          },
          {
            "name": "rubric_association[association_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "Assignment",
              "Course",
              "Account"
            ],
            "type": "string",
            "description": "The type of object this rubric is associated with"
          },
          {
            "name": "rubric_association[use_for_grading]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "rubric_association[hide_score_total]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "rubric_association[purpose]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "rubric[criteria]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List rubrics",
        "summary": "list_rubrics_courses",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1CoursesRubricsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/rubrics/{id}": {
      "put": {
        "description": "Update a single rubric",
        "summary": "update_single_rubric",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1CoursesRubricsByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the rubric"
          },
          {
            "name": "rubric_association_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the object with which this rubric is associated"
          },
          {
            "name": "rubric[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "rubric[free_form_criterion_comments]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "rubric[skip_updating_points_possible]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether or not to update the points possible"
          },
          {
            "name": "rubric_association[association_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the object with which this rubric is associated"
          },
          {
            "name": "rubric_association[association_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "Assignment",
              "Course",
              "Account"
            ],
            "type": "string",
            "description": "The type of object this rubric is associated with"
          },
          {
            "name": "rubric_association[use_for_grading]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "rubric_association[hide_score_total]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "rubric_association[purpose]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "rubric[criteria]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a single rubric",
        "summary": "delete_single_rubric",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1CoursesRubricsByCourseIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Get a single rubric",
        "summary": "get_single_rubric_courses",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1CoursesRubricsByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "assessments",
              "graded_assessments",
              "peer_assessments",
              "associations",
              "assignment_associations",
              "course_associations",
              "account_associations"
            ],
            "type": "string",
            "description": "Related records to include in the response."
          },
          {
            "name": "style",
            "in": "query",
            "required": false,
            "enum": [
              "full",
              "comments_only"
            ],
            "type": "string",
            "description": "Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/rubrics": {
      "get": {
        "description": "List rubrics",
        "summary": "list_rubrics_accounts",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1AccountsRubricsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/rubrics/{id}": {
      "get": {
        "description": "Get a single rubric",
        "summary": "get_single_rubric_accounts",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1AccountsRubricsByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "assessments",
              "graded_assessments",
              "peer_assessments",
              "associations",
              "assignment_associations",
              "course_associations",
              "account_associations"
            ],
            "type": "string",
            "description": "Related records to include in the response."
          },
          {
            "name": "style",
            "in": "query",
            "required": false,
            "enum": [
              "full",
              "comments_only"
            ],
            "type": "string",
            "description": "Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments": {
      "post": {
        "description": "Create a single rubric assessment",
        "summary": "create_single_rubric_assessment",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1CoursesRubricAssociationsRubricAssessmentsByCourseIdAndRubricAssociationIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the course"
          },
          {
            "name": "rubric_association_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the object with which this rubric assessment is associated"
          },
          {
            "name": "provisional",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "(optional) Indicates whether this assessment is provisional, defaults to false."
          },
          {
            "name": "final",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "(optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false."
          },
          {
            "name": "graded_anonymously",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "(optional) Defaults to false"
          },
          {
            "name": "rubric_assessment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A Hash of data to complement the rubric assessment:\nThe user id that refers to the person being assessed\n  rubric_assessment[user_id]\nAssessment type. There are only three valid types:  'grading', 'peer_review', or 'provisional_grade'\n  rubric_assessment[assessment_type]\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\nFor each criterion_id, change the id by the criterion number, ex: criterion_123\nIf the criterion_id is not specified it defaults to false, and nothing is updated."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments/{id}": {
      "put": {
        "description": "Update a single rubric assessment",
        "summary": "update_single_rubric_assessment",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1CoursesRubricAssociationsRubricAssessmentsIdByCourseIdAndRubricAssociationIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the rubric assessment"
          },
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the course"
          },
          {
            "name": "rubric_association_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the object with which this rubric assessment is associated"
          },
          {
            "name": "provisional",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "(optional) Indicates whether this assessment is provisional, defaults to false."
          },
          {
            "name": "final",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "(optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false."
          },
          {
            "name": "graded_anonymously",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "(optional) Defaults to false"
          },
          {
            "name": "rubric_assessment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A Hash of data to complement the rubric assessment:\nThe user id that refers to the person being assessed\n  rubric_assessment[user_id]\nAssessment type. There are only three valid types:  'grading', 'peer_review', or 'provisional_grade'\n  rubric_assessment[assessment_type]\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\nFor each criterion_id, change the id by the criterion number, ex: criterion_123\nIf the criterion_id is not specified it defaults to false, and nothing is updated."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a single rubric assessment",
        "summary": "delete_single_rubric_assessment",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1CoursesRubricAssociationsRubricAssessmentsIdByCourseIdAndRubricAssociationIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "rubric_association_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/rubric_associations": {
      "post": {
        "description": "Create a RubricAssociation",
        "summary": "create_rubricassociation",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1CoursesRubricAssociationsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "rubric_association[rubric_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the Rubric"
          },
          {
            "name": "rubric_association[association_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the object with which this rubric is associated"
          },
          {
            "name": "rubric_association[association_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "Assignment",
              "Course",
              "Account"
            ],
            "type": "string",
            "description": "The type of object this rubric is associated with"
          },
          {
            "name": "rubric_association[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "rubric_association[use_for_grading]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "rubric_association[hide_score_total]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "rubric_association[purpose]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "rubric_association[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "rubric_association[bookmarked]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/rubric_associations/{id}": {
      "put": {
        "description": "Update a RubricAssociation",
        "summary": "update_rubricassociation",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1CoursesRubricAssociationsByCourseIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the RubricAssociation to update"
          },
          {
            "name": "rubric_association[rubric_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the Rubric"
          },
          {
            "name": "rubric_association[association_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the object with which this rubric is associated"
          },
          {
            "name": "rubric_association[association_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "Assignment",
              "Course",
              "Account"
            ],
            "type": "string",
            "description": "The type of object this rubric is associated with"
          },
          {
            "name": "rubric_association[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "rubric_association[use_for_grading]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "rubric_association[hide_score_total]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "rubric_association[purpose]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "rubric_association[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "rubric_association[bookmarked]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a RubricAssociation",
        "summary": "delete_rubricassociation",
        "tags": [
          "rubrics"
        ],
        "operationId": "V1CoursesRubricAssociationsByCourseIdAndIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/sis_imports/{id}/errors": {
      "get": {
        "description": "Get SIS import error list",
        "summary": "get_sis_import_error_list_sis_imports",
        "tags": [
          "sis_import_errors"
        ],
        "operationId": "V1AccountsSisImportsErrorsByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "failure",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If set, only shows errors on a sis import that would cause a failure."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/sis_import_errors": {
      "get": {
        "description": "Get SIS import error list",
        "summary": "get_sis_import_error_list_sis_import_errors",
        "tags": [
          "sis_import_errors"
        ],
        "operationId": "V1AccountsSisImportErrorsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "failure",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If set, only shows errors on a sis import that would cause a failure."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/sis_imports": {
      "get": {
        "description": "Get SIS import list",
        "summary": "get_sis_import_list",
        "tags": [
          "sis_imports"
        ],
        "operationId": "V1AccountsSisImportsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "created_since",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If set, only shows imports created after the specified date (use ISO8601 format)"
          },
          {
            "name": "workflow_state",
            "in": "query",
            "required": false,
            "enum": [
              "initializing",
              "created",
              "importing",
              "cleanup_batch",
              "imported",
              "imported_with_messages",
              "aborted",
              "failed",
              "failed_with_messages",
              "restoring",
              "partially_restored",
              "restored"
            ],
            "type": "string",
            "description": "If set, only returns imports that are in the given state."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Import SIS data",
        "summary": "import_sis_data",
        "tags": [
          "sis_imports"
        ],
        "operationId": "V1AccountsSisImportsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "import_type",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Choose the data format for reading SIS data. With a standard Canvas\ninstall, this option can only be 'instructure_csv', and if unprovided,\nwill be assumed to be so. Can be part of the query string."
          },
          {
            "name": "attachment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "There are two ways to post SIS import data - either via a\nmultipart/form-data form-field-style attachment, or via a non-multipart\nraw post request.\n\n'attachment' is required for multipart/form-data style posts. Assumed to\nbe SIS data from a file upload form field named 'attachment'.\n\nExamples:\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\n\nIf you decide to do a raw post, you can skip the 'attachment' argument,\nbut you will then be required to provide a suitable Content-Type header.\nYou are encouraged to also provide the 'extension' argument.\n\nExamples:\n  curl -H 'Content-Type: application/octet-stream' --data-binary @<filename>.zip \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv&extension=zip\n\n  curl -H 'Content-Type: application/zip' --data-binary @<filename>.zip \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv&batch_mode=1&batch_mode_term_id=15"
          },
          {
            "name": "extension",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Recommended for raw post request style imports. This field will be used to\ndistinguish between zip, xml, csv, and other file format extensions that\nwould usually be provided with the filename in the multipart post request\nscenario. If not provided, this value will be inferred from the\nContent-Type, falling back to zip-file format if all else fails."
          },
          {
            "name": "batch_mode",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If set, this SIS import will be run in batch mode, deleting any data\npreviously imported via SIS that is not present in this latest import.\nSee the SIS CSV Format page for details.\nBatch mode cannot be used with diffing."
          },
          {
            "name": "batch_mode_term_id",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Limit deletions to only this term. Required if batch mode is enabled."
          },
          {
            "name": "multi_term_batch_mode",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Runs batch mode against all terms in terms file. Requires change_threshold."
          },
          {
            "name": "skip_deletes",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "When set the import will skip any deletes. This does not account for\nobjects that are deleted during the batch mode cleanup process."
          },
          {
            "name": "override_sis_stickiness",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Many fields on records in Canvas can be marked \"sticky,\" which means that\nwhen something changes in the UI apart from the SIS, that field gets\n\"stuck.\" In this way, by default, SIS imports do not override UI changes.\nIf this field is present, however, it will tell the SIS import to ignore\n\"stickiness\" and override all fields."
          },
          {
            "name": "add_sis_stickiness",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "This option, if present, will process all changes as if they were UI\nchanges. This means that \"stickiness\" will be added to changed fields.\nThis option is only processed if 'override_sis_stickiness' is also provided."
          },
          {
            "name": "clear_sis_stickiness",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "This option, if present, will clear \"stickiness\" from all fields touched\nby this import. Requires that 'override_sis_stickiness' is also provided.\nIf 'add_sis_stickiness' is also provided, 'clear_sis_stickiness' will\noverrule the behavior of 'add_sis_stickiness'"
          },
          {
            "name": "diffing_data_set_identifier",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If set on a CSV import, Canvas will attempt to optimize the SIS import by\ncomparing this set of CSVs to the previous set that has the same data set\nidentifier, and only applying the difference between the two. See the\nSIS CSV Format documentation for more details.\nDiffing cannot be used with batch_mode"
          },
          {
            "name": "diffing_remaster_data_set",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, and diffing_data_set_identifier is sent, this SIS import will be\npart of the data set, but diffing will not be performed. See the SIS CSV\nFormat documentation for details."
          },
          {
            "name": "diffing_drop_status",
            "in": "formData",
            "required": false,
            "enum": [
              "deleted",
              "completed",
              "inactive"
            ],
            "type": "string",
            "description": "If diffing_drop_status is passed, this SIS import will use this status for\nenrollments that are not included in the sis_batch. Defaults to 'deleted'"
          },
          {
            "name": "change_threshold",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If set with batch_mode, the batch cleanup process will not run if the\nnumber of items deleted is higher than the percentage set. If set to 10\nand a term has 200 enrollments, and batch would delete more than 20 of\nthe enrollments the batch will abort before the enrollments are deleted.\nThe change_threshold will be evaluated for course, sections, and\nenrollments independently.\nIf set with diffing, diffing  will not be performed if the files are\ngreater than the threshold as a percent. If set to 5 and the file is more\nthan 5% smaller or more than 5% larger than the file that is being\ncompared to, diffing will not be performed. If the files are less than 5%,\ndiffing will be performed. The way the percent is calculated is by taking\nthe size of the current import and dividing it by the size of the previous\nimport. The formula used is:\n|(1 - current_file_size / previous_file_size)| * 100\nSee the SIS CSV Format documentation for more details.\nRequired for multi_term_batch_mode."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/sis_imports/importing": {
      "get": {
        "description": "Get the current importing SIS import",
        "summary": "get_current_importing_sis_import",
        "tags": [
          "sis_imports"
        ],
        "operationId": "V1AccountsSisImportsImportingByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/sis_imports/{id}": {
      "get": {
        "description": "Get SIS import status",
        "summary": "get_sis_import_status",
        "tags": [
          "sis_imports"
        ],
        "operationId": "V1AccountsSisImportsByAccountIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/sis_imports/{id}/restore_states": {
      "put": {
        "description": "Restore workflow_states of SIS imported items",
        "summary": "restore_workflow_states_of_sis_imported_items",
        "tags": [
          "sis_imports"
        ],
        "operationId": "V1AccountsSisImportsRestoreStatesByAccountIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "batch_mode",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If set, will only restore items that were deleted from batch_mode."
          },
          {
            "name": "undelete_only",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If set, will only restore items that were deleted. This will ignore any\nitems that were created or modified."
          },
          {
            "name": "unconclude_only",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If set, will only restore enrollments that were concluded. This will\nignore any items that were created or deleted."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/sis_imports/{id}/abort": {
      "put": {
        "description": "Abort SIS import",
        "summary": "abort_sis_import",
        "tags": [
          "sis_imports"
        ],
        "operationId": "V1AccountsSisImportsAbortByAccountIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/sis_imports/abort_all_pending": {
      "put": {
        "description": "Abort all pending SIS imports",
        "summary": "abort_all_pending_sis_imports",
        "tags": [
          "sis_imports"
        ],
        "operationId": "V1AccountsSisImportsAbortAllPendingByAccountIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/sis/accounts/{account_id}/assignments": {
      "get": {
        "description": "Retrieve assignments enabled for grade export to SIS",
        "summary": "retrieve_assignments_enabled_for_grade_export_to_sis_accounts",
        "tags": [
          "sis_integration"
        ],
        "operationId": "SisAccountsAssignmentsByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the account to query."
          },
          {
            "name": "course_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the course to query."
          },
          {
            "name": "starts_before",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When searching on an account,"
          },
          {
            "name": "ends_after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When searching on an account,"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "student_overrides"
            ],
            "type": "string",
            "description": "Array of additional"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/sis/courses/{course_id}/assignments": {
      "get": {
        "description": "Retrieve assignments enabled for grade export to SIS",
        "summary": "retrieve_assignments_enabled_for_grade_export_to_sis_courses",
        "tags": [
          "sis_integration"
        ],
        "operationId": "SisCoursesAssignmentsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the course to query."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the account to query."
          },
          {
            "name": "starts_before",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When searching on an account,"
          },
          {
            "name": "ends_after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When searching on an account,"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "student_overrides"
            ],
            "type": "string",
            "description": "Array of additional"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/sis/courses/{course_id}/disable_post_to_sis": {
      "put": {
        "description": "Disable assignments currently enabled for grade export to SIS",
        "summary": "disable_assignments_currently_enabled_for_grade_export_to_sis",
        "tags": [
          "sis_integration"
        ],
        "operationId": "SisCoursesDisablePostToSisByCourseIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the course."
          },
          {
            "name": "grading_period_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the grading period."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/search/recipients": {
      "get": {
        "description": "Find recipients",
        "summary": "find_recipients_search",
        "tags": [
          "search"
        ],
        "operationId": "V1SearchRecipientsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Search terms used for matching users/courses/groups (e.g. \"bob smith\"). If\nmultiple terms are given (separated via whitespace), only results matching\nall terms will be returned."
          },
          {
            "name": "context",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Limit the search to a particular course/group (e.g. \"course_3\" or \"group_4\")."
          },
          {
            "name": "exclude",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of ids to exclude from the search. These may be user ids or\ncourse/group ids prefixed with \"course_\" or \"group_\" respectively,\ne.g. exclude[]=1&exclude[]=2&exclude[]=course_3"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "enum": [
              "user",
              "context"
            ],
            "type": "string",
            "description": "Limit the search just to users or contexts (groups/courses)."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Search for a specific user id. This ignores the other above parameters,\nand will never return more than one result."
          },
          {
            "name": "from_conversation_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "When searching by user_id, only users that could be normally messaged by\nthis user will be returned. This parameter allows you to specify a\nconversation that will be referenced for a shared context -- if both the\ncurrent user and the searched user are in the conversation, the user will\nbe returned. This is used to start new side conversations."
          },
          {
            "name": "permissions",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of permission strings to be checked for each matched context (e.g.\n\"send_messages\"). This argument determines which permissions may be\nreturned in the response; it won't prevent contexts from being returned if\nthey don't grant the permission(s)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/search/all_courses": {
      "get": {
        "description": "List all courses",
        "summary": "list_all_courses",
        "tags": [
          "search"
        ],
        "operationId": "V1SearchAllCoursesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Search terms used for matching users/courses/groups (e.g. \"bob smith\"). If\nmultiple terms are given (separated via whitespace), only results matching\nall terms will be returned."
          },
          {
            "name": "public_only",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Only return courses with public content. Defaults to false."
          },
          {
            "name": "open_enrollment_only",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Only return courses that allow self enrollment. Defaults to false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/sections": {
      "get": {
        "description": "List course sections",
        "summary": "list_course_sections",
        "tags": [
          "sections"
        ],
        "operationId": "V1CoursesSectionsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "students",
              "avatar_url",
              "enrollments",
              "total_students",
              "passback_status"
            ],
            "type": "string",
            "description": "- \"students\": Associations to include with the group. Note: this is only\n  available if you have permission to view users or grades in the course\n- \"avatar_url\": Include the avatar URLs for students returned.\n- \"enrollments\": If 'students' is also included, return the section\n  enrollment for each student\n- \"total_students\": Returns the total amount of active and invited students\n  for the course section\n- \"passback_status\": Include the grade passback status."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create course section",
        "summary": "create_course_section",
        "tags": [
          "sections"
        ],
        "operationId": "V1CoursesSectionsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "course_section[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the section"
          },
          {
            "name": "course_section[sis_section_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The sis ID of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set."
          },
          {
            "name": "course_section[integration_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The integration_id of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set."
          },
          {
            "name": "course_section[start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z"
          },
          {
            "name": "course_section[end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z"
          },
          {
            "name": "course_section[restrict_enrollments_to_section_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true to restrict user enrollments to the start and end dates of the section."
          },
          {
            "name": "enable_sis_reactivation",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "When true, will first try to re-activate a deleted section with matching sis_section_id if possible."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{id}/crosslist/{new_course_id}": {
      "post": {
        "description": "Cross-list a Section",
        "summary": "cross_list_section",
        "tags": [
          "sections"
        ],
        "operationId": "V1SectionsCrosslistByIdAndNewCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "new_course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{id}/crosslist": {
      "delete": {
        "description": "De-cross-list a Section",
        "summary": "de_cross_list_section",
        "tags": [
          "sections"
        ],
        "operationId": "V1SectionsCrosslistByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{id}": {
      "put": {
        "description": "Edit a section",
        "summary": "edit_section",
        "tags": [
          "sections"
        ],
        "operationId": "V1SectionsByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "course_section[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The name of the section"
          },
          {
            "name": "course_section[sis_section_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The sis ID of the section. Must have manage_sis permission to set."
          },
          {
            "name": "course_section[integration_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The integration_id of the section. Must have manage_sis permission to set."
          },
          {
            "name": "course_section[start_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z"
          },
          {
            "name": "course_section[end_at]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z"
          },
          {
            "name": "course_section[restrict_enrollments_to_section_dates]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Set to true to restrict user enrollments to the start and end dates of the section."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Get section information",
        "summary": "get_section_information_sections",
        "tags": [
          "sections"
        ],
        "operationId": "V1SectionsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "students",
              "avatar_url",
              "enrollments",
              "total_students",
              "passback_status"
            ],
            "type": "string",
            "description": "- \"students\": Associations to include with the group. Note: this is only\n  available if you have permission to view users or grades in the course\n- \"avatar_url\": Include the avatar URLs for students returned.\n- \"enrollments\": If 'students' is also included, return the section\n  enrollment for each student\n- \"total_students\": Returns the total amount of active and invited students\n  for the course section\n- \"passback_status\": Include the grade passback status."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete a section",
        "summary": "delete_section",
        "tags": [
          "sections"
        ],
        "operationId": "V1SectionsByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/sections/{id}": {
      "get": {
        "description": "Get section information",
        "summary": "get_section_information_courses",
        "tags": [
          "sections"
        ],
        "operationId": "V1CoursesSectionsByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "students",
              "avatar_url",
              "enrollments",
              "total_students",
              "passback_status"
            ],
            "type": "string",
            "description": "- \"students\": Associations to include with the group. Note: this is only\n  available if you have permission to view users or grades in the course\n- \"avatar_url\": Include the avatar URLs for students returned.\n- \"enrollments\": If 'students' is also included, return the section\n  enrollment for each student\n- \"total_students\": Returns the total amount of active and invited students\n  for the course section\n- \"passback_status\": Include the grade passback status."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/services/kaltura": {
      "get": {
        "description": "Get Kaltura config",
        "summary": "get_kaltura_config",
        "tags": [
          "services"
        ],
        "operationId": "V1ServicesKalturaGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/services/kaltura_session": {
      "post": {
        "description": "Start Kaltura session",
        "summary": "start_kaltura_session",
        "tags": [
          "services"
        ],
        "operationId": "V1ServicesKalturaSessionPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/shared_brand_configs": {
      "post": {
        "description": "Share a BrandConfig (Theme)",
        "summary": "share_brandconfig_theme",
        "tags": [
          "shared_brand_configs"
        ],
        "operationId": "V1AccountsSharedBrandConfigsByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "shared_brand_config[name]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "Name to share this BrandConfig (theme) as."
          },
          {
            "name": "shared_brand_config[brand_config_md5]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "MD5 of brand_config to share"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/shared_brand_configs/{id}": {
      "put": {
        "description": "Update a shared theme",
        "summary": "update_shared_theme",
        "tags": [
          "shared_brand_configs"
        ],
        "operationId": "V1AccountsSharedBrandConfigsByAccountIdAndIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/shared_brand_configs/{id}": {
      "delete": {
        "description": "Un-share a BrandConfig (Theme)",
        "summary": "un_share_brandconfig_theme",
        "tags": [
          "shared_brand_configs"
        ],
        "operationId": "V1SharedBrandConfigsByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/files": {
      "post": {
        "description": "Upload a file",
        "summary": "upload_file",
        "tags": [
          "submission_comments"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsUserIdCommentsFilesByCourseIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/submissions": {
      "post": {
        "description": "Submit an assignment",
        "summary": "submit_assignment_courses",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsByCourseIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission[submission_type]",
            "in": "formData",
            "required": true,
            "enum": [
              "online_text_entry",
              "online_url",
              "online_upload",
              "media_recording",
              "basic_lti_launch"
            ],
            "type": "string",
            "description": "The type of submission being made. The assignment submission_types must\ninclude this submission type as an allowed option, or the submission will be rejected with a 400 error.\n\nThe submission_type given determines which of the following parameters is\nused. For instance, to submit a URL, submission [submission_type] must be\nset to \"online_url\", otherwise the submission [url] parameter will be\nignored."
          },
          {
            "name": "comment[text_comment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Include a textual comment with the submission."
          },
          {
            "name": "submission[body]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet\nwill be sanitized using the same ruleset as a submission made from the\nCanvas web UI. The sanitized HTML will be returned in the response as the\nsubmission body. Requires a submission_type of \"online_text_entry\"."
          },
          {
            "name": "submission[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\",\nno \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g.\n\"www.example.com\") then \"http\" will be assumed. Requires a submission_type\nof \"online_url\" or \"basic_lti_launch\"."
          },
          {
            "name": "submission[file_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Submit the assignment as a set of one or more previously uploaded files\nresiding in the submitting user's files section (or the group's files\nsection, for group assignments).\n\nTo upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.\n\nRequires a submission_type of \"online_upload\"."
          },
          {
            "name": "submission[media_comment_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The media comment id to submit. Media comment ids can be submitted via\nthis API, however, note that there is not yet an API to generate or list\nexisting media comments, so this functionality is currently of limited use.\n\nRequires a submission_type of \"media_recording\"."
          },
          {
            "name": "submission[media_comment_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "audio",
              "video"
            ],
            "type": "string",
            "description": "The type of media comment being submitted."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List assignment submissions",
        "summary": "list_assignment_submissions_courses",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsByCourseIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associations to include with the group.  \"group\" will add group_id and group_name."
          },
          {
            "name": "grouped",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If this argument is true, the response will be grouped by student groups."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{section_id}/assignments/{assignment_id}/submissions": {
      "post": {
        "description": "Submit an assignment",
        "summary": "submit_assignment_sections",
        "tags": [
          "submissions"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionsBySectionIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "submission[submission_type]",
            "in": "formData",
            "required": true,
            "enum": [
              "online_text_entry",
              "online_url",
              "online_upload",
              "media_recording",
              "basic_lti_launch"
            ],
            "type": "string",
            "description": "The type of submission being made. The assignment submission_types must\ninclude this submission type as an allowed option, or the submission will be rejected with a 400 error.\n\nThe submission_type given determines which of the following parameters is\nused. For instance, to submit a URL, submission [submission_type] must be\nset to \"online_url\", otherwise the submission [url] parameter will be\nignored."
          },
          {
            "name": "comment[text_comment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Include a textual comment with the submission."
          },
          {
            "name": "submission[body]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet\nwill be sanitized using the same ruleset as a submission made from the\nCanvas web UI. The sanitized HTML will be returned in the response as the\nsubmission body. Requires a submission_type of \"online_text_entry\"."
          },
          {
            "name": "submission[url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\",\nno \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g.\n\"www.example.com\") then \"http\" will be assumed. Requires a submission_type\nof \"online_url\" or \"basic_lti_launch\"."
          },
          {
            "name": "submission[file_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Submit the assignment as a set of one or more previously uploaded files\nresiding in the submitting user's files section (or the group's files\nsection, for group assignments).\n\nTo upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.\n\nRequires a submission_type of \"online_upload\"."
          },
          {
            "name": "submission[media_comment_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The media comment id to submit. Media comment ids can be submitted via\nthis API, however, note that there is not yet an API to generate or list\nexisting media comments, so this functionality is currently of limited use.\n\nRequires a submission_type of \"media_recording\"."
          },
          {
            "name": "submission[media_comment_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "audio",
              "video"
            ],
            "type": "string",
            "description": "The type of media comment being submitted."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List assignment submissions",
        "summary": "list_assignment_submissions_sections",
        "tags": [
          "submissions"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionsBySectionIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associations to include with the group.  \"group\" will add group_id and group_name."
          },
          {
            "name": "grouped",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If this argument is true, the response will be grouped by student groups."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/students/submissions": {
      "get": {
        "description": "List submissions for multiple assignments",
        "summary": "list_submissions_for_multiple_assignments_courses",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesStudentsSubmissionsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "student_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of student ids to return submissions for. If this argument is\nomitted, return submissions for the calling user. Students may only list\ntheir own submissions. Observers may only list those of associated\nstudents. The special id \"all\" will return submissions for all students\nin the course/section as appropriate."
          },
          {
            "name": "assignment_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of assignments to return submissions for. If none are given,\nsubmissions for all assignments are returned."
          },
          {
            "name": "grouped",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If this argument is present, the response will be grouped by student,\nrather than a flat array of submissions."
          },
          {
            "name": "post_to_sis",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If this argument is set to true, the response will only include\nsubmissions for assignments that have the post_to_sis flag set to true and\nuser enrollments that were added through sis."
          },
          {
            "name": "submitted_since",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If this argument is set, the response will only include submissions that\nwere submitted after the specified date_time. This will exclude\nsubmissions that do not have a submitted_at which will exclude unsubmitted\nsubmissions.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ."
          },
          {
            "name": "graded_since",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If this argument is set, the response will only include submissions that\nwere graded after the specified date_time. This will exclude\nsubmissions that have not been graded.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ."
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the grading period in which submissions are being requested\n(Requires grading periods to exist on the account)"
          },
          {
            "name": "workflow_state",
            "in": "query",
            "required": false,
            "enum": [
              "submitted",
              "unsubmitted",
              "graded",
              "pending_review"
            ],
            "type": "string",
            "description": "The current status of the submission"
          },
          {
            "name": "enrollment_state",
            "in": "query",
            "required": false,
            "enum": [
              "active",
              "concluded"
            ],
            "type": "string",
            "description": "The current state of the enrollments. If omitted will include all\nenrollments that are not deleted."
          },
          {
            "name": "state_based_on_date",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If omitted it is set to true. When set to false it will ignore the effective\nstate of the student enrollments and use the workflow_state for the\nenrollments. The argument is ignored unless enrollment_state argument is\nalso passed."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "enum": [
              "id",
              "graded_at"
            ],
            "type": "string",
            "description": "The order submissions will be returned in.  Defaults to \"id\".  Doesn't\naffect results for \"grouped\" mode."
          },
          {
            "name": "order_direction",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Determines whether ordered results are returned in ascending or descending\norder.  Defaults to \"ascending\".  Doesn't affect results for \"grouped\" mode."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission_history",
              "submission_comments",
              "rubric_assessment",
              "assignment",
              "total_scores",
              "visibility",
              "course",
              "user"
            ],
            "type": "string",
            "description": "Associations to include with the group. `total_scores` requires the\n`grouped` argument."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{section_id}/students/submissions": {
      "get": {
        "description": "List submissions for multiple assignments",
        "summary": "list_submissions_for_multiple_assignments_sections",
        "tags": [
          "submissions"
        ],
        "operationId": "V1SectionsStudentsSubmissionsBySectionIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "student_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of student ids to return submissions for. If this argument is\nomitted, return submissions for the calling user. Students may only list\ntheir own submissions. Observers may only list those of associated\nstudents. The special id \"all\" will return submissions for all students\nin the course/section as appropriate."
          },
          {
            "name": "assignment_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of assignments to return submissions for. If none are given,\nsubmissions for all assignments are returned."
          },
          {
            "name": "grouped",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If this argument is present, the response will be grouped by student,\nrather than a flat array of submissions."
          },
          {
            "name": "post_to_sis",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If this argument is set to true, the response will only include\nsubmissions for assignments that have the post_to_sis flag set to true and\nuser enrollments that were added through sis."
          },
          {
            "name": "submitted_since",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If this argument is set, the response will only include submissions that\nwere submitted after the specified date_time. This will exclude\nsubmissions that do not have a submitted_at which will exclude unsubmitted\nsubmissions.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ."
          },
          {
            "name": "graded_since",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If this argument is set, the response will only include submissions that\nwere graded after the specified date_time. This will exclude\nsubmissions that have not been graded.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ."
          },
          {
            "name": "grading_period_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the grading period in which submissions are being requested\n(Requires grading periods to exist on the account)"
          },
          {
            "name": "workflow_state",
            "in": "query",
            "required": false,
            "enum": [
              "submitted",
              "unsubmitted",
              "graded",
              "pending_review"
            ],
            "type": "string",
            "description": "The current status of the submission"
          },
          {
            "name": "enrollment_state",
            "in": "query",
            "required": false,
            "enum": [
              "active",
              "concluded"
            ],
            "type": "string",
            "description": "The current state of the enrollments. If omitted will include all\nenrollments that are not deleted."
          },
          {
            "name": "state_based_on_date",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If omitted it is set to true. When set to false it will ignore the effective\nstate of the student enrollments and use the workflow_state for the\nenrollments. The argument is ignored unless enrollment_state argument is\nalso passed."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "enum": [
              "id",
              "graded_at"
            ],
            "type": "string",
            "description": "The order submissions will be returned in.  Defaults to \"id\".  Doesn't\naffect results for \"grouped\" mode."
          },
          {
            "name": "order_direction",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Determines whether ordered results are returned in ascending or descending\norder.  Defaults to \"ascending\".  Doesn't affect results for \"grouped\" mode."
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission_history",
              "submission_comments",
              "rubric_assessment",
              "assignment",
              "total_scores",
              "visibility",
              "course",
              "user"
            ],
            "type": "string",
            "description": "Associations to include with the group. `total_scores` requires the\n`grouped` argument."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}": {
      "get": {
        "description": "Get a single submission",
        "summary": "get_single_submission_courses",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsUserIdByCourseIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission_history",
              "submission_comments",
              "rubric_assessment",
              "visibility",
              "course",
              "user"
            ],
            "type": "string",
            "description": "Associations to include with the group."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Grade or comment on a submission",
        "summary": "grade_or_comment_on_submission_courses",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsUserIdByCourseIdAndAssignmentIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "comment[text_comment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Add a textual comment to the submission."
          },
          {
            "name": "comment[group_comment]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether or not this comment should be sent to the entire group (defaults\nto false). Ignored if this is not a group assignment or if no text_comment\nis provided."
          },
          {
            "name": "comment[media_comment_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Add an audio/video comment to the submission. Media comments can be added\nvia this API, however, note that there is not yet an API to generate or\nlist existing media comments, so this functionality is currently of\nlimited use."
          },
          {
            "name": "comment[media_comment_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "audio",
              "video"
            ],
            "type": "string",
            "description": "The type of media comment being added."
          },
          {
            "name": "comment[file_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Attach files to this comment that were previously uploaded using the\nSubmission Comment API's files action"
          },
          {
            "name": "include[visibility]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Whether this assignment is visible to the owner of the submission"
          },
          {
            "name": "submission[posted_grade]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Assign a score to the submission, updating both the \"score\" and \"grade\"\nfields on the submission record. This parameter can be passed in a few\ndifferent formats:\n\npoints:: A floating point or integral value, such as \"13.5\". The grade\n  will be interpreted directly as the score of the assignment.\n  Values above assignment.points_possible are allowed, for awarding\n  extra credit.\npercentage:: A floating point value appended with a percent sign, such as\n   \"40%\". The grade will be interpreted as a percentage score on the\n   assignment, where 100% == assignment.points_possible. Values above 100%\n   are allowed, for awarding extra credit.\nletter grade:: A letter grade, following the assignment's defined letter\n   grading scheme. For example, \"A-\". The resulting score will be the high\n   end of the defined range for the letter grade. For instance, if \"B\" is\n   defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\n   letter grade will be rejected if the assignment does not have a defined\n   letter grading scheme. For more fine-grained control of scores, pass in\n   points or percentage rather than the letter grade.\n\"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"\n   will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n   0.\n\nNote that assignments with grading_type of \"pass_fail\" can only be\nassigned a score of 0 or assignment.points_possible, nothing inbetween. If\na posted_grade in the \"points\" or \"percentage\" format is sent, the grade\nwill only be accepted if the grade equals one of those two values."
          },
          {
            "name": "submission[excuse]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Sets the \"excused\" status of an assignment."
          },
          {
            "name": "submission[late_policy_status]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Sets the late policy status to either \"late\", \"missing\", \"none\", or null."
          },
          {
            "name": "submission[seconds_late_override]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Sets the seconds late if late policy status is \"late\""
          },
          {
            "name": "rubric_assessment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Assign a rubric assessment to this assignment submission. The\nsub-parameters here depend on the rubric for the assignment. The general\nformat is, for each row in the rubric:\n\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\n\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\n\nFor example, if the assignment rubric is (in JSON format):\n  !!!javascript\n  [\n    {\n      'id': 'crit1',\n      'points': 10,\n      'description': 'Criterion 1',\n      'ratings':\n      [\n        { 'description': 'Good', 'points': 10 },\n        { 'description': 'Poor', 'points': 3 }\n      ]\n    },\n    {\n      'id': 'crit2',\n      'points': 5,\n      'description': 'Criterion 2',\n      'ratings':\n      [\n        { 'description': 'Complete', 'points': 5 },\n        { 'description': 'Incomplete', 'points': 0 }\n      ]\n    }\n  ]\n\nThen a possible set of values for rubric_assessment would be:\n    rubric_assessment[crit1][points]=3&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][comments]=Well%20Done."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}": {
      "get": {
        "description": "Get a single submission",
        "summary": "get_single_submission_sections",
        "tags": [
          "submissions"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionsUserIdBySectionIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "submission_history",
              "submission_comments",
              "rubric_assessment",
              "visibility",
              "course",
              "user"
            ],
            "type": "string",
            "description": "Associations to include with the group."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Grade or comment on a submission",
        "summary": "grade_or_comment_on_submission_sections",
        "tags": [
          "submissions"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionsUserIdBySectionIdAndAssignmentIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "comment[text_comment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Add a textual comment to the submission."
          },
          {
            "name": "comment[group_comment]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether or not this comment should be sent to the entire group (defaults\nto false). Ignored if this is not a group assignment or if no text_comment\nis provided."
          },
          {
            "name": "comment[media_comment_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Add an audio/video comment to the submission. Media comments can be added\nvia this API, however, note that there is not yet an API to generate or\nlist existing media comments, so this functionality is currently of\nlimited use."
          },
          {
            "name": "comment[media_comment_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "audio",
              "video"
            ],
            "type": "string",
            "description": "The type of media comment being added."
          },
          {
            "name": "comment[file_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Attach files to this comment that were previously uploaded using the\nSubmission Comment API's files action"
          },
          {
            "name": "include[visibility]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Whether this assignment is visible to the owner of the submission"
          },
          {
            "name": "submission[posted_grade]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Assign a score to the submission, updating both the \"score\" and \"grade\"\nfields on the submission record. This parameter can be passed in a few\ndifferent formats:\n\npoints:: A floating point or integral value, such as \"13.5\". The grade\n  will be interpreted directly as the score of the assignment.\n  Values above assignment.points_possible are allowed, for awarding\n  extra credit.\npercentage:: A floating point value appended with a percent sign, such as\n   \"40%\". The grade will be interpreted as a percentage score on the\n   assignment, where 100% == assignment.points_possible. Values above 100%\n   are allowed, for awarding extra credit.\nletter grade:: A letter grade, following the assignment's defined letter\n   grading scheme. For example, \"A-\". The resulting score will be the high\n   end of the defined range for the letter grade. For instance, if \"B\" is\n   defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\n   letter grade will be rejected if the assignment does not have a defined\n   letter grading scheme. For more fine-grained control of scores, pass in\n   points or percentage rather than the letter grade.\n\"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"\n   will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n   0.\n\nNote that assignments with grading_type of \"pass_fail\" can only be\nassigned a score of 0 or assignment.points_possible, nothing inbetween. If\na posted_grade in the \"points\" or \"percentage\" format is sent, the grade\nwill only be accepted if the grade equals one of those two values."
          },
          {
            "name": "submission[excuse]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Sets the \"excused\" status of an assignment."
          },
          {
            "name": "submission[late_policy_status]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Sets the late policy status to either \"late\", \"missing\", \"none\", or null."
          },
          {
            "name": "submission[seconds_late_override]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Sets the seconds late if late policy status is \"late\""
          },
          {
            "name": "rubric_assessment",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Assign a rubric assessment to this assignment submission. The\nsub-parameters here depend on the rubric for the assignment. The general\nformat is, for each row in the rubric:\n\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\n\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\n\nFor example, if the assignment rubric is (in JSON format):\n  !!!javascript\n  [\n    {\n      'id': 'crit1',\n      'points': 10,\n      'description': 'Criterion 1',\n      'ratings':\n      [\n        { 'description': 'Good', 'points': 10 },\n        { 'description': 'Poor', 'points': 3 }\n      ]\n    },\n    {\n      'id': 'crit2',\n      'points': 5,\n      'description': 'Criterion 2',\n      'ratings':\n      [\n        { 'description': 'Complete', 'points': 5 },\n        { 'description': 'Incomplete', 'points': 0 }\n      ]\n    }\n  ]\n\nThen a possible set of values for rubric_assessment would be:\n    rubric_assessment[crit1][points]=3&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][comments]=Well%20Done."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/files": {
      "post": {
        "description": "Upload a file",
        "summary": "upload_file_courses",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsUserIdFilesByCourseIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/files": {
      "post": {
        "description": "Upload a file",
        "summary": "upload_file_sections",
        "tags": [
          "submissions"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionsUserIdFilesBySectionIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/gradeable_students": {
      "get": {
        "description": "List gradeable students",
        "summary": "list_gradeable_students",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesAssignmentsGradeableStudentsByCourseIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/gradeable_students": {
      "get": {
        "description": "List multiple assignments gradeable students",
        "summary": "list_multiple_assignments_gradeable_students",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesAssignmentsGradeableStudentsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assignments being requested"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/submissions/update_grades": {
      "post": {
        "description": "Grade or comment on multiple submissions",
        "summary": "grade_or_comment_on_multiple_submissions_courses_submissions",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesSubmissionsUpdateGradesByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "grade_data[<student_id>][posted_grade]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][excuse]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][rubric_assessment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][text_comment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][group_comment]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][media_comment_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][media_comment_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "audio",
              "video"
            ],
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][file_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][assignment_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/update_grades": {
      "post": {
        "description": "Grade or comment on multiple submissions",
        "summary": "grade_or_comment_on_multiple_submissions_courses_assignments",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsUpdateGradesByCourseIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "grade_data[<student_id>][posted_grade]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][excuse]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][rubric_assessment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][text_comment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][group_comment]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][media_comment_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][media_comment_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "audio",
              "video"
            ],
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][file_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][assignment_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{section_id}/submissions/update_grades": {
      "post": {
        "description": "Grade or comment on multiple submissions",
        "summary": "grade_or_comment_on_multiple_submissions_sections_submissions",
        "tags": [
          "submissions"
        ],
        "operationId": "V1SectionsSubmissionsUpdateGradesBySectionIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "grade_data[<student_id>][posted_grade]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][excuse]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][rubric_assessment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][text_comment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][group_comment]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][media_comment_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][media_comment_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "audio",
              "video"
            ],
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][file_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][assignment_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/update_grades": {
      "post": {
        "description": "Grade or comment on multiple submissions",
        "summary": "grade_or_comment_on_multiple_submissions_sections_assignments",
        "tags": [
          "submissions"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionsUpdateGradesBySectionIdAndAssignmentIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "grade_data[<student_id>][posted_grade]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][excuse]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][rubric_assessment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][text_comment]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][group_comment]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][media_comment_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][media_comment_type]",
            "in": "formData",
            "required": false,
            "enum": [
              "audio",
              "video"
            ],
            "type": "string",
            "description": "no description"
          },
          {
            "name": "grade_data[<student_id>][file_ids]",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
          },
          {
            "name": "grade_data[<student_id>][assignment_id]",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read": {
      "put": {
        "description": "Mark submission as read",
        "summary": "mark_submission_as_read_courses",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsUserIdReadByCourseIdAndAssignmentIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Mark submission as unread",
        "summary": "mark_submission_as_unread_courses",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionsUserIdReadByCourseIdAndAssignmentIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read": {
      "put": {
        "description": "Mark submission as read",
        "summary": "mark_submission_as_read_sections",
        "tags": [
          "submissions"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionsUserIdReadBySectionIdAndAssignmentIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Mark submission as unread",
        "summary": "mark_submission_as_unread_sections",
        "tags": [
          "submissions"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionsUserIdReadBySectionIdAndAssignmentIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/assignments/{assignment_id}/submission_summary": {
      "get": {
        "description": "Submission Summary",
        "summary": "submission_summary_courses",
        "tags": [
          "submissions"
        ],
        "operationId": "V1CoursesAssignmentsSubmissionSummaryByCourseIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "grouped",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If this argument is true, the response will take into account student groups."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/sections/{section_id}/assignments/{assignment_id}/submission_summary": {
      "get": {
        "description": "Submission Summary",
        "summary": "submission_summary_sections",
        "tags": [
          "submissions"
        ],
        "operationId": "V1SectionsAssignmentsSubmissionSummaryBySectionIdAndAssignmentIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "section_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "assignment_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "grouped",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If this argument is true, the response will take into account student groups."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/tabs": {
      "get": {
        "description": "List available tabs for a course or group",
        "summary": "list_available_tabs_for_course_or_group_courses",
        "tags": [
          "tabs"
        ],
        "operationId": "V1CoursesTabsByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "external"
            ],
            "type": "string",
            "description": "\"external\":: Optionally include external tool tabs in the returned list of tabs (Only has effect for courses, not groups)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/groups/{group_id}/tabs": {
      "get": {
        "description": "List available tabs for a course or group",
        "summary": "list_available_tabs_for_course_or_group_groups",
        "tags": [
          "tabs"
        ],
        "operationId": "V1GroupsTabsByGroupIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "external"
            ],
            "type": "string",
            "description": "\"external\":: Optionally include external tool tabs in the returned list of tabs (Only has effect for courses, not groups)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/tabs/{tab_id}": {
      "put": {
        "description": "Update a tab for a course",
        "summary": "update_tab_for_course",
        "tags": [
          "tabs"
        ],
        "operationId": "V1CoursesTabsByCourseIdAndTabIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "tab_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "position",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The new position of the tab, 1-based"
          },
          {
            "name": "hidden",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "no description"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/observees": {
      "get": {
        "description": "List observees",
        "summary": "list_observees",
        "tags": [
          "user_observees"
        ],
        "operationId": "V1UsersObserveesByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "avatar_url"
            ],
            "type": "string",
            "description": "- \"avatar_url\": Optionally include avatar_url."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Add an observee with credentials",
        "summary": "add_observee_with_credentials",
        "tags": [
          "user_observees"
        ],
        "operationId": "V1UsersObserveesByUserIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "observee[unique_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The login id for the user to observe.  Required if access_token is omitted."
          },
          {
            "name": "observee[password]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The password for the user to observe. Required if access_token is omitted."
          },
          {
            "name": "access_token",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The access token for the user to observe.  Required if <tt>observee[unique_id]</tt> or <tt>observee[password]</tt> are omitted."
          },
          {
            "name": "pairing_code",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A generated pairing code for the user to observe. Required if the Observer pairing code feature flag is enabled"
          },
          {
            "name": "root_account_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID for the root account to associate with the observation link.\nDefaults to the current domain account.\nIf 'all' is specified, a link will be created for each root account associated\nto both the observer and observee."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/observees/{observee_id}": {
      "get": {
        "description": "Show an observee",
        "summary": "show_observee",
        "tags": [
          "user_observees"
        ],
        "operationId": "V1UsersObserveesByUserIdAndObserveeIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "observee_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Add an observee",
        "summary": "add_observee",
        "tags": [
          "user_observees"
        ],
        "operationId": "V1UsersObserveesByUserIdAndObserveeIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "observee_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "root_account_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID for the root account to associate with the observation link.\nIf not specified, a link will be created for each root account associated\nto both the observer and observee."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove an observee",
        "summary": "remove_observee",
        "tags": [
          "user_observees"
        ],
        "operationId": "V1UsersObserveesByUserIdAndObserveeIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "observee_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "root_account_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "If specified, only removes the link for the given root account"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/users": {
      "get": {
        "description": "List users in account",
        "summary": "list_users_in_account",
        "tags": [
          "users"
        ],
        "operationId": "V1AccountsUsersByAccountIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The partial name or full ID of the users to match and return in the\nresults list. Must be at least 3 characters.\n\nNote that the API will prefer matching on canonical user ID if the ID has\na numeric form. It will only search against other fields if non-numeric\nin form, or if the numeric value doesn't yield any matches. Queries by\nadministrative users will search on SIS ID, login ID, name, or email\naddress; non-administrative queries will only be compared against name."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "username",
              "email",
              "sis_id",
              "last_login"
            ],
            "type": "string",
            "description": "The column to sort results by."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "The order to sort the given column by."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a user",
        "summary": "create_user",
        "tags": [
          "users"
        ],
        "operationId": "V1AccountsUsersByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "pseudonym[unique_id]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "User's login ID. If this is a self-registration, it must be a valid\nemail address."
          },
          {
            "name": "user[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The full name of the user. This name will be used by teacher for grading.\nRequired if this is a self-registration."
          },
          {
            "name": "user[short_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User's name as it will be displayed in discussions, messages, and comments."
          },
          {
            "name": "user[sortable_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User's name as used to sort alphabetically in lists."
          },
          {
            "name": "user[time_zone]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The time zone for the user. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
          },
          {
            "name": "user[locale]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The user's preferred language, from the list of languages Canvas supports.\nThis is in RFC-5646 format."
          },
          {
            "name": "user[birthdate]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The user's birth date."
          },
          {
            "name": "user[terms_of_use]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Whether the user accepts the terms of use. Required if this is a\nself-registration and this canvas instance requires users to accept\nthe terms (on by default).\n\nIf this is true, it will mark the user as having accepted the terms of use."
          },
          {
            "name": "user[skip_registration]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Automatically mark the user as registered.\n\nIf this is true, it is recommended to set <tt>\"pseudonym[send_confirmation]\"</tt> to true as well.\nOtherwise, the user will not receive any messages about their account creation.\n\nThe users communication channel confirmation can be skipped by setting\n<tt>\"communication_channel[skip_confirmation]\"</tt> to true as well."
          },
          {
            "name": "pseudonym[password]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User's password. Cannot be set during self-registration."
          },
          {
            "name": "pseudonym[sis_user_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "SIS ID for the user's account. To set this parameter, the caller must be\nable to manage SIS permissions."
          },
          {
            "name": "pseudonym[integration_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Integration ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions. The Integration ID is a secondary\nidentifier useful for more complex SIS integrations."
          },
          {
            "name": "pseudonym[send_confirmation]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Send user notification of account creation if true.\nAutomatically set to true during self-registration."
          },
          {
            "name": "pseudonym[force_self_registration]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Send user a self-registration style email if true.\nSetting it means the users will get a notification asking them\nto \"complete the registration process\" by clicking it, setting\na password, and letting them in.  Will only be executed on\nif the user does not need admin approval.\nDefaults to false unless explicitly provided."
          },
          {
            "name": "pseudonym[authentication_provider_id]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The authentication provider this login is associated with. Logins\nassociated with a specific provider can only be used with that provider.\nLegacy providers (LDAP, CAS, SAML) will search for logins associated with\nthem, or unassociated logins. New providers will only search for logins\nexplicitly associated with them. This can be the integer ID of the\nprovider, or the type of the provider (in which case, it will find the\nfirst matching provider)."
          },
          {
            "name": "communication_channel[type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The communication channel type, e.g. 'email' or 'sms'."
          },
          {
            "name": "communication_channel[address]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The communication channel address, e.g. the user's email address."
          },
          {
            "name": "communication_channel[confirmation_url]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Only valid for account admins. If true, returns the new user account\nconfirmation URL in the response."
          },
          {
            "name": "communication_channel[skip_confirmation]",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "Only valid for site admins and account admins making requests; If true, the channel is\nautomatically validated and no confirmation email or SMS is sent.\nOtherwise, the user must respond to a confirmation message to confirm the\nchannel.\n\nIf this is true, it is recommended to set <tt>\"pseudonym[send_confirmation]\"</tt> to true as well.\nOtherwise, the user will not receive any messages about their account creation."
          },
          {
            "name": "force_validations",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "If true, validations are performed on the newly created user (and their associated pseudonym)\neven if the request is made by a privileged user like an admin. When set to false,\nor not included in the request parameters, any newly created users are subject to\nvalidations unless the request is made by a user with a 'manage_user_logins' right.\nIn which case, certain validations such as 'require_acceptance_of_terms' and\n'require_presence_of_name' are not enforced. Use this parameter to return helpful json\nerrors while building users with an admin request."
          },
          {
            "name": "enable_sis_reactivation",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": "When true, will first try to re-activate a deleted user with matching sis_user_id if possible.\nThis is commonly done with user[skip_registration] and communication_channel[skip_confirmation]\nso that the default communication_channel is also restored."
          },
          {
            "name": "destination",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "If you're setting the password for the newly created user, you can provide this param\nwith a valid URL pointing into this Canvas installation, and the response will include\na destination field that's a URL that you can redirect a browser to and have the newly\ncreated user automatically logged in. The URL is only valid for a short time, and must\nmatch the domain this request is directed to, and be for a well-formed path that Canvas\ncan recognize."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/activity_stream": {
      "get": {
        "description": "List the activity stream",
        "summary": "list_activity_stream_self",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfActivityStreamGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "only_active_courses",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, will only return objects for courses the user is actively participating in"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Hide all stream items",
        "summary": "hide_all_stream_items",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfActivityStreamDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/activity_stream": {
      "get": {
        "description": "List the activity stream",
        "summary": "list_activity_stream_activity_stream",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersActivityStreamGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "only_active_courses",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, will only return objects for courses the user is actively participating in"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/activity_stream/summary": {
      "get": {
        "description": "Activity stream summary",
        "summary": "activity_stream_summary",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfActivityStreamSummaryGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/todo": {
      "get": {
        "description": "List the TODO items",
        "summary": "list_todo_items",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfTodoGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "ungraded_quizzes"
            ],
            "type": "string",
            "description": "\"ungraded_quizzes\":: Optionally include ungraded quizzes (such as practice quizzes and surveys) in the list.\n                     These will be returned under a +quiz+ key instead of an +assignment+ key in response elements."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/todo_item_count": {
      "get": {
        "description": "List counts for todo items",
        "summary": "list_counts_for_todo_items",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfTodoItemCountGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "ungraded_quizzes"
            ],
            "type": "string",
            "description": "\"ungraded_quizzes\":: Optionally include ungraded quizzes (such as practice quizzes and surveys) in the list.\n                     These will be returned under a +quiz+ key instead of an +assignment+ key in response elements."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/upcoming_events": {
      "get": {
        "description": "List upcoming assignments, calendar events",
        "summary": "list_upcoming_assignments_calendar_events",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfUpcomingEventsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/missing_submissions": {
      "get": {
        "description": "List Missing Submissions",
        "summary": "list_missing_submissions",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersMissingSubmissionsByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "the student's ID"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "planner_overrides",
              "course"
            ],
            "type": "string",
            "description": "\"planner_overrides\":: Optionally include the assignment's associated planner override, if it exists, for the current user.\n                      These will be returned under a +planner_override+ key\n\"course\":: Optionally include the assignments' courses"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "enum": [
              "submittable"
            ],
            "type": "string",
            "description": "\"submittable\":: Only return assignments that the current user can submit (i.e. filter out locked assignments)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/activity_stream/{id}": {
      "delete": {
        "description": "Hide a stream item",
        "summary": "hide_stream_item",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfActivityStreamByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{id}": {
      "get": {
        "description": "Show user details",
        "summary": "show_user_details",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Edit a user",
        "summary": "edit_user",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user[name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The full name of the user. This name will be used by teacher for grading."
          },
          {
            "name": "user[short_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User's name as it will be displayed in discussions, messages, and comments."
          },
          {
            "name": "user[sortable_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User's name as used to sort alphabetically in lists."
          },
          {
            "name": "user[time_zone]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The time zone for the user. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
          },
          {
            "name": "user[email]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The default email address of the user."
          },
          {
            "name": "user[locale]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The user's preferred language, from the list of languages Canvas supports.\nThis is in RFC-5646 format."
          },
          {
            "name": "user[avatar][token]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "A unique representation of the avatar record to assign as the user's\ncurrent avatar. This token can be obtained from the user avatars endpoint.\nThis supersedes the user [avatar] [url] argument, and if both are included\nthe url will be ignored. Note: this is an internal representation and is\nsubject to change without notice. It should be consumed with this api\nendpoint and used in the user update endpoint, and should not be\nconstructed by the client."
          },
          {
            "name": "user[avatar][url]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "To set the user's avatar to point to an external url, do not include a\ntoken and instead pass the url here. Warning: For maximum compatibility,\nplease use 128 px square images."
          },
          {
            "name": "user[title]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Sets a title on the user profile. (See {api:ProfileController#settings Get user profile}.)\nProfiles must be enabled on the root account."
          },
          {
            "name": "user[bio]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Sets a bio on the user profile. (See {api:ProfileController#settings Get user profile}.)\nProfiles must be enabled on the root account."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/accounts/{account_id}/self_registration": {
      "post": {
        "description": "Self register a user",
        "summary": "self_register_user",
        "tags": [
          "users"
        ],
        "operationId": "V1AccountsSelfRegistrationByAccountIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "user[name]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The full name of the user. This name will be used by teacher for grading."
          },
          {
            "name": "user[terms_of_use]",
            "in": "formData",
            "required": true,
            "type": "boolean",
            "description": "Whether the user accepts the terms of use."
          },
          {
            "name": "pseudonym[unique_id]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "User's login ID. Must be a valid email address."
          },
          {
            "name": "user[short_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User's name as it will be displayed in discussions, messages, and comments."
          },
          {
            "name": "user[sortable_name]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "User's name as used to sort alphabetically in lists."
          },
          {
            "name": "user[time_zone]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The time zone for the user. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}."
          },
          {
            "name": "user[locale]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The user's preferred language, from the list of languages Canvas supports.\nThis is in RFC-5646 format."
          },
          {
            "name": "user[birthdate]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The user's birth date."
          },
          {
            "name": "communication_channel[type]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The communication channel type, e.g. 'email' or 'sms'."
          },
          {
            "name": "communication_channel[address]",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The communication channel address, e.g. the user's email address."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{id}/settings": {
      "get": {
        "description": "Update user settings.",
        "summary": "update_user_settings",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSettingsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "manual_mark_as_read",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, require user to manually mark discussion posts as read (don't\nauto-mark as read)."
          },
          {
            "name": "collapse_global_nav",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If true, the user's page loads with the global navigation collapsed"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{id}/colors": {
      "get": {
        "description": "Get custom colors",
        "summary": "get_custom_colors",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersColorsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{id}/colors/{asset_string}": {
      "get": {
        "description": "Get custom color",
        "summary": "get_custom_color",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersColorsByIdAndAssetStringGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "asset_string",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update custom color",
        "summary": "update_custom_color",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersColorsByIdAndAssetStringPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "asset_string",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "hexcode",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The hexcode of the color to set for the context, if you choose to pass the\nhexcode as a query parameter rather than in the request body you should\nNOT include the '#' unless you escape it first."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{id}/dashboard_positions": {
      "get": {
        "description": "Get dashboard positions",
        "summary": "get_dashboard_positions",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersDashboardPositionsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update dashboard positions",
        "summary": "update_dashboard_positions",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersDashboardPositionsByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{id}/merge_into/{destination_user_id}": {
      "put": {
        "description": "Merge user into another user",
        "summary": "merge_user_into_another_user_destination_user_id",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersMergeIntoByIdAndDestinationUserIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "destination_user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{id}/merge_into/accounts/{destination_account_id}/users/{destination_user_id}": {
      "put": {
        "description": "Merge user into another user",
        "summary": "merge_user_into_another_user_accounts",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersMergeIntoAccountsUsersDestinationUserIdByIdAndDestinationAccountIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "destination_account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "destination_user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{id}/split": {
      "post": {
        "description": "Split merged users into separate users",
        "summary": "split_merged_users_into_separate_users",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSplitByIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/pandata_events_token": {
      "post": {
        "description": "Get a Pandata Events jwt token and its expiration date",
        "summary": "get_pandata_events_jwt_token_and_its_expiration_date",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfPandataEventsTokenPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "app_key",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "The pandata events appKey for this mobile app"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/profile": {
      "get": {
        "description": "Get user profile",
        "summary": "get_user_profile",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersProfileByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/avatars": {
      "get": {
        "description": "List avatar options",
        "summary": "list_avatar_options",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersAvatarsByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/page_views": {
      "get": {
        "description": "List user page views",
        "summary": "list_user_page_views",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersPageViewsByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The beginning of the time range from which you want page views."
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The end of the time range from which you want page views."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/{user_id}/custom_data": {
      "put": {
        "description": "Store custom data",
        "summary": "store_custom_data",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersCustomDataByUserIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "ns",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The namespace under which to store the data.  This should be something other\nCanvas API apps aren't likely to use, such as a reverse DNS for your organization."
          },
          {
            "name": "data",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The data you want to store for the user, at the specified scope.  If the data is\ncomposed of (possibly nested) JSON objects, scopes will be generated for the (nested)\nkeys (see examples)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Load custom data",
        "summary": "load_custom_data",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersCustomDataByUserIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "ns",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The namespace from which to retrieve the data.  This should be something other\nCanvas API apps aren't likely to use, such as a reverse DNS for your organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Delete custom data",
        "summary": "delete_custom_data",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersCustomDataByUserIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "ns",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The namespace from which to delete the data.  This should be something other\nCanvas API apps aren't likely to use, such as a reverse DNS for your organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/course_nicknames": {
      "get": {
        "description": "List course nicknames",
        "summary": "list_course_nicknames",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfCourseNicknamesGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Clear course nicknames",
        "summary": "clear_course_nicknames",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfCourseNicknamesDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/users/self/course_nicknames/{course_id}": {
      "get": {
        "description": "Get course nickname",
        "summary": "get_course_nickname",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfCourseNicknamesByCourseIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Set course nickname",
        "summary": "set_course_nickname",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfCourseNicknamesByCourseIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "nickname",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The nickname to set.  It must be non-empty and shorter than 60 characters."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "description": "Remove course nickname",
        "summary": "remove_course_nickname",
        "tags": [
          "users"
        ],
        "operationId": "V1UsersSelfCourseNicknamesByCourseIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/lti/subscriptions": {
      "post": {
        "description": "Create a Webhook Subscription",
        "summary": "create_webhook_subscription",
        "tags": [
          "webhooks_subscriptions"
        ],
        "operationId": "LtiSubscriptionsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "submission[ContextId]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The id of the context for the subscription."
          },
          {
            "name": "subscription[ContextType]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "The type of context for the subscription. Must be 'assignment',\n'account', or 'course'."
          },
          {
            "name": "subscription[EventTypes]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "Array of strings representing the event types for\nthe subscription."
          },
          {
            "name": "subscription[Format]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "Format to deliver the live events. Must be 'live-event' or 'caliper'."
          },
          {
            "name": "subscription[TransportMetadata]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "An object with a single key: 'Url'. Example: { \"Url\": \"sqs.example\" }"
          },
          {
            "name": "subscription[TransportType]",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": "Must be either 'sqs' or 'https'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "List all Webhook Subscription for a tool proxy",
        "summary": "list_all_webhook_subscription_for_tool_proxy",
        "tags": [
          "webhooks_subscriptions"
        ],
        "operationId": "LtiSubscriptionsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/lti/subscriptions/{id}": {
      "delete": {
        "description": "Delete a Webhook Subscription",
        "summary": "delete_webhook_subscription",
        "tags": [
          "webhooks_subscriptions"
        ],
        "operationId": "LtiSubscriptionsByIdDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "description": "Show a single Webhook Subscription",
        "summary": "show_single_webhook_subscription",
        "tags": [
          "webhooks_subscriptions"
        ],
        "operationId": "LtiSubscriptionsByIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Update a Webhook Subscription",
        "summary": "update_webhook_subscription",
        "tags": [
          "webhooks_subscriptions"
        ],
        "operationId": "LtiSubscriptionsByIdPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/epub_exports": {
      "get": {
        "description": "List courses with their latest ePub export",
        "summary": "list_courses_with_their_latest_epub_export",
        "tags": [
          "e_pub_exports"
        ],
        "operationId": "V1EpubExportsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/epub_exports": {
      "post": {
        "description": "Create ePub Export",
        "summary": "create_epub_export",
        "tags": [
          "e_pub_exports"
        ],
        "operationId": "V1CoursesEpubExportsByCourseIdPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v1/courses/{course_id}/epub_exports/{id}": {
      "get": {
        "description": "Show ePub export",
        "summary": "show_epub_export",
        "tags": [
          "e_pub_exports"
        ],
        "operationId": "V1CoursesEpubExportsByCourseIdAndIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": []
      }
    }
  },
  "definitions": {
    "group_by": {
      "title": "group_by",
      "example": "resource_name",
      "type": "string",
      "enum": [
        "resource_name"
      ]
    },
    "account_notification[icon]": {
      "title": "account_notification[icon]",
      "example": "warning",
      "type": "string",
      "enum": [
        "warning",
        "information",
        "question",
        "error",
        "calendar"
      ]
    },
    "include": {
      "title": "include",
      "example": "lti_guid",
      "type": "string",
      "enum": [
        "lti_guid",
        "registration_settings",
        "services"
      ]
    },
    "enrollment_type": {
      "title": "enrollment_type",
      "example": "teacher",
      "type": "string",
      "enum": [
        "teacher",
        "student",
        "ta",
        "observer",
        "designer"
      ]
    },
    "state": {
      "title": "state",
      "example": "created",
      "type": "string",
      "enum": [
        "created",
        "claimed",
        "available",
        "completed",
        "deleted",
        "all"
      ]
    },
    "include1": {
      "title": "include1",
      "example": "syllabus_body",
      "type": "string",
      "enum": [
        "syllabus_body",
        "term",
        "course_progress",
        "storage_quota_used_mb",
        "total_students",
        "teachers",
        "account_name",
        "concluded"
      ]
    },
    "sort": {
      "title": "sort",
      "example": "course_name",
      "type": "string",
      "enum": [
        "course_name",
        "sis_course_id",
        "teacher",
        "account_name"
      ]
    },
    "order": {
      "title": "order",
      "example": "asc",
      "type": "string",
      "enum": [
        "asc",
        "desc"
      ]
    },
    "search_by": {
      "title": "search_by",
      "example": "course",
      "type": "string",
      "enum": [
        "course",
        "teacher"
      ]
    },
    "sort_column": {
      "title": "sort_column",
      "example": "name",
      "type": "string",
      "enum": [
        "name",
        "name_descending",
        "score",
        "score_descending",
        "participations",
        "participations_descending",
        "page_views",
        "page_views_descending"
      ]
    },
    "verbosity": {
      "title": "verbosity",
      "example": "full",
      "type": "string",
      "enum": [
        "full",
        "truncate",
        "link_only"
      ]
    },
    "scope": {
      "title": "scope",
      "example": "reservable",
      "type": "string",
      "enum": [
        "reservable",
        "manageable"
      ]
    },
    "include2": {
      "title": "include2",
      "example": "appointments",
      "type": "string",
      "enum": [
        "appointments",
        "child_events",
        "participant_count",
        "reserved_times",
        "all_context_codes"
      ]
    },
    "include3": {
      "title": "include3",
      "example": "child_events",
      "type": "string",
      "enum": [
        "child_events",
        "appointments",
        "all_context_codes"
      ]
    },
    "registration_status": {
      "title": "registration_status",
      "example": "all",
      "type": "string",
      "enum": [
        "all",
        "registered"
      ]
    },
    "include4": {
      "title": "include4",
      "example": "assignments",
      "type": "string",
      "enum": [
        "assignments",
        "discussion_topic",
        "all_dates",
        "assignment_visibility",
        "overrides",
        "submission"
      ]
    },
    "exclude_assignment_submission_types": {
      "title": "exclude_assignment_submission_types",
      "example": "online_quiz",
      "type": "string",
      "enum": [
        "online_quiz",
        "discussion_topic",
        "wiki_page",
        "external_tool"
      ]
    },
    "include5": {
      "title": "include5",
      "example": "assignments",
      "type": "string",
      "enum": [
        "assignments",
        "discussion_topic",
        "assignment_visibility",
        "submission"
      ]
    },
    "include6": {
      "title": "include6",
      "example": "submission",
      "type": "string",
      "enum": [
        "submission",
        "assignment_visibility",
        "all_dates",
        "overrides",
        "observed_users"
      ]
    },
    "bucket": {
      "title": "bucket",
      "example": "past",
      "type": "string",
      "enum": [
        "past",
        "overdue",
        "undated",
        "ungraded",
        "unsubmitted",
        "upcoming",
        "future"
      ]
    },
    "order_by": {
      "title": "order_by",
      "example": "position",
      "type": "string",
      "enum": [
        "position",
        "name"
      ]
    },
    "include8": {
      "title": "include8",
      "example": "submission",
      "type": "string",
      "enum": [
        "submission",
        "assignment_visibility",
        "overrides",
        "observed_users"
      ]
    },
    "assignment[submission_types]": {
      "title": "assignment[submission_types]",
      "example": "online_quiz",
      "type": "string",
      "enum": [
        "online_quiz",
        "none",
        "on_paper",
        "discussion_topic",
        "external_tool",
        "online_upload",
        "online_text_entry",
        "online_url",
        "media_recording"
      ]
    },
    "assignment[grading_type]": {
      "title": "assignment[grading_type]",
      "example": "pass_fail",
      "type": "string",
      "enum": [
        "pass_fail",
        "percent",
        "letter_grade",
        "gpa_scale",
        "points"
      ]
    },
    "content_type": {
      "title": "content_type",
      "example": "assignment",
      "type": "string",
      "enum": [
        "assignment",
        "attachment",
        "discussion_topic",
        "external_tool",
        "quiz",
        "wiki_page"
      ]
    },
    "calendar_event[duplicate][frequency]": {
      "title": "calendar_event[duplicate][frequency]",
      "example": "daily",
      "type": "string",
      "enum": [
        "daily",
        "weekly",
        "monthly"
      ]
    },
    "include9": {
      "title": "include9",
      "example": "collaborator_lti_id",
      "type": "string",
      "enum": [
        "collaborator_lti_id",
        "avatar_image_url"
      ]
    },
    "communication_channel[type]": {
      "title": "communication_channel[type]",
      "example": "email",
      "type": "string",
      "enum": [
        "email",
        "sms",
        "push"
      ]
    },
    "export_type": {
      "title": "export_type",
      "example": "common_cartridge",
      "type": "string",
      "enum": [
        "common_cartridge",
        "qti",
        "zip"
      ]
    },
    "workflow_state": {
      "title": "workflow_state",
      "example": "active",
      "type": "string",
      "enum": [
        "active",
        "resolved"
      ]
    },
    "type": {
      "title": "type",
      "example": "context_modules",
      "type": "string",
      "enum": [
        "context_modules",
        "assignments",
        "quizzes",
        "assessment_question_banks",
        "discussion_topics",
        "wiki_pages",
        "context_external_tools",
        "tool_profiles",
        "announcements",
        "calendar_events",
        "rubrics",
        "groups",
        "learning_outcomes",
        "attachments"
      ]
    },
    "status": {
      "title": "status",
      "example": "enabled",
      "type": "string",
      "enum": [
        "enabled",
        "disabled",
        "inherited"
      ]
    },
    "scope1": {
      "title": "scope1",
      "example": "unread",
      "type": "string",
      "enum": [
        "unread",
        "starred",
        "archived"
      ]
    },
    "include10": {
      "title": "include10",
      "example": "participant_avatars",
      "type": "string",
      "enum": [
        "participant_avatars"
      ]
    },
    "media_comment_type": {
      "title": "media_comment_type",
      "example": "audio",
      "type": "string",
      "enum": [
        "audio",
        "video"
      ]
    },
    "conversation[workflow_state]": {
      "title": "conversation[workflow_state]",
      "example": "read",
      "type": "string",
      "enum": [
        "read",
        "unread",
        "archived"
      ]
    },
    "event": {
      "title": "event",
      "example": "mark_as_read",
      "type": "string",
      "enum": [
        "mark_as_read",
        "mark_as_unread",
        "star",
        "unstar",
        "archive",
        "destroy"
      ]
    },
    "enrollment_state": {
      "title": "enrollment_state",
      "example": "active",
      "type": "string",
      "enum": [
        "active",
        "invited_or_pending",
        "completed"
      ]
    },
    "include11": {
      "title": "include11",
      "example": "needs_grading_count",
      "type": "string",
      "enum": [
        "needs_grading_count",
        "syllabus_body",
        "public_description",
        "total_scores",
        "current_grading_period_scores",
        "term",
        "account",
        "course_progress",
        "sections",
        "storage_quota_used_mb",
        "total_students",
        "passback_status",
        "favorites",
        "teachers",
        "observed_users",
        "course_image",
        "concluded"
      ]
    },
    "state1": {
      "title": "state1",
      "example": "unpublished",
      "type": "string",
      "enum": [
        "unpublished",
        "available",
        "completed",
        "deleted"
      ]
    },
    "course[default_view]": {
      "title": "course[default_view]",
      "example": "feed",
      "type": "string",
      "enum": [
        "feed",
        "wiki",
        "modules",
        "syllabus",
        "assignments"
      ]
    },
    "enrollment_type2": {
      "title": "enrollment_type2",
      "example": "teacher",
      "type": "string",
      "enum": [
        "teacher",
        "student",
        "student_view",
        "ta",
        "observer",
        "designer"
      ]
    },
    "include13": {
      "title": "include13",
      "example": "enrollments",
      "type": "string",
      "enum": [
        "enrollments",
        "locked",
        "avatar_url",
        "test_student",
        "bio",
        "custom_links",
        "current_grading_period_scores"
      ]
    },
    "enrollment_state2": {
      "title": "enrollment_state2",
      "example": "active",
      "type": "string",
      "enum": [
        "active",
        "invited",
        "rejected",
        "completed",
        "inactive"
      ]
    },
    "event1": {
      "title": "event1",
      "example": "delete",
      "type": "string",
      "enum": [
        "delete",
        "conclude"
      ]
    },
    "include15": {
      "title": "include15",
      "example": "needs_grading_count",
      "type": "string",
      "enum": [
        "needs_grading_count",
        "syllabus_body",
        "public_description",
        "total_scores",
        "current_grading_period_scores",
        "term",
        "account",
        "course_progress",
        "sections",
        "storage_quota_used_mb",
        "total_students",
        "passback_status",
        "favorites",
        "teachers",
        "observed_users",
        "all_courses",
        "permissions",
        "course_image",
        "concluded"
      ]
    },
    "course[event]": {
      "title": "course[event]",
      "example": "claim",
      "type": "string",
      "enum": [
        "claim",
        "offer",
        "conclude",
        "delete",
        "undelete"
      ]
    },
    "event2": {
      "title": "event2",
      "example": "offer",
      "type": "string",
      "enum": [
        "offer",
        "conclude",
        "delete",
        "undelete"
      ]
    },
    "except": {
      "title": "except",
      "example": "course_settings",
      "type": "string",
      "enum": [
        "course_settings",
        "assignments",
        "external_tools",
        "files",
        "topics",
        "calendar_events",
        "quizzes",
        "wiki_pages",
        "modules",
        "outcomes"
      ]
    },
    "only": {
      "title": "only",
      "example": "course_settings",
      "type": "string",
      "enum": [
        "course_settings",
        "assignments",
        "external_tools",
        "files",
        "topics",
        "calendar_events",
        "quizzes",
        "wiki_pages",
        "modules",
        "outcomes"
      ]
    },
    "include17": {
      "title": "include17",
      "example": "all_dates",
      "type": "string",
      "enum": [
        "all_dates",
        "sections",
        "sections_user_count",
        "overrides"
      ]
    },
    "order_by2": {
      "title": "order_by2",
      "example": "position",
      "type": "string",
      "enum": [
        "position",
        "recent_activity",
        "title"
      ]
    },
    "scope5": {
      "title": "scope5",
      "example": "locked",
      "type": "string",
      "enum": [
        "locked",
        "unlocked",
        "pinned",
        "unpinned"
      ]
    },
    "filter_by": {
      "title": "filter_by",
      "example": "all",
      "type": "string",
      "enum": [
        "all",
        "unread"
      ]
    },
    "discussion_type": {
      "title": "discussion_type",
      "example": "side_comment",
      "type": "string",
      "enum": [
        "side_comment",
        "threaded"
      ]
    },
    "workflow_state4": {
      "title": "workflow_state4",
      "example": "active",
      "type": "string",
      "enum": [
        "active",
        "deleted",
        "all"
      ]
    },
    "include21": {
      "title": "include21",
      "example": "overrides",
      "type": "string",
      "enum": [
        "overrides"
      ]
    },
    "state3": {
      "title": "state3",
      "example": "active",
      "type": "string",
      "enum": [
        "active",
        "invited",
        "creation_pending",
        "deleted",
        "rejected",
        "completed",
        "inactive"
      ]
    },
    "include22": {
      "title": "include22",
      "example": "avatar_url",
      "type": "string",
      "enum": [
        "avatar_url",
        "group_ids",
        "locked",
        "observed_users",
        "can_be_removed"
      ]
    },
    "enrollment[type]4": {
      "title": "enrollment[type]4",
      "example": "StudentEnrollment",
      "type": "string",
      "enum": [
        "StudentEnrollment",
        "TeacherEnrollment",
        "TaEnrollment",
        "ObserverEnrollment",
        "DesignerEnrollment"
      ]
    },
    "enrollment[enrollment_state]": {
      "title": "enrollment[enrollment_state]",
      "example": "active",
      "type": "string",
      "enum": [
        "active",
        "invited",
        "inactive"
      ]
    },
    "task": {
      "title": "task",
      "example": "conclude",
      "type": "string",
      "enum": [
        "conclude",
        "delete",
        "inactivate",
        "deactivate"
      ]
    },
    "launch_type": {
      "title": "launch_type",
      "example": "assessment",
      "type": "string",
      "enum": [
        "assessment",
        "module_item"
      ]
    },
    "course_navigation[visibility]": {
      "title": "course_navigation[visibility]",
      "example": "admins",
      "type": "string",
      "enum": [
        "admins",
        "members"
      ]
    },
    "course_navigation[windowTarget]": {
      "title": "course_navigation[windowTarget]",
      "example": "_blank",
      "type": "string",
      "enum": [
        "_blank",
        "_self"
      ]
    },
    "state6": {
      "title": "state6",
      "example": "off",
      "type": "string",
      "enum": [
        "off",
        "allowed",
        "on"
      ]
    },
    "include25": {
      "title": "include25",
      "example": "user",
      "type": "string",
      "enum": [
        "user"
      ]
    },
    "sort1": {
      "title": "sort1",
      "example": "name",
      "type": "string",
      "enum": [
        "name",
        "size",
        "created_at",
        "updated_at",
        "content_type",
        "user"
      ]
    },
    "on_duplicate": {
      "title": "on_duplicate",
      "example": "overwrite",
      "type": "string",
      "enum": [
        "overwrite",
        "rename"
      ]
    },
    "usage_rights[use_justification]": {
      "title": "usage_rights[use_justification]",
      "example": "own_copyright",
      "type": "string",
      "enum": [
        "own_copyright",
        "used_by_permission",
        "fair_use",
        "public_domain",
        "creative_commons"
      ]
    },
    "self_signup": {
      "title": "self_signup",
      "example": "enabled",
      "type": "string",
      "enum": [
        "enabled",
        "restricted"
      ]
    },
    "auto_leader": {
      "title": "auto_leader",
      "example": "first",
      "type": "string",
      "enum": [
        "first",
        "random"
      ]
    },
    "context_type": {
      "title": "context_type",
      "example": "Account",
      "type": "string",
      "enum": [
        "Account",
        "Course"
      ]
    },
    "include33": {
      "title": "include33",
      "example": "tabs",
      "type": "string",
      "enum": [
        "tabs"
      ]
    },
    "include36": {
      "title": "include36",
      "example": "permissions",
      "type": "string",
      "enum": [
        "permissions",
        "tabs"
      ]
    },
    "join_level": {
      "title": "join_level",
      "example": "parent_context_auto_join",
      "type": "string",
      "enum": [
        "parent_context_auto_join",
        "parent_context_request",
        "invitation_only"
      ]
    },
    "include37": {
      "title": "include37",
      "example": "avatar_url",
      "type": "string",
      "enum": [
        "avatar_url"
      ]
    },
    "filter_states": {
      "title": "filter_states",
      "example": "accepted",
      "type": "string",
      "enum": [
        "accepted",
        "invited",
        "requested"
      ]
    },
    "workflow_state5": {
      "title": "workflow_state5",
      "example": "accepted",
      "type": "string",
      "enum": [
        "accepted"
      ]
    },
    "include38": {
      "title": "include38",
      "example": "items",
      "type": "string",
      "enum": [
        "items",
        "content_details"
      ]
    },
    "include40": {
      "title": "include40",
      "example": "content_details",
      "type": "string",
      "enum": [
        "content_details"
      ]
    },
    "module_item[type]": {
      "title": "module_item[type]",
      "example": "File",
      "type": "string",
      "enum": [
        "File",
        "Page",
        "Discussion",
        "Assignment",
        "Quiz",
        "SubHeader",
        "ExternalUrl",
        "ExternalTool"
      ]
    },
    "module_item[completion_requirement][type]": {
      "title": "module_item[completion_requirement][type]",
      "example": "must_view",
      "type": "string",
      "enum": [
        "must_view",
        "must_contribute",
        "must_submit"
      ]
    },
    "asset_type": {
      "title": "asset_type",
      "example": "ModuleItem",
      "type": "string",
      "enum": [
        "ModuleItem",
        "File",
        "Page",
        "Discussion",
        "Assignment",
        "Quiz",
        "ExternalTool"
      ]
    },
    "calculation_method": {
      "title": "calculation_method",
      "example": "decaying_average",
      "type": "string",
      "enum": [
        "decaying_average",
        "n_mastery",
        "latest",
        "highest"
      ]
    },
    "aggregate": {
      "title": "aggregate",
      "example": "course",
      "type": "string",
      "enum": [
        "course"
      ]
    },
    "aggregate_stat": {
      "title": "aggregate_stat",
      "example": "mean",
      "type": "string",
      "enum": [
        "mean",
        "median"
      ]
    },
    "exclude": {
      "title": "exclude",
      "example": "missing_user_rollups",
      "type": "string",
      "enum": [
        "missing_user_rollups"
      ]
    },
    "sort_by": {
      "title": "sort_by",
      "example": "student",
      "type": "string",
      "enum": [
        "student",
        "outcome"
      ]
    },
    "sort_order": {
      "title": "sort_order",
      "example": "asc",
      "type": "string",
      "enum": [
        "asc",
        "desc"
      ]
    },
    "sort5": {
      "title": "sort5",
      "example": "title",
      "type": "string",
      "enum": [
        "title",
        "created_at",
        "updated_at"
      ]
    },
    "include42": {
      "title": "include42",
      "example": "submission_comments",
      "type": "string",
      "enum": [
        "submission_comments",
        "user"
      ]
    },
    "filter": {
      "title": "filter",
      "example": "new_activity",
      "type": "string",
      "enum": [
        "new_activity"
      ]
    },
    "plannable_type": {
      "title": "plannable_type",
      "example": "announcement",
      "type": "string",
      "enum": [
        "announcement",
        "assignment",
        "discussion_topic",
        "quiz",
        "wiki_page",
        "planner_note"
      ]
    },
    "order[type]": {
      "title": "order[type]",
      "example": "question",
      "type": "string",
      "enum": [
        "question"
      ]
    },
    "question[question_type]": {
      "title": "question[question_type]",
      "example": "calculated_question",
      "type": "string",
      "enum": [
        "calculated_question",
        "essay_question",
        "file_upload_question",
        "fill_in_multiple_blanks_question",
        "matching_question",
        "multiple_answers_question",
        "multiple_choice_question",
        "multiple_dropdowns_question",
        "numerical_question",
        "short_answer_question",
        "text_only_question",
        "true_false_question"
      ]
    },
    "quiz_report[report_type]": {
      "title": "quiz_report[report_type]",
      "example": "student_analysis",
      "type": "string",
      "enum": [
        "student_analysis",
        "item_analysis"
      ]
    },
    "include46": {
      "title": "include46",
      "example": "file",
      "type": "string",
      "enum": [
        "file",
        "progress"
      ]
    },
    "include48": {
      "title": "include48",
      "example": "quiz_question",
      "type": "string",
      "enum": [
        "quiz_question"
      ]
    },
    "include49": {
      "title": "include49",
      "example": "submission",
      "type": "string",
      "enum": [
        "submission",
        "quiz",
        "user"
      ]
    },
    "quiz[quiz_type]": {
      "title": "quiz[quiz_type]",
      "example": "practice_quiz",
      "type": "string",
      "enum": [
        "practice_quiz",
        "assignment",
        "graded_survey",
        "survey"
      ]
    },
    "quiz[hide_results]": {
      "title": "quiz[hide_results]",
      "example": "always",
      "type": "string",
      "enum": [
        "always",
        "until_after_last_attempt"
      ]
    },
    "quiz[scoring_policy]": {
      "title": "quiz[scoring_policy]",
      "example": "keep_highest",
      "type": "string",
      "enum": [
        "keep_highest",
        "keep_latest"
      ]
    },
    "state9": {
      "title": "state9",
      "example": "active",
      "type": "string",
      "enum": [
        "active",
        "inactive"
      ]
    },
    "base_role_type": {
      "title": "base_role_type",
      "example": "AccountMembership",
      "type": "string",
      "enum": [
        "AccountMembership",
        "StudentEnrollment",
        "TeacherEnrollment",
        "TaEnrollment",
        "ObserverEnrollment",
        "DesignerEnrollment"
      ]
    },
    "rubric_association[association_type]": {
      "title": "rubric_association[association_type]",
      "example": "Assignment",
      "type": "string",
      "enum": [
        "Assignment",
        "Course",
        "Account"
      ]
    },
    "include52": {
      "title": "include52",
      "example": "assessments",
      "type": "string",
      "enum": [
        "assessments",
        "graded_assessments",
        "peer_assessments",
        "associations",
        "assignment_associations",
        "course_associations",
        "account_associations"
      ]
    },
    "style": {
      "title": "style",
      "example": "full",
      "type": "string",
      "enum": [
        "full",
        "comments_only"
      ]
    },
    "workflow_state7": {
      "title": "workflow_state7",
      "example": "initializing",
      "type": "string",
      "enum": [
        "initializing",
        "created",
        "importing",
        "cleanup_batch",
        "imported",
        "imported_with_messages",
        "aborted",
        "failed",
        "failed_with_messages",
        "restoring",
        "partially_restored",
        "restored"
      ]
    },
    "diffing_drop_status": {
      "title": "diffing_drop_status",
      "example": "deleted",
      "type": "string",
      "enum": [
        "deleted",
        "completed",
        "inactive"
      ]
    },
    "include54": {
      "title": "include54",
      "example": "student_overrides",
      "type": "string",
      "enum": [
        "student_overrides"
      ]
    },
    "type4": {
      "title": "type4",
      "example": "user",
      "type": "string",
      "enum": [
        "user",
        "context"
      ]
    },
    "include56": {
      "title": "include56",
      "example": "students",
      "type": "string",
      "enum": [
        "students",
        "avatar_url",
        "enrollments",
        "total_students",
        "passback_status"
      ]
    },
    "submission[submission_type]": {
      "title": "submission[submission_type]",
      "example": "online_text_entry",
      "type": "string",
      "enum": [
        "online_text_entry",
        "online_url",
        "online_upload",
        "media_recording",
        "basic_lti_launch"
      ]
    },
    "submission[media_comment_type]": {
      "title": "submission[media_comment_type]",
      "example": "audio",
      "type": "string",
      "enum": [
        "audio",
        "video"
      ]
    },
    "workflow_state8": {
      "title": "workflow_state8",
      "example": "submitted",
      "type": "string",
      "enum": [
        "submitted",
        "unsubmitted",
        "graded",
        "pending_review"
      ]
    },
    "enrollment_state4": {
      "title": "enrollment_state4",
      "example": "active",
      "type": "string",
      "enum": [
        "active",
        "concluded"
      ]
    },
    "order7": {
      "title": "order7",
      "example": "id",
      "type": "string",
      "enum": [
        "id",
        "graded_at"
      ]
    },
    "include59": {
      "title": "include59",
      "example": "submission_history",
      "type": "string",
      "enum": [
        "submission_history",
        "submission_comments",
        "rubric_assessment",
        "assignment",
        "total_scores",
        "visibility",
        "course",
        "user"
      ]
    },
    "include61": {
      "title": "include61",
      "example": "submission_history",
      "type": "string",
      "enum": [
        "submission_history",
        "submission_comments",
        "rubric_assessment",
        "visibility",
        "course",
        "user"
      ]
    },
    "comment[media_comment_type]": {
      "title": "comment[media_comment_type]",
      "example": "audio",
      "type": "string",
      "enum": [
        "audio",
        "video"
      ]
    },
    "grade_data[<student_id>][media_comment_type]": {
      "title": "grade_data[<student_id>][media_comment_type]",
      "example": "audio",
      "type": "string",
      "enum": [
        "audio",
        "video"
      ]
    },
    "include63": {
      "title": "include63",
      "example": "external",
      "type": "string",
      "enum": [
        "external"
      ]
    },
    "sort7": {
      "title": "sort7",
      "example": "username",
      "type": "string",
      "enum": [
        "username",
        "email",
        "sis_id",
        "last_login"
      ]
    },
    "include66": {
      "title": "include66",
      "example": "ungraded_quizzes",
      "type": "string",
      "enum": [
        "ungraded_quizzes"
      ]
    },
    "include68": {
      "title": "include68",
      "example": "planner_overrides",
      "type": "string",
      "enum": [
        "planner_overrides",
        "course"
      ]
    },
    "filter1": {
      "title": "filter1",
      "example": "submittable",
      "type": "string",
      "enum": [
        "submittable"
      ]
    }
  },
  "tags": [
    {
      "name": "api_token_scopes",
      "description": ""
    },
    {
      "name": "account_domain_lookups",
      "description": ""
    },
    {
      "name": "account_notifications",
      "description": ""
    },
    {
      "name": "account_reports",
      "description": ""
    },
    {
      "name": "accounts",
      "description": ""
    },
    {
      "name": "admins",
      "description": ""
    },
    {
      "name": "analytics",
      "description": ""
    },
    {
      "name": "announcement_external_feeds",
      "description": ""
    },
    {
      "name": "announcements",
      "description": ""
    },
    {
      "name": "appointment_groups",
      "description": ""
    },
    {
      "name": "assignment_extensions",
      "description": ""
    },
    {
      "name": "assignment_groups",
      "description": ""
    },
    {
      "name": "assignments",
      "description": ""
    },
    {
      "name": "authentication_providers",
      "description": ""
    },
    {
      "name": "authentications_log",
      "description": ""
    },
    {
      "name": "blueprint_courses",
      "description": ""
    },
    {
      "name": "bookmarks",
      "description": ""
    },
    {
      "name": "brand_configs",
      "description": ""
    },
    {
      "name": "calendar_events",
      "description": ""
    },
    {
      "name": "collaborations",
      "description": ""
    },
    {
      "name": "comm_messages",
      "description": ""
    },
    {
      "name": "communication_channels",
      "description": ""
    },
    {
      "name": "conferences",
      "description": ""
    },
    {
      "name": "content_exports",
      "description": ""
    },
    {
      "name": "content_migrations",
      "description": ""
    },
    {
      "name": "content_security_policy_settings",
      "description": ""
    },
    {
      "name": "conversations",
      "description": ""
    },
    {
      "name": "course_audit_log",
      "description": ""
    },
    {
      "name": "course_quiz_extensions",
      "description": ""
    },
    {
      "name": "courses",
      "description": ""
    },
    {
      "name": "custom_gradebook_columns",
      "description": ""
    },
    {
      "name": "discussion_topics",
      "description": ""
    },
    {
      "name": "enrollment_terms",
      "description": ""
    },
    {
      "name": "enrollments",
      "description": ""
    },
    {
      "name": "error_reports",
      "description": ""
    },
    {
      "name": "external_tools",
      "description": ""
    },
    {
      "name": "favorites",
      "description": ""
    },
    {
      "name": "feature_flags",
      "description": ""
    },
    {
      "name": "files",
      "description": ""
    },
    {
      "name": "grade_change_log",
      "description": ""
    },
    {
      "name": "gradebook_history",
      "description": ""
    },
    {
      "name": "grading_periods",
      "description": ""
    },
    {
      "name": "grading_standards",
      "description": ""
    },
    {
      "name": "group_categories",
      "description": ""
    },
    {
      "name": "groups",
      "description": ""
    },
    {
      "name": "jw_ts",
      "description": ""
    },
    {
      "name": "late_policy",
      "description": ""
    },
    {
      "name": "live_assessments",
      "description": ""
    },
    {
      "name": "logins",
      "description": ""
    },
    {
      "name": "moderated_grading",
      "description": ""
    },
    {
      "name": "modules",
      "description": ""
    },
    {
      "name": "notification_preferences",
      "description": ""
    },
    {
      "name": "originality_reports",
      "description": ""
    },
    {
      "name": "outcome_groups",
      "description": ""
    },
    {
      "name": "outcome_imports",
      "description": ""
    },
    {
      "name": "outcome_results",
      "description": ""
    },
    {
      "name": "outcomes",
      "description": ""
    },
    {
      "name": "pages",
      "description": ""
    },
    {
      "name": "peer_reviews",
      "description": ""
    },
    {
      "name": "plagiarism_detection_platform_assignments",
      "description": ""
    },
    {
      "name": "plagiarism_detection_platform_users",
      "description": ""
    },
    {
      "name": "plagiarism_detection_submissions",
      "description": ""
    },
    {
      "name": "planner",
      "description": ""
    },
    {
      "name": "poll_sessions",
      "description": ""
    },
    {
      "name": "poll_choices",
      "description": ""
    },
    {
      "name": "poll_submissions",
      "description": ""
    },
    {
      "name": "polls",
      "description": ""
    },
    {
      "name": "proficiency_ratings",
      "description": ""
    },
    {
      "name": "progress",
      "description": ""
    },
    {
      "name": "quiz_assignment_overrides",
      "description": ""
    },
    {
      "name": "quiz_extensions",
      "description": ""
    },
    {
      "name": "quiz_ip_filters",
      "description": ""
    },
    {
      "name": "quiz_question_groups",
      "description": ""
    },
    {
      "name": "quiz_questions",
      "description": ""
    },
    {
      "name": "quiz_reports",
      "description": ""
    },
    {
      "name": "quiz_statistics",
      "description": ""
    },
    {
      "name": "quiz_submission_events",
      "description": ""
    },
    {
      "name": "quiz_submission_files",
      "description": ""
    },
    {
      "name": "quiz_submission_questions",
      "description": ""
    },
    {
      "name": "quiz_submission_user_list",
      "description": ""
    },
    {
      "name": "quiz_submissions",
      "description": ""
    },
    {
      "name": "quizzes",
      "description": ""
    },
    {
      "name": "roles",
      "description": ""
    },
    {
      "name": "rubrics",
      "description": ""
    },
    {
      "name": "sis_import_errors",
      "description": ""
    },
    {
      "name": "sis_imports",
      "description": ""
    },
    {
      "name": "sis_integration",
      "description": ""
    },
    {
      "name": "search",
      "description": ""
    },
    {
      "name": "sections",
      "description": ""
    },
    {
      "name": "services",
      "description": ""
    },
    {
      "name": "shared_brand_configs",
      "description": ""
    },
    {
      "name": "submission_comments",
      "description": ""
    },
    {
      "name": "submissions",
      "description": ""
    },
    {
      "name": "tabs",
      "description": ""
    },
    {
      "name": "user_observees",
      "description": ""
    },
    {
      "name": "users",
      "description": ""
    },
    {
      "name": "webhooks_subscriptions",
      "description": ""
    },
    {
      "name": "e_pub_exports",
      "description": ""
    }
  ]
}